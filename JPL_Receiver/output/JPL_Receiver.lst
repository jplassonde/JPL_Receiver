FILE: .\boot.asm                        (0001) ;  Generated by PSoC Designer 5.4.3191
                                        (0002) ;
                                        (0003) ;@Id: boot.tpl#903 @
                                        (0004) ;=============================================================================
                                        (0005) ;  FILENAME:   boot.asm
                                        (0006) ;  Version:    4.30
                                        (0007) ;
                                        (0008) ;  DESCRIPTION:
                                        (0009) ;  M8C Boot Code for CY8C27xxx microcontroller family.
                                        (0010) ;
                                        (0011) ;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0012) ;
                                        (0013) ; NOTES:
                                        (0014) ; PSoC Designer's Device Editor uses a template file, BOOT.TPL, located in
                                        (0015) ; the project's root directory to create BOOT.ASM. Any changes made to
                                        (0016) ; BOOT.ASM will be  overwritten every time the project is generated; therefore
                                        (0017) ; changes should be made to BOOT.TPL not BOOT.ASM. Care must be taken when
                                        (0018) ; modifying BOOT.TPL so that replacement strings (such as @PROJECT_NAME)
                                        (0019) ; are not accidentally modified.
                                        (0020) ;
                                        (0021) ;=============================================================================
                                        (0022) 
                                        (0023) include ".\lib\GlobalParams.inc"	;File generated by PSoC Designer (Project dependent)
                                        (0024) include "m8c.inc"			;Part specific file
                                        (0025) include "m8ssc.inc"			;Part specific file
                                        (0026) include "memory.inc"			;File generated by PSoC Designer (Project dependent)
                                        (0027) 
                                        (0028) ;--------------------------------------
                                        (0029) ; Export Declarations
                                        (0030) ;--------------------------------------
                                        (0031) 
                                        (0032) export __Start
                                        (0033) IF	(TOOLCHAIN & HITECH)
                                        (0034) ELSE
                                        (0035) export __bss_start
                                        (0036) export __data_start
                                        (0037) export __idata_start
                                        (0038) export __func_lit_start
                                        (0039) export __text_start
                                        (0040) ENDIF
                                        (0041) export  _bGetPowerSetting
                                        (0042) export   bGetPowerSetting
                                        (0043) 
                                        (0044) 
                                        (0045) ;--------------------------------------
                                        (0046) ; Optimization flags
                                        (0047) ;--------------------------------------
                                        (0048) ;
                                        (0049) ; To change the value of these flags, modify the file boot.tpl, not
                                        (0050) ; boot.asm. See the notes in the banner comment at the beginning of
                                        (0051) ; this file.
                                        (0052) 
                                        (0053) ; Optimization for Assembly language (only) projects and C-language projects
                                        (0054) ; that do not depend on the C compiler to initialize the values of RAM variables.
                                        (0055) ;   Set to 1: Support for C Run-time Environment initialization
                                        (0056) ;   Set to 0: Support for C not included. Faster start up, smaller code space.
                                        (0057) ;
                                        (0058) IF	(TOOLCHAIN & HITECH)
                                        (0059) ; The C compiler will customize the startup code - it's not required here
                                        (0060) 
                                        (0061) C_LANGUAGE_SUPPORT:              equ 0
                                        (0062) ELSE
                                        (0063) C_LANGUAGE_SUPPORT:              equ 1
                                        (0064) ENDIF
                                        (0065) 
                                        (0066) 
                                        (0067) ; The following equate is required for proper operation. Reseting its value
                                        (0068) ; is discouraged.  WAIT_FOR_32K is effective only if the crystal oscillator is
                                        (0069) ; selected.  If the designer chooses to not wait then stabilization of the ECO
                                        (0070) ; and PLL_Lock must take place within user code. See the family data sheet for
                                        (0071) ; the requirements of starting the ECO and PLL lock mode.
                                        (0072) ;
                                        (0073) ;   Set to 1: Wait for XTAL (& PLL if selected) to stabilize before
                                        (0074) ;                invoking main
                                        (0075) ;   Set to 0: Boot code does not wait; clock may not have stabilized by
                                        (0076) ;               the time code in main starts executing.
                                        (0077) ;
                                        (0078) WAIT_FOR_32K:                    equ 1
                                        (0079) 
                                        (0080) 
                                        (0081) ; For historical reasons, by default the boot code uses an lcall instruction
                                        (0082) ; to invoke the user's _main code. If _main executes a return instruction,
                                        (0083) ; boot provides an infinite loop. By changing the following equate from zero
                                        (0084) ; to 1, boot's lcall will be replaced by a ljmp instruction, saving two
                                        (0085) ; bytes on the stack which are otherwise required for the return address. If
                                        (0086) ; this option is enabled, _main must not return. (Beginning with the 4.2
                                        (0087) ; release, the C compiler automatically places an infinite loop at the end
                                        (0088) ; of main, rather than a return instruction.)
                                        (0089) ;
                                        (0090) ENABLE_LJMP_TO_MAIN:             equ 0
                                        (0091) 
                                        (0092) 
                                        (0093) ;-----------------------------------------------------------------------------
                                        (0094) ; Interrupt Vector Table
                                        (0095) ;-----------------------------------------------------------------------------
                                        (0096) ;
                                        (0097) ; Interrupt vector table entries are 4 bytes long.  Each one contains
                                        (0098) ; a jump instruction to an ISR (Interrupt Service Routine), although
                                        (0099) ; very short ISRs could be encoded within the table itself. Normally,
                                        (0100) ; vector jump targets are modified automatically according to the user
                                        (0101) ; modules selected. This occurs when the 'Generate Application' opera-
                                        (0102) ; tion is run causing PSoC Designer to create boot.asm and the other
                                        (0103) ; configuration files. If you need to hard code a vector, update the
                                        (0104) ; file boot.tpl, not boot.asm. See the banner comment at the beginning
                                        (0105) ; of this file.
                                        (0106) ;-----------------------------------------------------------------------------
                                        (0107) 
                                        (0108)     AREA TOP (ROM, ABS, CON)
                                        (0109) 
                                        (0110)     org   0                        ;Reset Interrupt Vector
                                        (0111) IF	(TOOLCHAIN & HITECH)
                                        (0112) ;   jmp   __Start                  ;C compiler fills in this vector
                                        (0113) ELSE
0000: 80 67    JMP   0x0068             (0114)     jmp   __Start                  ;First instruction executed following a Reset
                                        (0115) ENDIF
                                        (0116)     ;@PSoC_BOOT_ISR_UserCode_START@
                                        (0117)     ;---------------------------------------------------
                                        (0118)     ; Insert your custom code below this banner
                                        (0119)     ;---------------------------------------------------
                                        (0120) 
                                        (0121)     org   04h                      ;Low Voltage Detect (LVD) Interrupt Vector
0004: 30       HALT                     (0122)     halt                           ;Stop execution if power falls too low
                                        (0123) 
                                        (0124)     org   08h                      ;Analog Column 0 Interrupt Vector
                                        (0125)     // call	void_handler
0008: 7E       RETI                     (0126)     reti
                                        (0127) 
                                        (0128)     org   0Ch                      ;Analog Column 1 Interrupt Vector
                                        (0129)     // call	void_handler
000C: 7E       RETI                     (0130)     reti
                                        (0131) 
                                        (0132)     org   10h                      ;Analog Column 2 Interrupt Vector
                                        (0133)     // call	void_handler
0010: 7E       RETI                     (0134)     reti
                                        (0135) 
                                        (0136)     org   14h                      ;Analog Column 3 Interrupt Vector
                                        (0137)     // call	void_handler
0014: 7E       RETI                     (0138)     reti
                                        (0139) 
                                        (0140)     org   18h                      ;VC3 Interrupt Vector
                                        (0141)     // call	void_handler
0018: 7E       RETI                     (0142)     reti
                                        (0143) 
                                        (0144)     org   1Ch                      ;GPIO Interrupt Vector
001C: 7D 07 8A LJMP  PSoC_GPIO_ISR      (0145)     ljmp	PSoC_GPIO_ISR
001F: 7E       RETI                     (0146)     reti
                                        (0147) 
                                        (0148)     org   20h                      ;PSoC Block DBB00 Interrupt Vector
                                        (0149)     // call	void_handler
0020: 7E       RETI                     (0150)     reti
                                        (0151) 
                                        (0152)     org   24h                      ;PSoC Block DBB01 Interrupt Vector
                                        (0153)     // call	void_handler
0024: 7E       RETI                     (0154)     reti
                                        (0155) 
                                        (0156)     org   28h                      ;PSoC Block DCB02 Interrupt Vector
0028: 7D 02 D9 LJMP  _SPIM_ISR          (0157)     ljmp	_SPIM_ISR
002B: 7E       RETI                     (0158)     reti
                                        (0159) 
                                        (0160)     org   2Ch                      ;PSoC Block DCB03 Interrupt Vector
                                        (0161)     // call	void_handler
002C: 7E       RETI                     (0162)     reti
                                        (0163) 
                                        (0164)     org   30h                      ;PSoC Block DBB10 Interrupt Vector
                                        (0165)     // call	void_handler
0030: 7E       RETI                     (0166)     reti
                                        (0167) 
                                        (0168)     org   34h                      ;PSoC Block DBB11 Interrupt Vector
                                        (0169)     // call	void_handler
0034: 7E       RETI                     (0170)     reti
                                        (0171) 
                                        (0172)     org   38h                      ;PSoC Block DCB12 Interrupt Vector
                                        (0173)     // call	void_handler
0038: 7E       RETI                     (0174)     reti
                                        (0175) 
                                        (0176)     org   3Ch                      ;PSoC Block DCB13 Interrupt Vector
                                        (0177)     // call	void_handler
003C: 7E       RETI                     (0178)     reti
                                        (0179) 
                                        (0180)     org   60h                      ;PSoC I2C Interrupt Vector
                                        (0181)     // call	void_handler
0060: 7E       RETI                     (0182)     reti
                                        (0183) 
                                        (0184)     org   64h                      ;Sleep Timer Interrupt Vector
0064: 7D 02 F4 LJMP  _SleepTimer_ISR    (0185)     ljmp	_SleepTimer_ISR
0067: 7E       RETI                     (0186)     reti
0068: 71 10    OR    F,0x10             
                                        (0187)     ;---------------------------------------------------
                                        (0188)     ; Insert your custom code above this banner
                                        (0189)     ;---------------------------------------------------
                                        (0190)     ;@PSoC_BOOT_ISR_UserCode_END@
                                        (0191) 
                                        (0192) ;-----------------------------------------------------------------------------
                                        (0193) ;  Start of Execution.
                                        (0194) ;-----------------------------------------------------------------------------
                                        (0195) ;  The Supervisory ROM SWBootReset function has already completed the
                                        (0196) ;  calibrate1 process, loading trim values for 5 volt operation.
                                        (0197) ;
                                        (0198) 
                                        (0199) IF	(TOOLCHAIN & HITECH)
                                        (0200)  	AREA PD_startup(CODE, REL, CON)
                                        (0201) ELSE
                                        (0202)     org 68h
                                        (0203) ENDIF
                                        (0204) __Start:
                                        (0205) 
                                        (0206)     ; initialize SMP values for voltage stabilization, if required,
                                        (0207)     ; leaving power-on reset (POR) level at the default (low) level, at
                                        (0208)     ; least for now. 
                                        (0209)     ;
                                        (0210)     M8C_SetBank1
006A: 62 E3 87 MOV   REG[0xE3],0x87     (0211)     mov   reg[VLT_CR], SWITCH_MODE_PUMP_JUST | LVD_TBEN_JUST | TRIP_VOLTAGE_JUST
006D: 70 EF    AND   F,0xEF             
006F: 62 E3 38 MOV   REG[0xE3],0x38     
                                        (0212)     M8C_SetBank0
                                        (0213) 
                                        (0214) M8C_ClearWDTAndSleep			   ; Clear WDT before enabling it.
                                        (0215) IF ( WATCHDOG_ENABLE )             ; WDT selected in Global Params
                                        (0216)     M8C_EnableWatchDog
                                        (0217) ENDIF
                                        (0218) 
                                        (0219) IF ( SELECT_32K )
                                        (0220)     or   reg[CPU_SCR1],  CPU_SCR1_ECO_ALLOWED  ; ECO will be used in this project
                                        (0221) ELSE
0072: 41 FE FB AND   REG[0xFE],0xFB     (0222)     and  reg[CPU_SCR1], ~CPU_SCR1_ECO_ALLOWED  ; Prevent ECO from being enabled
                                        (0223) ENDIF
                                        (0224) 
                                        (0225) IF	(TOOLCHAIN & HITECH) 
                                        (0226)     ;---------------------------
                                        (0227)     ; Set up the Temporary stack
                                        (0228)     ;---------------------------
                                        (0229)     ; A temporary stack is set up for the SSC instructions.
                                        (0230)     ; The real stack start will be assigned later.
                                        (0231)     ;
                                        (0232) 	global		__Lstackps
                                        (0233) 	mov     a,low __Lstackps
                                        (0234) 	swap    a,sp
                                        (0235) ELSE
                                        (0236)     ;------------------
                                        (0237)     ; Set up the stack
                                        (0238)     ;------------------
0075: 50 4A    MOV   A,0x4A             (0239)     mov   A, __ramareas_end        ; Set top of stack to end of used RAM
0077: 4E       SWAP  SP,A               (0240)     swap  SP, A                    ; This is only temporary if going to LMM
0078: 62 E3 38 MOV   REG[0xE3],0x38     
                                        (0241) ENDIF
                                        (0242) 
                                        (0243)     ;-----------------------------------------------
                                        (0244)     ; Set Power-related Trim & the AGND Bypass bit.
                                        (0245)     ;-----------------------------------------------
                                        (0246) M8C_ClearWDTAndSleep ; Clear WDT before enabling it.
                                        (0247) IF ( SUPPLY_VOLTAGE )         ; 1 means 5.0V
                                        (0248)  IF ( AGND_BYPASS )
                                        (0249)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0250)     ; The 5V trim has already been set, but we need to update the AGNDBYP
                                        (0251)     ; bit in the write-only BDG_TR register. Recalculate the register
                                        (0252)     ; value using the proper trim values.
                                        (0253)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0254)     M8SSC_SetTableVoltageTrim 1, SSCTBL1_TRIM_BGR_5V, AGND_BYPASS_JUST
                                        (0255)  ENDIF
                                        (0256) ELSE    ; 3.3 V Operation, not 5.0V
                                        (0257)     M8SSC_SetTableTrims  1, SSCTBL1_TRIM_IMO_3V_24MHZ, SSCTBL1_TRIM_BGR_3V, AGND_BYPASS_JUST
                                        (0258) ENDIF ;(SUPPLY_VOLTAGE)
                                        (0259) 
007B: 55 F8 00 MOV   [_ramareas_end+174],0x0(0260)     mov  [bSSC_KEY1],  0           ; Lock out Flash and Supervisiory operations
007E: 55 F9 00 MOV   [_ramareas_end+175],0x0(0261)     mov  [bSSC_KEYSP], 0
0081: 71 10    OR    F,0x10             
                                        (0262) 
                                        (0263)     ;---------------------------------------
                                        (0264)     ; Initialize Crystal Oscillator and PLL
                                        (0265)     ;---------------------------------------
                                        (0266) 
                                        (0267) IF ( SELECT_32K & WAIT_FOR_32K )
                                        (0268)     ; If the user has requested the External Crystal Oscillator (ECO) then turn it
                                        (0269)     ; on and wait for it to stabilize and the system to switch over to it. The PLL
                                        (0270)     ; is left off. Set the SleepTimer period is set to 1 sec to time the wait for
                                        (0271)     ; the ECO to stabilize.
                                        (0272)     ;
                                        (0273)     M8C_SetBank1
                                        (0274)     mov   reg[OSC_CR0], (SELECT_32K_JUST | OSC_CR0_SLEEP_1Hz | OSC_CR0_CPU_12MHz)
                                        (0275)     M8C_SetBank0
                                        (0276)     M8C_ClearWDTAndSleep                  ; Reset the sleep timer to get a full second
                                        (0277)     or    reg[INT_MSK0], INT_MSK0_SLEEP   ; Enable latching of SleepTimer interrupt
                                        (0278)     mov   reg[INT_VC],   0                ; Clear all pending interrupts
                                        (0279) .WaitFor1s:
                                        (0280)     tst   reg[INT_CLR0], INT_MSK0_SLEEP   ; Test the SleepTimer Interrupt Status
                                        (0281)     jz   .WaitFor1s                       ; Interrupt will latch but will not dispatch
                                        (0282)                                           ;   since interrupts are not globally enabled
                                        (0283) ELSE ; !( SELECT_32K & WAIT_FOR_32K )
                                        (0284)     ; Either no ECO, or waiting for stable clock is to be done in main
                                        (0285)     M8C_SetBank1
0083: 62 E0 12 MOV   REG[0xE0],0x12     (0286)     mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | SLEEP_TIMER_JUST | OSC_CR0_CPU_12MHz)
0086: 70 EF    AND   F,0xEF             
0088: 62 E3 38 MOV   REG[0xE3],0x38     
                                        (0287)     M8C_SetBank0
                                        (0288)     M8C_ClearWDTAndSleep           ; Reset the watch dog
                                        (0289) 
                                        (0290) ENDIF ;( SELECT_32K & WAIT_FOR_32K )
                                        (0291) 
                                        (0292) IF ( PLL_MODE )
                                        (0293)     ; Crystal is now fully operational (assuming WAIT_FOR_32K was enabled).
                                        (0294)     ; Now start up PLL if selected, and wait 16 msec for it to stabilize.
                                        (0295)     ;
                                        (0296)     M8C_SetBank1
                                        (0297)     mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | OSC_CR0_SLEEP_64Hz | OSC_CR0_CPU_3MHz)
                                        (0298)     M8C_SetBank0
                                        (0299)     M8C_ClearWDTAndSleep                  ; Reset the sleep timer to get full period
                                        (0300)     mov   reg[INT_VC], 0                  ; Clear all pending interrupts
                                        (0301) 
                                        (0302) .WaitFor16ms:
                                        (0303)     tst   reg[INT_CLR0],INT_MSK0_SLEEP    ; Test the SleepTimer Interrupt Status
                                        (0304)     jz   .WaitFor16ms
                                        (0305)     M8C_SetBank1                          ; continue boot at CPU Speed of SYSCLK/2
                                        (0306)     mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | OSC_CR0_SLEEP_64Hz | OSC_CR0_CPU_12MHz)
                                        (0307)     M8C_SetBank0
                                        (0308) 
                                        (0309) IF      ( WAIT_FOR_32K )
                                        (0310) ELSE ; !( WAIT_FOR_32K )
                                        (0311)     ; Option settings (PLL-Yes, ECO-No) are incompatible - force a syntax error
                                        (0312)     ERROR_PSoC Disabling WAIT_FOR_32K requires that the PLL_Lock must be enabled in user code.
                                        (0313) ENDIF ;(WAIT_FOR_32K)
                                        (0314) ENDIF ;(PLL_MODE)
                                        (0315) 
                                        (0316) 	;-------------------------------------------------------
                                        (0317)     ; Initialize Proper Drive Mode for External Clock Pin
                                        (0318)     ;-------------------------------------------------------
                                        (0319) 
                                        (0320)     ; Change EXTCLK pin from Hi-Z Analog (110b) drive mode to Hi-Z (010b) drive mode
                                        (0321) 
                                        (0322) IF (SYSCLK_SOURCE)
                                        (0323)     and reg[PRT1DM2],  ~0x10        ; Clear bit 4 of EXTCLK pin's DM2 register 
                                        (0324) ENDIF
                                        (0325)     ; EXTCLK pin is now in proper drive mode to input the external clock signal
                                        (0326) 
                                        (0327)     ;------------------------
                                        (0328)     ; Close CT leakage path.
                                        (0329)     ;------------------------
008B: 62 71 05 MOV   REG[0x71],0x5      (0330)     mov   reg[ACB00CR0], 05h
008E: 62 75 05 MOV   REG[0x75],0x5      (0331)     mov   reg[ACB01CR0], 05h
0091: 62 79 05 MOV   REG[0x79],0x5      (0332)     mov   reg[ACB02CR0], 05h
0094: 62 7D 05 MOV   REG[0x7D],0x5      (0333)     mov   reg[ACB03CR0], 05h
                                        (0334) 
                                        (0335)     ;@PSoC_BOOT_LOADCFG_UserCode_START@
                                        (0336)     ;---------------------------------------------------
                                        (0337)     ; Insert your custom code below this banner
                                        (0338)     ;---------------------------------------------------
                                        (0339) 
                                        (0340)     ;---------------------------------------------------
                                        (0341)     ; Insert your custom code above this banner
                                        (0342)     ;---------------------------------------------------
                                        (0343)     ;@PSoC_BOOT_LOADCFG_UserCode_END@ 
                                        (0344) 
                                        (0345)     ;-------------------------
                                        (0346)     ; Load Base Configuration
                                        (0347)     ;-------------------------
                                        (0348)     ; Load global parameter settings and load the user modules in the
                                        (0349)     ; base configuration. Exceptions: (1) Leave CPU Speed fast as possible
                                        (0350)     ; to minimize start up time; (2) We may still need to play with the
                                        (0351)     ; Sleep Timer.
                                        (0352)     ;
0097: 7C 02 6F LCALL 0x026F             (0353)     lcall LoadConfigInit
                                        (0354) 
                                        (0355)     ;-----------------------------------
                                        (0356)     ; Initialize C Run-Time Environment
                                        (0357)     ;-----------------------------------
                                        (0358) IF ( C_LANGUAGE_SUPPORT )
009A: 50 00    MOV   A,0x0              (0359)     mov  A,0                           ; clear the 'bss' segment to zero
009C: 55 00 09 MOV   [__r0],0x9         (0360)     mov  [__r0],<__bss_start
                                        (0361) BssLoop:
009F: 3C 00 4A CMP   [__r0],0x4A        (0362)     cmp  [__r0],<__bss_end
00A2: A0 05    JZ    0x00A8             (0363)     jz   BssDone
00A4: 3F 00    MVI   [__r0],A           (0364)     mvi  [__r0],A
00A6: 8F F8    JMP   0x009F             (0365)     jmp  BssLoop
                                        (0366) BssDone:
00A8: 50 01    MOV   A,0x1              (0367)     mov  A,>__idata_start              ; copy idata to data segment
00AA: 57 AA    MOV   X,0xAA             (0368)     mov  X,<__idata_start
00AC: 55 00 00 MOV   [__r0],0x0         (0369)     mov  [__r0],<__data_start
                                        (0370) IDataLoop:
00AF: 3C 00 00 CMP   [__r0],0x0         (0371)     cmp  [__r0],<__data_end
00B2: A0 0B    JZ    0x00BE             (0372)     jz   C_RTE_Done
00B4: 08       PUSH  A                  (0373)     push A
00B5: 28       ROMX                     (0374)     romx
00B6: 3F 00    MVI   [__r0],A           (0375)     mvi  [__r0],A
00B8: 18       POP   A                  (0376)     pop  A
00B9: 75       INC   X                  (0377)     inc  X
00BA: 09 00    ADC   A,0x0              (0378)     adc  A,0
00BC: 8F F2    JMP   0x00AF             (0379)     jmp  IDataLoop
00BE: 71 10    OR    F,0x10             
00C0: 70 EF    AND   F,0xEF             
                                        (0380) 
                                        (0381) C_RTE_Done:
                                        (0382) 
                                        (0383) ENDIF ; C_LANGUAGE_SUPPORT
                                        (0384) 
                                        (0385)     ;-------------------------------
                                        (0386)     ; Voltage Stabilization for SMP
                                        (0387)     ;-------------------------------
                                        (0388) 
                                        (0389) IF ( SUPPLY_VOLTAGE )                  ; 1 Means 5 Volts
                                        (0390) IF ( SWITCH_MODE_PUMP ^ 1 )            ; SMP is operational
                                        (0391)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0392)     ; When using the SMP at 5V, we must wait for Vdd to slew from 3.1V to
                                        (0393)     ; 5V before enabling the Precision Power-On Reset (PPOR).
                                        (0394)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0395)     or   reg[INT_MSK0],INT_MSK0_SLEEP
                                        (0396)     M8C_SetBank1
                                        (0397)     and   reg[OSC_CR0], ~OSC_CR0_SLEEP
                                        (0398)     or    reg[OSC_CR0],  OSC_CR0_SLEEP_512Hz
                                        (0399)     M8C_SetBank0
                                        (0400)     M8C_ClearWDTAndSleep                   ; Restart the sleep timer
                                        (0401)     mov   reg[INT_VC], 0                   ; Clear all pending interrupts
                                        (0402) .WaitFor2ms:
                                        (0403)     tst   reg[INT_CLR0], INT_MSK0_SLEEP    ; Test the SleepTimer Interrupt Status
                                        (0404)     jz   .WaitFor2ms                       ; Branch fails when 2 msec has passed
                                        (0405) ENDIF ; ( SWITCH_MODE_PUMP ^ 1 )
                                        (0406) ENDIF ; ( SUPPLY_VOLTAGE )
                                        (0407) 
                                        (0408)     ;-------------------------------
                                        (0409)     ; Set Power-On Reset (POR) Level
                                        (0410)     ;-------------------------------
                                        (0411)     ;  The writes to the VLT_CR register below include setting the POR to VLT_CR_POR_HIGH, 
                                        (0412)     ;  VLT_CR_POR_MID or VLT_CR_POR_LOW. Correctly setting this value is critical to the proper 
                                        (0413)     ;  operation of the PSoC. The POR protects the M8C from mis-executing when Vdd falls low. 
                                        (0414)     ;  These values should not be changed from the settings here. See Section "POR and LVD" of 
                                        (0415)     ;  Technical Reference Manual #001-14463 for more information.
                                        (0416) 
                                        (0417)     M8C_SetBank1
                                        (0418) 
                                        (0419) IF ( SUPPLY_VOLTAGE )                       ; 1 Means 5 Volts
                                        (0420)  IF ( CPU_CLOCK_JUST ^ OSC_CR0_CPU_24MHz )  ;    Also 24MHz?
                                        (0421)                                             ;       no, set 4.5V POR in user code, if desired
                                        (0422)  ELSE ; 24HMz                               ;
                                        (0423)     or    reg[VLT_CR],  VLT_CR_POR_HIGH     ;      yes, highest POR trip point required
                                        (0424)  ENDIF ; OSC_CRO_CPU_24MHz
                                        (0425) ENDIF ; 5V
                                        (0426) 
                                        (0427)     M8C_SetBank0
                                        (0428) 
                                        (0429)     ;----------------------------
                                        (0430)     ; Wrap up and invoke "main"
                                        (0431)     ;----------------------------
                                        (0432) 
                                        (0433)     ; Disable the Sleep interrupt that was used for timing above.  In fact,
                                        (0434)     ; no interrupts should be enabled now, so may as well clear the register.
                                        (0435)     ;
00C2: 62 E0 00 MOV   REG[0xE0],0x0      (0436)     mov  reg[INT_MSK0],0
00C5: 71 10    OR    F,0x10             
                                        (0437) 
                                        (0438)     ; Everything has started OK. Now select requested CPU & sleep frequency.
                                        (0439)     ;
                                        (0440)     M8C_SetBank1
00C7: 62 E0 10 MOV   REG[0xE0],0x10     (0441)     mov  reg[OSC_CR0],(SELECT_32K_JUST | PLL_MODE_JUST | SLEEP_TIMER_JUST | CPU_CLOCK_JUST)
00CA: 70 EF    AND   F,0xEF             
                                        (0442)     M8C_SetBank0
                                        (0443) 
                                        (0444)     ; Global Interrupt are NOT enabled, this should be done in main().
                                        (0445)     ; LVD is set but will not occur unless Global Interrupts are enabled.
                                        (0446)     ; Global Interrupts should be enabled as soon as possible in main().
                                        (0447)     ;
00CC: 62 E2 00 MOV   REG[0xE2],0x0      (0448)     mov  reg[INT_VC],0             ; Clear any pending interrupts which may
                                        (0449)                                    ; have been set during the boot process.
                                        (0450) IF	(TOOLCHAIN & HITECH)
                                        (0451) 	ljmp  startup                  ; Jump to C compiler startup code
                                        (0452) ELSE
                                        (0453) IF ENABLE_LJMP_TO_MAIN
                                        (0454)     ljmp  _main                    ; goto main (no return)
                                        (0455) ELSE
00CF: 7C 05 26 LCALL _main              (0456)     lcall _main                    ; call main
                                        (0457) .Exit:
00D2: 8F FF    JMP   0x00D2             (0458)     jmp  .Exit                     ; Wait here after return till power-off or reset
                                        (0459) ENDIF
                                        (0460) ENDIF ; TOOLCHAIN
                                        (0461) 
                                        (0462)     ;---------------------------------
                                        (0463)     ; Library Access to Global Parms
                                        (0464)     ;---------------------------------
                                        (0465)     ;
                                        (0466)  bGetPowerSetting:
                                        (0467) _bGetPowerSetting:
                                        (0468)     ; Synthesize the "power setting" value used by chips with SlowIMO mode.
                                        (0469)     ; Returns value of POWER_SETTING in the A register.
                                        (0470)     ; No inputs. No Side Effects.
                                        (0471)     ;
                                        (0472) IF ( SUPPLY_VOLTAGE )            ; 1 means 5.0V
00D4: 50 10    MOV   A,0x10             (0473)     mov   A, POWER_SET_5V0_24MHZ   ; Supply & Internal Main Oscillator speed
                                        (0474) ELSE        
                                        (0475)     mov   A, POWER_SET_3V3_24MHZ   ; Supply & Internal Main Oscillator speed
                                        (0476) ENDIF
00D6: 7F       RET                      (0477)     ret
                                        (0478) 
                                        (0479) IF	(TOOLCHAIN & HITECH)
                                        (0480) ELSE
                                        (0481)     ;---------------------------------
                                        (0482)     ; Order Critical RAM & ROM AREAs
                                        (0483)     ;---------------------------------
                                        (0484)     ;  'TOP' is all that has been defined so far...
                                        (0485) 
                                        (0486)     ;  ROM AREAs for C CONST, static & global items
                                        (0487)     ;
                                        (0488)     AREA lit               (ROM, REL, CON, LIT)   ; 'const' definitions
                                        (0489)     AREA idata             (ROM, REL, CON, LIT)   ; Constants for initializing RAM
                                        (0490) __idata_start:
                                        (0491) 
                                        (0492)     AREA func_lit          (ROM, REL, CON, proclab)   ; Function Pointers
                                        (0493) __func_lit_start:
                                        (0494) 
                                        (0495)     AREA psoc_config       (ROM, REL, CON)   ; Configuration Load & Unload
                                        (0496)     AREA UserModules       (ROM, REL, CON)   ; User Module APIs
                                        (0497) 
                                        (0498)     ; CODE segment for general use
                                        (0499)     ;
                                        (0500)     AREA text (ROM, REL, CON)
                                        (0501) __text_start:
                                        (0502) 
                                        (0503)     ; RAM area usage
                                        (0504)     ;
                                        (0505)     AREA data              (RAM, REL, CON)   ; initialized RAM
                                        (0506) __data_start:
                                        (0507) 
                                        (0508)     AREA virtual_registers (RAM, REL, CON)   ; Temp vars of C compiler
                                        (0509)     AREA InterruptRAM      (RAM, REL, CON)   ; Interrupts, on Page 0
                                        (0510)     AREA bss               (RAM, REL, CON)   ; general use
                                        (0511) __bss_start:
                                        (0512) 
                                        (0513) ENDIF ; TOOLCHAIN
                                        (0514) 
                                        (0515) ; end of file boot.asm
FILE: lib\psocconfigtbl.asm             (0001) ;  Generated by PSoC Designer 5.4.3191
01AA: 70 EF    AND   F,0xEF             (0002) ;
                                        (0003) ; =============================================================================
                                        (0004) ; FILENAME: PSoCConfigTBL.asm
                                        (0005) ;  
                                        (0006) ; Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0007) ;  
                                        (0008) ; NOTES:
                                        (0009) ; Do not modify this file. It is generated by PSoC Designer each time the
                                        (0010) ; generate application function is run. The values of the parameters in this
                                        (0011) ; file can be modified by changing the values of the global parameters in the
                                        (0012) ; device editor.
                                        (0013) ;  
                                        (0014) ; =============================================================================
                                        (0015)  
                                        (0016) include "m8c.inc"
                                        (0017) ;  Personalization tables 
                                        (0018) export LoadConfigTBL_jpl_receiver_Bank1
                                        (0019) export LoadConfigTBL_jpl_receiver_Bank0
                                        (0020) export LoadConfigTBL_jpl_receiver_Ordered
                                        (0021) AREA lit(rom, rel)
                                        (0022) LoadConfigTBL_jpl_receiver_Bank0:
                                        (0023) ;  Instance name LCD, User Module LCD
                                        (0024) ;  Instance name SHADOW_P0, User Module SHADOWREGS
                                        (0025) ;  Instance name SPIM, User Module SPIM
                                        (0026) ;       Instance name SPIM, Block Name SPIM(DCB02)
                                        (0027) 	db		2bh, 00h		;SPIM_CONTROL_REG  (DCB02CR0)
                                        (0028) 	db		29h, 00h		;SPIM_TX_BUFFER_REG(DCB02DR1)
                                        (0029) 	db		2ah, 00h		;SPIM_RX_BUFFER_REG(DCB02DR2)
                                        (0030) ;  Instance name SleepTimer, User Module SleepTimer
                                        (0031) ;  Global Register values Bank 0
                                        (0032) 	db		60h, 28h		; AnalogColumnInputSelect register (AMX_IN)
                                        (0033) 	db		66h, 00h		; AnalogComparatorControl1 register (CMP_CR1)
                                        (0034) 	db		63h, 05h		; AnalogReferenceControl register (ARF_CR)
                                        (0035) 	db		65h, 00h		; AnalogSyncControl register (ASY_CR)
                                        (0036) 	db		e6h, 00h		; DecimatorControl_0 register (DEC_CR0)
                                        (0037) 	db		e7h, 00h		; DecimatorControl_1 register (DEC_CR1)
                                        (0038) 	db		d6h, 00h		; I2CConfig register (I2CCFG)
                                        (0039) 	db		b0h, 01h		; Row_0_InputMux register (RDI0RI)
                                        (0040) 	db		b1h, 01h		; Row_0_InputSync register (RDI0SYN)
                                        (0041) 	db		b2h, 00h		; Row_0_LogicInputAMux register (RDI0IS)
                                        (0042) 	db		b3h, 33h		; Row_0_LogicSelect_0 register (RDI0LT0)
                                        (0043) 	db		b4h, 33h		; Row_0_LogicSelect_1 register (RDI0LT1)
                                        (0044) 	db		b5h, 20h		; Row_0_OutputDrive_0 register (RDI0SRO0)
                                        (0045) 	db		b6h, 02h		; Row_0_OutputDrive_1 register (RDI0SRO1)
                                        (0046) 	db		b8h, 55h		; Row_1_InputMux register (RDI1RI)
                                        (0047) 	db		b9h, 00h		; Row_1_InputSync register (RDI1SYN)
                                        (0048) 	db		bah, 10h		; Row_1_LogicInputAMux register (RDI1IS)
                                        (0049) 	db		bbh, 33h		; Row_1_LogicSelect_0 register (RDI1LT0)
                                        (0050) 	db		bch, 33h		; Row_1_LogicSelect_1 register (RDI1LT1)
                                        (0051) 	db		bdh, 00h		; Row_1_OutputDrive_0 register (RDI1SRO0)
                                        (0052) 	db		beh, 00h		; Row_1_OutputDrive_1 register (RDI1SRO1)
                                        (0053) 	db		ffh
                                        (0054) LoadConfigTBL_jpl_receiver_Bank1:
                                        (0055) ;  Instance name LCD, User Module LCD
                                        (0056) ;  Instance name SHADOW_P0, User Module SHADOWREGS
                                        (0057) ;  Instance name SPIM, User Module SPIM
                                        (0058) ;       Instance name SPIM, Block Name SPIM(DCB02)
                                        (0059) 	db		28h, 06h		;SPIM_FUNCTION_REG (DCB02FN)
                                        (0060) 	db		29h, c6h		;SPIM_INPUT_REG    (DCB02IN)
                                        (0061) 	db		2ah, 6eh		;SPIM_OUTPUT_REG   (DCB02OU)
                                        (0062) ;  Instance name SleepTimer, User Module SleepTimer
                                        (0063) ;  Global Register values Bank 1
                                        (0064) 	db		61h, 00h		; AnalogClockSelect1 register (CLK_CR1)
                                        (0065) 	db		69h, 00h		; AnalogClockSelect2 register (CLK_CR2)
                                        (0066) 	db		60h, 00h		; AnalogColumnClockSelect register (CLK_CR0)
                                        (0067) 	db		62h, 00h		; AnalogIOControl_0 register (ABF_CR0)
                                        (0068) 	db		67h, 33h		; AnalogLUTControl0 register (ALT_CR0)
                                        (0069) 	db		68h, 33h		; AnalogLUTControl1 register (ALT_CR1)
                                        (0070) 	db		63h, 00h		; AnalogModulatorControl_0 register (AMD_CR0)
                                        (0071) 	db		66h, 00h		; AnalogModulatorControl_1 register (AMD_CR1)
                                        (0072) 	db		d1h, 00h		; GlobalDigitalInterconnect_Drive_Even_Input register (GDI_E_IN)
                                        (0073) 	db		d3h, 00h		; GlobalDigitalInterconnect_Drive_Even_Output register (GDI_E_OU)
                                        (0074) 	db		d0h, 00h		; GlobalDigitalInterconnect_Drive_Odd_Input register (GDI_O_IN)
                                        (0075) 	db		d2h, 00h		; GlobalDigitalInterconnect_Drive_Odd_Output register (GDI_O_OU)
                                        (0076) 	db		e1h, 71h		; OscillatorControl_1 register (OSC_CR1)
                                        (0077) 	db		e2h, 00h		; OscillatorControl_2 register (OSC_CR2)
                                        (0078) 	db		dfh, ffh		; OscillatorControl_3 register (OSC_CR3)
                                        (0079) 	db		deh, 02h		; OscillatorControl_4 register (OSC_CR4)
                                        (0080) 	db		ddh, 00h		; OscillatorGlobalBusEnableControl register (OSC_GO_EN)
                                        (0081) 	db		ffh
                                        (0082) AREA psoc_config(rom, rel)
                                        (0083) LoadConfigTBL_jpl_receiver_Ordered:
                                        (0084) ;  Ordered Global Register values
                                        (0085) 	M8C_SetBank0
01AC: 62 00 00 MOV   REG[0x0],0x0       (0086) 	mov	reg[00h], 00h		; Port_0_Data register (PRT0DR)
01AF: 71 10    OR    F,0x10             
                                        (0087) 	M8C_SetBank1
01B1: 62 00 66 MOV   REG[0x0],0x66      (0088) 	mov	reg[00h], 66h		; Port_0_DriveMode_0 register (PRT0DM0)
01B4: 62 01 99 MOV   REG[0x1],0x99      (0089) 	mov	reg[01h], 99h		; Port_0_DriveMode_1 register (PRT0DM1)
01B7: 70 EF    AND   F,0xEF             
                                        (0090) 	M8C_SetBank0
01B9: 62 03 81 MOV   REG[0x3],0x81      (0091) 	mov	reg[03h], 81h		; Port_0_DriveMode_2 register (PRT0DM2)
01BC: 62 02 70 MOV   REG[0x2],0x70      (0092) 	mov	reg[02h], 70h		; Port_0_GlobalSelect register (PRT0GS)
01BF: 71 10    OR    F,0x10             
                                        (0093) 	M8C_SetBank1
01C1: 62 02 08 MOV   REG[0x2],0x8       (0094) 	mov	reg[02h], 08h		; Port_0_IntCtrl_0 register (PRT0IC0)
01C4: 62 03 00 MOV   REG[0x3],0x0       (0095) 	mov	reg[03h], 00h		; Port_0_IntCtrl_1 register (PRT0IC1)
01C7: 70 EF    AND   F,0xEF             
                                        (0096) 	M8C_SetBank0
01C9: 62 01 08 MOV   REG[0x1],0x8       (0097) 	mov	reg[01h], 08h		; Port_0_IntEn register (PRT0IE)
01CC: 62 04 00 MOV   REG[0x4],0x0       (0098) 	mov	reg[04h], 00h		; Port_1_Data register (PRT1DR)
01CF: 71 10    OR    F,0x10             
                                        (0099) 	M8C_SetBank1
01D1: 62 04 00 MOV   REG[0x4],0x0       (0100) 	mov	reg[04h], 00h		; Port_1_DriveMode_0 register (PRT1DM0)
01D4: 62 05 FF MOV   REG[0x5],0xFF      (0101) 	mov	reg[05h], ffh		; Port_1_DriveMode_1 register (PRT1DM1)
01D7: 70 EF    AND   F,0xEF             
                                        (0102) 	M8C_SetBank0
01D9: 62 07 FF MOV   REG[0x7],0xFF      (0103) 	mov	reg[07h], ffh		; Port_1_DriveMode_2 register (PRT1DM2)
01DC: 62 06 00 MOV   REG[0x6],0x0       (0104) 	mov	reg[06h], 00h		; Port_1_GlobalSelect register (PRT1GS)
01DF: 71 10    OR    F,0x10             
                                        (0105) 	M8C_SetBank1
01E1: 62 06 00 MOV   REG[0x6],0x0       (0106) 	mov	reg[06h], 00h		; Port_1_IntCtrl_0 register (PRT1IC0)
01E4: 62 07 00 MOV   REG[0x7],0x0       (0107) 	mov	reg[07h], 00h		; Port_1_IntCtrl_1 register (PRT1IC1)
01E7: 70 EF    AND   F,0xEF             
                                        (0108) 	M8C_SetBank0
01E9: 62 05 00 MOV   REG[0x5],0x0       (0109) 	mov	reg[05h], 00h		; Port_1_IntEn register (PRT1IE)
01EC: 62 08 00 MOV   REG[0x8],0x0       (0110) 	mov	reg[08h], 00h		; Port_2_Data register (PRT2DR)
01EF: 71 10    OR    F,0x10             
                                        (0111) 	M8C_SetBank1
01F1: 62 08 7F MOV   REG[0x8],0x7F      (0112) 	mov	reg[08h], 7fh		; Port_2_DriveMode_0 register (PRT2DM0)
01F4: 62 09 80 MOV   REG[0x9],0x80      (0113) 	mov	reg[09h], 80h		; Port_2_DriveMode_1 register (PRT2DM1)
01F7: 70 EF    AND   F,0xEF             
                                        (0114) 	M8C_SetBank0
01F9: 62 0B 80 MOV   REG[0xB],0x80      (0115) 	mov	reg[0bh], 80h		; Port_2_DriveMode_2 register (PRT2DM2)
01FC: 62 0A 00 MOV   REG[0xA],0x0       (0116) 	mov	reg[0ah], 00h		; Port_2_GlobalSelect register (PRT2GS)
01FF: 71 10    OR    F,0x10             
                                        (0117) 	M8C_SetBank1
0201: 62 0A 00 MOV   REG[0xA],0x0       (0118) 	mov	reg[0ah], 00h		; Port_2_IntCtrl_0 register (PRT2IC0)
0204: 62 0B 00 MOV   REG[0xB],0x0       (0119) 	mov	reg[0bh], 00h		; Port_2_IntCtrl_1 register (PRT2IC1)
0207: 70 EF    AND   F,0xEF             
                                        (0120) 	M8C_SetBank0
0209: 62 09 00 MOV   REG[0x9],0x0       (0121) 	mov	reg[09h], 00h		; Port_2_IntEn register (PRT2IE)
020C: 62 0C 00 MOV   REG[0xC],0x0       (0122) 	mov	reg[0ch], 00h		; Port_3_Data register (PRT3DR)
020F: 71 10    OR    F,0x10             
                                        (0123) 	M8C_SetBank1
0211: 62 0C 00 MOV   REG[0xC],0x0       (0124) 	mov	reg[0ch], 00h		; Port_3_DriveMode_0 register (PRT3DM0)
0214: 62 0D 00 MOV   REG[0xD],0x0       (0125) 	mov	reg[0dh], 00h		; Port_3_DriveMode_1 register (PRT3DM1)
0217: 70 EF    AND   F,0xEF             
                                        (0126) 	M8C_SetBank0
0219: 62 0F 00 MOV   REG[0xF],0x0       (0127) 	mov	reg[0fh], 00h		; Port_3_DriveMode_2 register (PRT3DM2)
021C: 62 0E 00 MOV   REG[0xE],0x0       (0128) 	mov	reg[0eh], 00h		; Port_3_GlobalSelect register (PRT3GS)
021F: 71 10    OR    F,0x10             
                                        (0129) 	M8C_SetBank1
0221: 62 0E 00 MOV   REG[0xE],0x0       (0130) 	mov	reg[0eh], 00h		; Port_3_IntCtrl_0 register (PRT3IC0)
0224: 62 0F 00 MOV   REG[0xF],0x0       (0131) 	mov	reg[0fh], 00h		; Port_3_IntCtrl_1 register (PRT3IC1)
0227: 70 EF    AND   F,0xEF             
                                        (0132) 	M8C_SetBank0
0229: 62 0D 00 MOV   REG[0xD],0x0       (0133) 	mov	reg[0dh], 00h		; Port_3_IntEn register (PRT3IE)
022C: 62 10 00 MOV   REG[0x10],0x0      (0134) 	mov	reg[10h], 00h		; Port_4_Data register (PRT4DR)
022F: 71 10    OR    F,0x10             
                                        (0135) 	M8C_SetBank1
0231: 62 10 00 MOV   REG[0x10],0x0      (0136) 	mov	reg[10h], 00h		; Port_4_DriveMode_0 register (PRT4DM0)
0234: 62 11 00 MOV   REG[0x11],0x0      (0137) 	mov	reg[11h], 00h		; Port_4_DriveMode_1 register (PRT4DM1)
0237: 70 EF    AND   F,0xEF             
                                        (0138) 	M8C_SetBank0
0239: 62 13 00 MOV   REG[0x13],0x0      (0139) 	mov	reg[13h], 00h		; Port_4_DriveMode_2 register (PRT4DM2)
023C: 62 12 00 MOV   REG[0x12],0x0      (0140) 	mov	reg[12h], 00h		; Port_4_GlobalSelect register (PRT4GS)
023F: 71 10    OR    F,0x10             
                                        (0141) 	M8C_SetBank1
0241: 62 12 00 MOV   REG[0x12],0x0      (0142) 	mov	reg[12h], 00h		; Port_4_IntCtrl_0 register (PRT4IC0)
0244: 62 13 00 MOV   REG[0x13],0x0      (0143) 	mov	reg[13h], 00h		; Port_4_IntCtrl_1 register (PRT4IC1)
0247: 70 EF    AND   F,0xEF             
                                        (0144) 	M8C_SetBank0
0249: 62 11 00 MOV   REG[0x11],0x0      (0145) 	mov	reg[11h], 00h		; Port_4_IntEn register (PRT4IE)
024C: 62 14 00 MOV   REG[0x14],0x0      (0146) 	mov	reg[14h], 00h		; Port_5_Data register (PRT5DR)
024F: 71 10    OR    F,0x10             
                                        (0147) 	M8C_SetBank1
0251: 62 14 00 MOV   REG[0x14],0x0      (0148) 	mov	reg[14h], 00h		; Port_5_DriveMode_0 register (PRT5DM0)
0254: 62 15 00 MOV   REG[0x15],0x0      (0149) 	mov	reg[15h], 00h		; Port_5_DriveMode_1 register (PRT5DM1)
0257: 70 EF    AND   F,0xEF             
                                        (0150) 	M8C_SetBank0
0259: 62 17 00 MOV   REG[0x17],0x0      (0151) 	mov	reg[17h], 00h		; Port_5_DriveMode_2 register (PRT5DM2)
025C: 62 16 00 MOV   REG[0x16],0x0      (0152) 	mov	reg[16h], 00h		; Port_5_GlobalSelect register (PRT5GS)
025F: 71 10    OR    F,0x10             
                                        (0153) 	M8C_SetBank1
0261: 62 16 00 MOV   REG[0x16],0x0      (0154) 	mov	reg[16h], 00h		; Port_5_IntCtrl_0 register (PRT5IC0)
0264: 62 17 00 MOV   REG[0x17],0x0      (0155) 	mov	reg[17h], 00h		; Port_5_IntCtrl_1 register (PRT5IC1)
0267: 70 EF    AND   F,0xEF             
                                        (0156) 	M8C_SetBank0
0269: 62 15 00 MOV   REG[0x15],0x0      (0157) 	mov	reg[15h], 00h		; Port_5_IntEn register (PRT5IE)
026C: 70 EF    AND   F,0xEF             
                                        (0158) 	M8C_SetBank0
026E: 7F       RET                      (0159) 	ret
                                        (0160) 
                                        (0161) 
                                        (0162) ; PSoC Configuration file trailer PsocConfig.asm
FILE: lib\psocconfig.asm                (0001) ;  Generated by PSoC Designer 5.4.3191
                                        (0002) ;
                                        (0003) ;==========================================================================
                                        (0004) ;  PSoCConfig.asm
                                        (0005) ;  @PSOC_VERSION
                                        (0006) ;
                                        (0007) ;  Version: 0.85
                                        (0008) ;  Revised: June 22, 2004
                                        (0009) ;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0010) ;
                                        (0011) ;  This file is generated by the Device Editor on Application Generation.
                                        (0012) ;  It contains code which loads the configuration data table generated in
                                        (0013) ;  the file PSoCConfigTBL.asm
                                        (0014) ;
                                        (0015) ;  DO NOT EDIT THIS FILE MANUALLY, AS IT IS OVERWRITTEN!!!
                                        (0016) ;  Edits to this file will not be preserved.
                                        (0017) ;==========================================================================
                                        (0018) ;
                                        (0019) include "m8c.inc"
                                        (0020) include "memory.inc"
                                        (0021) include "GlobalParams.inc"
                                        (0022) 
                                        (0023) export LoadConfigInit
                                        (0024) export _LoadConfigInit
                                        (0025) export LoadConfig_jpl_receiver
                                        (0026) export _LoadConfig_jpl_receiver
                                        (0027) export Port_0_Data_SHADE
                                        (0028) export _Port_0_Data_SHADE
                                        (0029) export Port_2_Data_SHADE
                                        (0030) export _Port_2_Data_SHADE
                                        (0031) export Port_2_DriveMode_0_SHADE
                                        (0032) export _Port_2_DriveMode_0_SHADE
                                        (0033) export Port_2_DriveMode_1_SHADE
                                        (0034) export _Port_2_DriveMode_1_SHADE
                                        (0035) 
                                        (0036) 
                                        (0037) export NO_SHADOW
                                        (0038) export _NO_SHADOW
                                        (0039) 
                                        (0040) FLAG_CFG_MASK:      equ 10h         ;M8C flag register REG address bit mask
                                        (0041) END_CONFIG_TABLE:   equ ffh         ;end of config table indicator
                                        (0042) 
                                        (0043) AREA psoc_config(rom, rel)
                                        (0044) 
                                        (0045) ;---------------------------------------------------------------------------
                                        (0046) ; LoadConfigInit - Establish the start-up configuration (except for a few
                                        (0047) ;                  parameters handled by boot code, like CPU speed). This
                                        (0048) ;                  function can be called from user code, but typically it
                                        (0049) ;                  is only called from boot.
                                        (0050) ;
                                        (0051) ;       INPUTS: None.
                                        (0052) ;      RETURNS: Nothing.
                                        (0053) ; SIDE EFFECTS: Registers are volatile: the A and X registers can be modified!
                                        (0054) ;               In the large memory model currently only the page
                                        (0055) ;               pointer registers listed below are modified.  This does
                                        (0056) ;               not guarantee that in future implementations of this
                                        (0057) ;               function other page pointer registers will not be
                                        (0058) ;               modified.
                                        (0059) ;          
                                        (0060) ;               Page Pointer Registers Modified: 
                                        (0061) ;               CUR_PP
                                        (0062) ;
                                        (0063) _LoadConfigInit:
                                        (0064)  LoadConfigInit:
                                        (0065)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0066)     
026F: 55 05 00 MOV   [0x5],0x0          (0067) 	mov		[Port_0_Data_SHADE], 0h
0272: 55 06 00 MOV   [0x6],0x0          (0068) 	mov		[Port_2_Data_SHADE], 0h
0275: 55 07 7F MOV   [0x7],0x7F         (0069) 	mov		[Port_2_DriveMode_0_SHADE], 7fh
0278: 55 08 80 MOV   [0x8],0x80         (0070) 	mov		[Port_2_DriveMode_1_SHADE], 80h
                                        (0071) 
027B: 7C 02 82 LCALL 0x0282             (0072) 	lcall	LoadConfig_jpl_receiver
027E: 7C 01 AA LCALL 0x01AA             (0073) 	lcall	LoadConfigTBL_jpl_receiver_Ordered
                                        (0074) 
                                        (0075) 
                                        (0076)     RAM_EPILOGUE RAM_USE_CLASS_4
0281: 7F       RET                      (0077)     ret
                                        (0078) 
                                        (0079) ;---------------------------------------------------------------------------
                                        (0080) ; Load Configuration jpl_receiver
                                        (0081) ;
                                        (0082) ;    Load configuration registers for jpl_receiver.
                                        (0083) ;    IO Bank 0 registers a loaded first,then those in IO Bank 1.
                                        (0084) ;
                                        (0085) ;       INPUTS: None.
                                        (0086) ;      RETURNS: Nothing.
                                        (0087) ; SIDE EFFECTS: Registers are volatile: the CPU A and X registers may be
                                        (0088) ;               modified as may the Page Pointer registers!
                                        (0089) ;               In the large memory model currently only the page
                                        (0090) ;               pointer registers listed below are modified.  This does
                                        (0091) ;               not guarantee that in future implementations of this
                                        (0092) ;               function other page pointer registers will not be
                                        (0093) ;               modified.
                                        (0094) ;          
                                        (0095) ;               Page Pointer Registers Modified: 
                                        (0096) ;               CUR_PP
                                        (0097) ;
                                        (0098) _LoadConfig_jpl_receiver:
                                        (0099)  LoadConfig_jpl_receiver:
                                        (0100)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0101) 
0282: 10       PUSH  X                  (0102) 	push	x
0283: 70 EF    AND   F,0xEF             
                                        (0103)     M8C_SetBank0                    ; Force bank 0
0285: 50 00    MOV   A,0x0              (0104)     mov     a, 0                    ; Specify bank 0
0287: 67       ASR   A                  (0105)     asr     a                       ; Store in carry flag
                                        (0106)                                     ; Load bank 0 table:
0288: 50 01    MOV   A,0x1              (0107)     mov     A, >LoadConfigTBL_jpl_receiver_Bank0
028A: 57 50    MOV   X,0x50             (0108)     mov     X, <LoadConfigTBL_jpl_receiver_Bank0
028C: 7C 02 9D LCALL 0x029D             (0109)     lcall   LoadConfig              ; Load the bank 0 values
                                        (0110) 
028F: 50 01    MOV   A,0x1              (0111)     mov     a, 1                    ; Specify bank 1
0291: 67       ASR   A                  (0112)     asr     a                       ; Store in carry flag
                                        (0113)                                     ; Load bank 1 table:
0292: 50 01    MOV   A,0x1              (0114)     mov     A, >LoadConfigTBL_jpl_receiver_Bank1
0294: 57 81    MOV   X,0x81             (0115)     mov     X, <LoadConfigTBL_jpl_receiver_Bank1
0296: 7C 02 9D LCALL 0x029D             (0116)     lcall   LoadConfig              ; Load the bank 1 values
0299: 70 EF    AND   F,0xEF             
                                        (0117) 
                                        (0118)     M8C_SetBank0                    ; Force return to bank 0
029B: 20       POP   X                  (0119) 	pop		x
                                        (0120) 
                                        (0121)     RAM_EPILOGUE RAM_USE_CLASS_4
029C: 7F       RET                      (0122)     ret
                                        (0123) 
                                        (0124) 
                                        (0125) 
                                        (0126) 
                                        (0127) ;---------------------------------------------------------------------------
                                        (0128) ; LoadConfig - Set IO registers as specified in ROM table of (address,value)
                                        (0129) ;              pairs. Terminate on address=0xFF.
                                        (0130) ;
                                        (0131) ;  INPUTS:  [A,X] points to the table to be loaded
                                        (0132) ;           Flag Register Carry bit encodes the Register Bank
                                        (0133) ;           (Carry=0 => Bank 0; Carry=1 => Bank 1)
                                        (0134) ;
                                        (0135) ;  RETURNS: nothing.
                                        (0136) ;
                                        (0137) ;  STACK FRAME:  X-4 I/O Bank 0/1 indicator
                                        (0138) ;                X-3 Temporary store for register address
                                        (0139) ;                X-2 LSB of config table address
                                        (0140) ;                X-1 MSB of config table address
                                        (0141) ;
                                        (0142) LoadConfig:
                                        (0143)     RAM_PROLOGUE RAM_USE_CLASS_2
029D: 38 02    ADD   SP,0x2             (0144)     add     SP, 2                   ; Set up local vars
029F: 10       PUSH  X                  (0145)     push    X                       ; Save config table address on stack
02A0: 08       PUSH  A                  (0146)     push    A
02A1: 4F       MOV   X,SP               (0147)     mov     X, SP
02A2: 56 FC 00 MOV   [X-4],0x0          (0148)     mov     [X-4], 0                ; Set default Destination to Bank 0
02A5: D0 04    JNC   0x02AA             (0149)     jnc     .BankSelectSaved        ; Carry says Bank 0 is OK
02A7: 56 FC 01 MOV   [X-4],0x1          (0150)     mov     [X-4], 1                ; No Carry: default to Bank 1
                                        (0151) .BankSelectSaved:
02AA: 18       POP   A                  (0152)     pop     A
02AB: 20       POP   X                  (0153)     pop     X
02AC: 70 EF    AND   F,0xEF             
02AE: 62 E3 00 MOV   REG[0xE3],0x0      
                                        (0154) 
                                        (0155) LoadConfigLp:
                                        (0156)     M8C_SetBank0                    ; Switch to bank 0
                                        (0157)     M8C_ClearWDT                    ; Clear the watchdog for long inits
02B1: 10       PUSH  X                  (0158)     push    X                       ; Preserve the config table address
02B2: 08       PUSH  A                  (0159)     push    A
02B3: 28       ROMX                     (0160)     romx                            ; Load register address from table
02B4: 39 FF    CMP   A,0xFF             (0161)     cmp     A, END_CONFIG_TABLE     ; End of table?
02B6: A0 1F    JZ    0x02D6             (0162)     jz      EndLoadConfig           ;   Yes, go wrap it up
02B8: 4F       MOV   X,SP               (0163)     mov     X, SP                   ;
02B9: 48 FC 01 TST   [X-4],0x1          (0164)     tst     [X-4], 1                ; Loading IO Bank 1?
02BC: A0 03    JZ    0x02C0             (0165)     jz      .IOBankNowSet           ;    No, Bank 0 is fine
02BE: 71 10    OR    F,0x10             
                                        (0166)     M8C_SetBank1                    ;   Yes, switch to Bank 1
                                        (0167) .IOBankNowSet:
02C0: 54 FD    MOV   [X-3],A            (0168)     mov     [X-3], A                ; Stash the register address
02C2: 18       POP   A                  (0169)     pop     A                       ; Retrieve the table address
02C3: 20       POP   X                  (0170)     pop     X
02C4: 75       INC   X                  (0171)     inc     X                       ; Advance to the data byte
02C5: 09 00    ADC   A,0x0              (0172)     adc     A, 0
02C7: 10       PUSH  X                  (0173)     push    X                       ; Save the config table address again
02C8: 08       PUSH  A                  (0174)     push    A
02C9: 28       ROMX                     (0175)     romx                            ; load config data from the table
02CA: 4F       MOV   X,SP               (0176)     mov     X, SP                   ; retrieve the register address
02CB: 59 FD    MOV   X,[X-3]            (0177)     mov     X, [X-3]
02CD: 61 00    MOV   REG[X+0x0],A       (0178)     mov     reg[X], A               ; Configure the register
02CF: 18       POP   A                  (0179)     pop     A                       ; retrieve the table address
02D0: 20       POP   X                  (0180)     pop     X
02D1: 75       INC   X                  (0181)     inc     X                       ; advance to next table entry
02D2: 09 00    ADC   A,0x0              (0182)     adc     A, 0
02D4: 8F D7    JMP   0x02AC             (0183)     jmp     LoadConfigLp            ; loop to configure another register
                                        (0184) EndLoadConfig:
02D6: 38 FC    ADD   SP,0xFC            (0185)     add     SP, -4
                                        (0186)     RAM_EPILOGUE RAM_USE_CLASS_2
02D8: 7F       RET                      (0187)     ret
                                        (0188) 
                                        (0189) AREA InterruptRAM(ram, rel)
                                        (0190) 
                                        (0191) NO_SHADOW:
                                        (0192) _NO_SHADOW:
                                        (0193) ; write only register shadows
                                        (0194) _Port_0_Data_SHADE:
                                        (0195) Port_0_Data_SHADE:	BLK	1
                                        (0196) _Port_2_Data_SHADE:
                                        (0197) Port_2_Data_SHADE:	BLK	1
                                        (0198) _Port_2_DriveMode_0_SHADE:
                                        (0199) Port_2_DriveMode_0_SHADE:	BLK	1
                                        (0200) _Port_2_DriveMode_1_SHADE:
                                        (0201) Port_2_DriveMode_1_SHADE:	BLK	1
                                        (0202) 
FILE: lib\spimint.asm                   (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: SPIMINT.asm
                                        (0004) ;;   Version: 2.6, Updated on 2015/3/4 at 22:27:42
                                        (0005) ;;  Generated by PSoC Designer 5.4.3191
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION:
                                        (0008) ;;    Interrupt handler routine for SPIM user module instance: SPIM.
                                        (0009) ;;-----------------------------------------------------------------------------
                                        (0010) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0011) ;;*****************************************************************************
                                        (0012) ;;*****************************************************************************
                                        (0013) 
                                        (0014) include "m8c.inc"
                                        (0015) include "memory.inc"
                                        (0016) include "SPIM.inc"
                                        (0017) 
                                        (0018) 
                                        (0019) ;-----------------------------------------------
                                        (0020) ;  Global Symbols
                                        (0021) ;-----------------------------------------------
                                        (0022) export  _SPIM_ISR
                                        (0023) 
                                        (0024) 
                                        (0025) AREA InterruptRAM (RAM,REL,CON)
                                        (0026) 
                                        (0027) ;@PSoC_UserCode_INIT@ (Do not change this line.)
                                        (0028) ;---------------------------------------------------
                                        (0029) ; Insert your custom declarations below this banner
                                        (0030) ;---------------------------------------------------
                                        (0031) 
                                        (0032) ;------------------------
                                        (0033) ; Includes
                                        (0034) ;------------------------
                                        (0035) 
                                        (0036) 	
                                        (0037) ;------------------------
                                        (0038) ;  Constant Definitions
                                        (0039) ;------------------------
                                        (0040) 
                                        (0041) 
                                        (0042) ;------------------------
                                        (0043) ; Variable Allocation
                                        (0044) ;------------------------
                                        (0045) 
                                        (0046) 
                                        (0047) ;---------------------------------------------------
                                        (0048) ; Insert your custom declarations above this banner
                                        (0049) ;---------------------------------------------------
                                        (0050) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0051) 
                                        (0052) 
                                        (0053) AREA UserModules (ROM, REL)
                                        (0054) 
                                        (0055) ;-----------------------------------------------------------------------------
                                        (0056) ;  FUNCTION NAME: _SPIM_ISR
                                        (0057) ;
                                        (0058) ;  DESCRIPTION: Unless modified, this implements only a null handler stub.
                                        (0059) ;
                                        (0060) ;-----------------------------------------------------------------------------
                                        (0061) ;
                                        (0062) 
                                        (0063) _SPIM_ISR:
                                        (0064) 
                                        (0065)    ;@PSoC_UserCode_BODY@ (Do not change this line.)
                                        (0066)    ;---------------------------------------------------
                                        (0067)    ; Insert your custom assembly code below this banner
                                        (0068)    ;---------------------------------------------------
                                        (0069)    ;   NOTE: interrupt service routines must preserve
                                        (0070)    ;   the values of the A and X CPU registers.
                                        (0071)    
                                        (0072)    ;---------------------------------------------------
                                        (0073)    ; Insert your custom assembly code above this banner
                                        (0074)    ;---------------------------------------------------
                                        (0075)    
                                        (0076)    ;---------------------------------------------------
                                        (0077)    ; Insert a lcall to a C function below this banner
                                        (0078)    ; and un-comment the lines between these banners
                                        (0079)    ;---------------------------------------------------
                                        (0080)    
                                        (0081)    ;PRESERVE_CPU_CONTEXT
                                        (0082)    ;lcall _My_C_Function
                                        (0083)    ;RESTORE_CPU_CONTEXT
                                        (0084)    
                                        (0085)    ;---------------------------------------------------
                                        (0086)    ; Insert a lcall to a C function above this banner
                                        (0087)    ; and un-comment the lines between these banners
                                        (0088)    ;---------------------------------------------------
                                        (0089)    ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0090) 
02D9: 7E       RETI                     (0091)    reti
                                        (0092) 
                                        (0093) 
                                        (0094) ; end of file SPIMINT.asm
FILE: lib\spim.asm                      (0001) ;;*****************************************************************************
02DA: 43 E1 04 OR    REG[0xE1],0x4      (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: SPIM.asm
                                        (0004) ;;   Version: 2.6, Updated on 2015/3/4 at 22:27:42
                                        (0005) ;;  Generated by PSoC Designer 5.4.3191
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: SPIM User Module software implementation file.
                                        (0008) ;;
                                        (0009) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0010) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0011) ;;        This means it is the caller's responsibility to preserve any values
                                        (0012) ;;        in the X and A registers that are still needed after the API functions
                                        (0013) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0014) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0015) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0016) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0017) ;;-----------------------------------------------------------------------------
                                        (0018) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0019) ;;*****************************************************************************
                                        (0020) ;;*****************************************************************************
                                        (0021) 
                                        (0022) include "m8c.inc"
                                        (0023) include "memory.inc"
                                        (0024) include "SPIM.inc"
                                        (0025) 
                                        (0026) ;-----------------------------------------------
                                        (0027) ;  Global Symbols
                                        (0028) ;-----------------------------------------------
                                        (0029) export   SPIM_EnableInt
                                        (0030) export  _SPIM_EnableInt
                                        (0031) export   SPIM_DisableInt
                                        (0032) export  _SPIM_DisableInt
                                        (0033) export   SPIM_Start
                                        (0034) export  _SPIM_Start
                                        (0035) export   SPIM_Stop
                                        (0036) export  _SPIM_Stop
                                        (0037) export   SPIM_SendTxData
                                        (0038) export  _SPIM_SendTxData
                                        (0039) export   SPIM_bReadRxData
                                        (0040) export  _SPIM_bReadRxData
                                        (0041) export   SPIM_bReadStatus
                                        (0042) export  _SPIM_bReadStatus
                                        (0043) 
                                        (0044) // These globals will be removed in a future release
                                        (0045) // Do not use
                                        (0046) export   bSPIM_ReadRxData
                                        (0047) export  _bSPIM_ReadRxData
                                        (0048) export   bSPIM_ReadStatus
                                        (0049) export  _bSPIM_ReadStatus
                                        (0050) 
                                        (0051) ;-----------------------------------------------
                                        (0052) ;  Constant Definitions
                                        (0053) ;-----------------------------------------------
                                        (0054) bfCONTROL_REG_START_BIT:   equ   1     ; Control register start bit
                                        (0055) 
                                        (0056) 
                                        (0057) area UserModules (ROM, REL)
                                        (0058) 
                                        (0059) .SECTION
                                        (0060) ;-----------------------------------------------------------------------------
                                        (0061) ;  FUNCTION NAME: SPIM_EnableInt
                                        (0062) ;
                                        (0063) ;  DESCRIPTION:
                                        (0064) ;     Enables the SPIM interrupt by setting the interrupt enable mask
                                        (0065) ;     bit associated with this User Module.
                                        (0066) ;
                                        (0067) ;     NOTE:  Remember to enable the global interrupt by calling the
                                        (0068) ;           M8C global macro: M8C_EnableGInt
                                        (0069) ;
                                        (0070) ;-----------------------------------------------------------------------------
                                        (0071) ;
                                        (0072) ;  ARGUMENTS:  none
                                        (0073) ;
                                        (0074) ;  RETURNS:  none
                                        (0075) ;
                                        (0076) ;  SIDE EFFECTS: 
                                        (0077) ;    The A and X registers may be modified by this or future implementations
                                        (0078) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0079) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0080) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0081) ;    functions.
                                        (0082) ;
                                        (0083) ;  THEORY of OPERATION or PROCEDURE:
                                        (0084) ;     Sets the specific user module interrupt enable mask bit.
                                        (0085) ;
                                        (0086)  SPIM_EnableInt:
                                        (0087) _SPIM_EnableInt:
                                        (0088)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0089)    M8C_EnableIntMask SPIM_INT_REG, SPIM_bINT_MASK
                                        (0090)    RAM_EPILOGUE RAM_USE_CLASS_1
02DD: 7F       RET                      (0091)    ret
02DE: 41 E1 FB AND   REG[0xE1],0xFB     
                                        (0092) 
                                        (0093) .ENDSECTION
                                        (0094) 
                                        (0095) .SECTION
                                        (0096) ;-----------------------------------------------------------------------------
                                        (0097) ;  FUNCTION NAME: SPIM_DisableInt
                                        (0098) ;
                                        (0099) ;  DESCRIPTION:
                                        (0100) ;     Disables this SPIM's interrupt by clearing the interrupt enable mask bit
                                        (0101) ;     associated with this User Module.
                                        (0102) ;
                                        (0103) ;-----------------------------------------------------------------------------
                                        (0104) ;
                                        (0105) ;  ARGUMENTS:  none
                                        (0106) ;
                                        (0107) ;  RETURNS:  none
                                        (0108) ;
                                        (0109) ;  SIDE EFFECTS: 
                                        (0110) ;    The A and X registers may be modified by this or future implementations
                                        (0111) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0112) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0113) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0114) ;    functions.
                                        (0115) ;
                                        (0116) ;  THEORY of OPERATION or PROCEDURE:
                                        (0117) ;     Clears the specific user module interrupt enable mask bit.
                                        (0118) ;
                                        (0119)  SPIM_DisableInt:
                                        (0120) _SPIM_DisableInt:
                                        (0121)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0122)    M8C_DisableIntMask SPIM_INT_REG, SPIM_bINT_MASK
                                        (0123)    RAM_EPILOGUE RAM_USE_CLASS_1
02E1: 7F       RET                      (0124)    ret
                                        (0125) 
                                        (0126) .ENDSECTION
                                        (0127) 
                                        (0128) .SECTION
                                        (0129) ;-----------------------------------------------------------------------------
                                        (0130) ;  FUNCTION NAME: SPIM_Start
                                        (0131) ;
                                        (0132) ;  DESCRIPTION:
                                        (0133) ;     Sets the start bit, SPI mode, and LSB/MSB first configuration of the SPIM
                                        (0134) ;     user module.
                                        (0135) ;
                                        (0136) ;     Transmission will begin transmitting when a byte is written into the TX buffer
                                        (0137) ;     using the SPIM_SendTxData function.
                                        (0138) ;
                                        (0139) ;-----------------------------------------------------------------------------
                                        (0140) ;
                                        (0141) ;  ARGUMENTS:
                                        (0142) ;     BYTE bConfiguration - Consists of SPI Mode and LSB/MSB first bit.
                                        (0143) ;           Use defined masks - masks can be OR'd together.
                                        (0144) ;     PASSED in Accumulator.
                                        (0145) ;
                                        (0146) ;  RETURNS:  none
                                        (0147) ;
                                        (0148) ;  SIDE EFFECTS: 
                                        (0149) ;    The A and X registers may be modified by this or future implementations
                                        (0150) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0151) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0152) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0153) ;    functions.
                                        (0154) ;
                                        (0155) ;  THEORY of OPERATION or PROCEDURE:
                                        (0156) ;     1) Set all Slave Select outputs high
                                        (0157) ;     2) Set the specified SPI configuration bits in the Control register.
                                        (0158) ;
                                        (0159)  SPIM_Start:
                                        (0160) _SPIM_Start:
                                        (0161)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0162)    ; setup the SPIM configuration setting
02E2: 29 01    OR    A,0x1              (0163)    or    A, bfCONTROL_REG_START_BIT
02E4: 60 2B    MOV   REG[0x2B],A        (0164)    mov   REG[SPIM_CONTROL_REG], A
                                        (0165)    RAM_EPILOGUE RAM_USE_CLASS_1
02E6: 7F       RET                      (0166)    ret
                                        (0167) 
                                        (0168) .ENDSECTION
                                        (0169) 
                                        (0170) .SECTION
                                        (0171) ;-----------------------------------------------------------------------------
                                        (0172) ;  FUNCTION NAME: SPIM_Stop
                                        (0173) ;
                                        (0174) ;  DESCRIPTION:
                                        (0175) ;     Disables SPIM operation.
                                        (0176) ;
                                        (0177) ;-----------------------------------------------------------------------------
                                        (0178) ;
                                        (0179) ;  ARGUMENTS:  none
                                        (0180) ;
                                        (0181) ;  RETURNS:  none
                                        (0182) ;
                                        (0183) ;  SIDE EFFECTS: 
                                        (0184) ;    The A and X registers may be modified by this or future implementations
                                        (0185) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0186) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0187) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0188) ;    functions.
                                        (0189) ;
                                        (0190) ;  THEORY of OPERATION or PROCEDURE:
                                        (0191) ;     Clear the start bit in the Control register.
                                        (0192) ;
                                        (0193)  SPIM_Stop:
                                        (0194) _SPIM_Stop:
                                        (0195)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0196)    ; clear the SPIM stop bits
02E7: 41 2B FE AND   REG[0x2B],0xFE     (0197)    and   REG[SPIM_CONTROL_REG], ~bfCONTROL_REG_START_BIT
                                        (0198)    RAM_EPILOGUE RAM_USE_CLASS_1
02EA: 7F       RET                      (0199)    ret
                                        (0200) 
                                        (0201) .ENDSECTION
                                        (0202) 
                                        (0203) .SECTION
                                        (0204) ;-----------------------------------------------------------------------------
                                        (0205) ;  FUNCTION NAME: SPIM_SendTxData
                                        (0206) ;
                                        (0207) ;  DESCRIPTION:
                                        (0208) ;     Initiates an SPI data transfer.
                                        (0209) ;
                                        (0210) ;-----------------------------------------------------------------------------
                                        (0211) ;
                                        (0212) ;  ARGUMENTS:
                                        (0213) ;     BYTE  bTxData - data to transmit.
                                        (0214) ;        Passed in Accumulator.
                                        (0215) ;
                                        (0216) ;  RETURNS:  none
                                        (0217) ;
                                        (0218) ;  SIDE EFFECTS: 
                                        (0219) ;    The A and X registers may be modified by this or future implementations
                                        (0220) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0221) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0222) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0223) ;    functions.
                                        (0224) ;
                                        (0225) ;  THEORY of OPERATION or PROCEDURE:
                                        (0226) ;     Writes data to the TX buffer register.
                                        (0227) ;
                                        (0228)  SPIM_SendTxData:
                                        (0229) _SPIM_SendTxData:
                                        (0230)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0231)    ; Transmit the data!
02EB: 60 29    MOV   REG[0x29],A        (0232)    mov REG[SPIM_TX_BUFFER_REG], A
                                        (0233)    RAM_EPILOGUE RAM_USE_CLASS_1
02ED: 7F       RET                      (0234)    ret
                                        (0235) 
                                        (0236) .ENDSECTION
                                        (0237) 
                                        (0238) .SECTION
                                        (0239) ;-----------------------------------------------------------------------------
                                        (0240) ;  FUNCTION NAME: SPIM_bReadRxData
                                        (0241) ;
                                        (0242) ;  DESCRIPTION:
                                        (0243) ;     Reads the RX buffer register.  Should check the status regiser to make
                                        (0244) ;     sure data is valid.
                                        (0245) ;
                                        (0246) ;-----------------------------------------------------------------------------
                                        (0247) ;
                                        (0248) ;  ARGUMENTS:  none
                                        (0249) ;
                                        (0250) ;  RETURNS:
                                        (0251) ;     bRxData - returned in A.
                                        (0252) ;
                                        (0253) ;  SIDE EFFECTS: 
                                        (0254) ;    The A and X registers may be modified by this or future implementations
                                        (0255) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0256) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0257) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0258) ;    functions.
                                        (0259) ;
                                        (0260) ;  THEORY of OPERATION or PROCEDURE:
                                        (0261) ;
                                        (0262)  SPIM_bReadRxData:
                                        (0263) _SPIM_bReadRxData:
                                        (0264)  bSPIM_ReadRxData:
                                        (0265) _bSPIM_ReadRxData:
                                        (0266)    RAM_PROLOGUE RAM_USE_CLASS_1
02EE: 5D 2A    MOV   A,REG[0x2A]        (0267)    mov A, REG[SPIM_RX_BUFFER_REG]
                                        (0268)    RAM_EPILOGUE RAM_USE_CLASS_1   
02F0: 7F       RET                      (0269)    ret
                                        (0270) 
                                        (0271) 
                                        (0272) .ENDSECTION
                                        (0273) 
                                        (0274) .SECTION
                                        (0275) ;-----------------------------------------------------------------------------
                                        (0276) ;  FUNCTION NAME: SPIM_ReadStatus
                                        (0277) ;
                                        (0278) ;  DESCRIPTION:
                                        (0279) ;     Reads the SPIM Status bits in the Control/Status register.
                                        (0280) ;
                                        (0281) ;-----------------------------------------------------------------------------
                                        (0282) ;
                                        (0283) ;  ARGUMENTS:  none
                                        (0284) ;
                                        (0285) ;  RETURNS:
                                        (0286) ;     BYTE  bStatus - transmit status data.  Use the defined bit masks.
                                        (0287) ;        Returned in Accumulator.
                                        (0288) ;
                                        (0289) ;  SIDE EFFECTS: 
                                        (0290) ;    The A and X registers may be modified by this or future implementations
                                        (0291) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0292) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0293) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0294) ;    functions.
                                        (0295) ;
                                        (0296) ;  THEORY of OPERATION or PROCEDURE:
                                        (0297) ;     Read the status and control register.
                                        (0298) ;
                                        (0299)  SPIM_bReadStatus:
                                        (0300) _SPIM_bReadStatus:
                                        (0301)  bSPIM_ReadStatus:
                                        (0302) _bSPIM_ReadStatus:
                                        (0303)    RAM_PROLOGUE RAM_USE_CLASS_1
02F1: 5D 2B    MOV   A,REG[0x2B]        (0304)    mov A,  REG[SPIM_CONTROL_REG]
                                        (0305)    RAM_EPILOGUE RAM_USE_CLASS_1   
02F3: 7F       RET                      (0306)    ret
                                        (0307) 
                                        (0308) .ENDSECTION
                                        (0309) 
                                        (0310) ; End of File SPIM.asm
FILE: lib\sleeptimerint.asm             (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME:   SleepTimerINT.asm
                                        (0004) ;;  Version: 1.0, Updated on 2015/3/4 at 22:26:59
                                        (0005) ;;  Generated by PSoC Designer 5.4.3191
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION:  SleepTimer Interrupt Service Routine.
                                        (0008) ;;-----------------------------------------------------------------------------
                                        (0009) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0010) ;;*****************************************************************************
                                        (0011) ;;*****************************************************************************
                                        (0012) 
                                        (0013) include "SleepTimer.inc"
                                        (0014) include "memory.inc"
                                        (0015) include "m8c.inc"
                                        (0016) 
                                        (0017) ;-----------------------------------------------
                                        (0018) ;  Global Symbols
                                        (0019) ;-----------------------------------------------
                                        (0020) export  _SleepTimer_ISR
                                        (0021) 
                                        (0022) 
                                        (0023) export  SleepTimer_fTick
                                        (0024) export _SleepTimer_fTick
                                        (0025) export  SleepTimer_bTimerValue
                                        (0026) export _SleepTimer_bTimerValue
                                        (0027) export  SleepTimer_bCountDown
                                        (0028) export _SleepTimer_bCountDown
                                        (0029) export  SleepTimer_TickCount
                                        (0030) export _SleepTimer_TickCount
                                        (0031) 
                                        (0032) ;-----------------------------------------------
                                        (0033) ; Variable Allocation
                                        (0034) ;-----------------------------------------------
                                        (0035) AREA InterruptRAM (RAM, REL, CON)
                                        (0036) 
                                        (0037)  SleepTimer_fTick:
                                        (0038) _SleepTimer_fTick:        BLK  1
                                        (0039) 
                                        (0040)  SleepTimer_bTimerValue:
                                        (0041) _SleepTimer_bTimerValue:  BLK  1
                                        (0042) 
                                        (0043)  SleepTimer_bCountDown:
                                        (0044) _SleepTimer_bCountDown:   BLK  1
                                        (0045) 
                                        (0046)  SleepTimer_TickCount:
                                        (0047) _SleepTimer_TickCount:    BLK  SleepTimer_TICK_CNTR_SIZE
                                        (0048) 
                                        (0049) 
                                        (0050) 
                                        (0051) ;@PSoC_UserCode_INIT@ (Do not change this line.)
                                        (0052) ;---------------------------------------------------
                                        (0053) ; Insert your custom declarations below this banner
                                        (0054) ;---------------------------------------------------
                                        (0055) 
                                        (0056) ;------------------------
                                        (0057) ;  Includes
                                        (0058) ;------------------------
                                        (0059) 
                                        (0060) 
                                        (0061) ;------------------------
                                        (0062) ;  Constant Definitions
                                        (0063) ;------------------------
                                        (0064) 
                                        (0065) 
                                        (0066) ;------------------------
                                        (0067) ; Variable Allocation
                                        (0068) ;------------------------
                                        (0069) 
                                        (0070) 
                                        (0071) ;---------------------------------------------------
                                        (0072) ; Insert your custom declarations above this banner
                                        (0073) ;---------------------------------------------------
                                        (0074) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0075) 
                                        (0076) 
                                        (0077) AREA UserModules (ROM, REL, CON)
                                        (0078) 
                                        (0079) ;-----------------------------------------------------------------------------
                                        (0080) ;  FUNCTION NAME: _SleepTimer_ISR
                                        (0081) ;
                                        (0082) ;  DESCRIPTION:
                                        (0083) ;      interrupt handler for instance SleepTimer.
                                        (0084) ;
                                        (0085) ;     This is a place holder function.  If the user requires use of an interrupt
                                        (0086) ;     handler for this function, then place code where specified.
                                        (0087) ;-----------------------------------------------------------------------------
                                        (0088) 
                                        (0089) _SleepTimer_ISR:
                                        (0090) 
02F4: 2E 01 01 OR    [0x1],0x1          (0091)    or   [SleepTimer_fTick],0x01           ; Set tick flag
                                        (0092)  
                                        (0093)                                                 ; Decrement CountDown (Sync counter)
02F7: 47 03 FF TST   [0x3],0xFF         (0094)    tst  [SleepTimer_bCountDown],0xFF
02FA: A0 03    JZ    0x02FE             (0095)    jz   .DoTimer
02FC: 7A 03    DEC   [0x3]              (0096)    dec  [SleepTimer_bCountDown]
                                        (0097) 
                                        (0098) .DoTimer:                                       ; Decrement TimerValue, if required
02FE: 47 02 FF TST   [0x2],0xFF         (0099)    tst  [SleepTimer_bTimerValue],0xFF
0301: A0 03    JZ    0x0305             (0100)    jz   .IncBigCounter
0303: 7A 02    DEC   [0x2]              (0101)    dec  [SleepTimer_bTimerValue]
                                        (0102) 
                                        (0103) .IncBigCounter:                                 ; Increment big tick counter
                                        (0104) IF (SleepTimer_TICK_CNTR_SIZE & 0x04)
                                        (0105)    inc  [SleepTimer_TickCount+3]
                                        (0106)    jnc  SleepTimer_SLEEP_ISR_END
                                        (0107) 
                                        (0108)    inc  [SleepTimer_TickCount+2]
                                        (0109)    jnc  SleepTimer_SLEEP_ISR_END
                                        (0110) ENDIF
                                        (0111) 
                                        (0112) IF (SleepTimer_TICK_CNTR_SIZE & (0x04|0x02))
                                        (0113)    inc  [SleepTimer_TickCount+1]
                                        (0114)    jnc  SleepTimer_SLEEP_ISR_END
                                        (0115) ENDIF
                                        (0116) 
0305: 76 04    INC   [0x4]              (0117)    inc  [SleepTimer_TickCount+0]
                                        (0118) 
                                        (0119) SleepTimer_SLEEP_ISR_END:
                                        (0120) 
                                        (0121)    ;@PSoC_UserCode_BODY_1@ (Do not change this line.)
                                        (0122)    ;---------------------------------------------------
                                        (0123)    ; Insert your custom assembly code below this banner
                                        (0124)    ;---------------------------------------------------
                                        (0125)    ;   NOTE: interrupt service routines must preserve
                                        (0126)    ;   the values of the A and X CPU registers.
                                        (0127)    
                                        (0128)    ;---------------------------------------------------
                                        (0129)    ; Insert your custom assembly code above this banner
                                        (0130)    ;---------------------------------------------------
                                        (0131)    
                                        (0132)    ;---------------------------------------------------
                                        (0133)    ; Insert a lcall to a C function below this banner
                                        (0134)    ; and un-comment the lines between these banners
                                        (0135)    ;---------------------------------------------------
                                        (0136)    
                                        (0137)    ;PRESERVE_CPU_CONTEXT
                                        (0138)    ;lcall _My_C_Function
                                        (0139)    ;RESTORE_CPU_CONTEXT
                                        (0140)    
                                        (0141)    ;---------------------------------------------------
                                        (0142)    ; Insert a lcall to a C function above this banner
                                        (0143)    ; and un-comment the lines between these banners
                                        (0144)    ;---------------------------------------------------
                                        (0145)    ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0146) 
0307: 7E       RETI                     (0147)    reti
                                        (0148) 
                                        (0149) ; end of file SleepTimerINT.asm
                                        (0150) 
FILE: lib\sleeptimer.asm                (0001) ;;*****************************************************************************
0308: 43 E0 40 OR    REG[0xE0],0x40     (0002) ;;*****************************************************************************
                                        (0003) ;;  Filename:   SleepTimer.asm
                                        (0004) ;;  Version: 1.0, Updated on 2015/3/4 at 22:26:59
                                        (0005) ;;  Generated by PSoC Designer 5.4.3191
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION:  SleepTimer User Module software implementation file for the
                                        (0008) ;;                22/24/27/29xxx families.
                                        (0009) ;;
                                        (0010) ;;
                                        (0011) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0012) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0013) ;;        This means it is the caller's responsibility to preserve any values
                                        (0014) ;;        in the X and A registers that are still needed after the API functions
                                        (0015) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0016) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0017) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0018) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0019) ;;-----------------------------------------------------------------------------
                                        (0020) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0021) ;;*****************************************************************************
                                        (0022) ;;*****************************************************************************
                                        (0023) 
                                        (0024) 
                                        (0025) include "m8c.inc"
                                        (0026) include "memory.inc"
                                        (0027) include "SleepTimer.inc"
                                        (0028) 
                                        (0029) ;-----------------------------------------------
                                        (0030) ;  Global Symbols
                                        (0031) ;-----------------------------------------------
                                        (0032) ;-------------------------------------------------------------------
                                        (0033) ;  Declare the functions global for both assembler and C compiler.
                                        (0034) ;
                                        (0035) ;  Note that there are two names for each API. First name is
                                        (0036) ;  assembler reference. Name with underscore is name reference for
                                        (0037) ;  C compiler.  Calling function in C source code does not require
                                        (0038) ;  the underscore.
                                        (0039) ;-------------------------------------------------------------------
                                        (0040) export  SleepTimer_EnableInt
                                        (0041) export _SleepTimer_EnableInt
                                        (0042) export  SleepTimer_DisableInt
                                        (0043) export _SleepTimer_DisableInt
                                        (0044) 
                                        (0045) export  SleepTimer_Start
                                        (0046) export _SleepTimer_Start
                                        (0047) export  SleepTimer_Stop
                                        (0048) export _SleepTimer_Stop
                                        (0049) 
                                        (0050) export  SleepTimer_TickWait
                                        (0051) export _SleepTimer_TickWait
                                        (0052) 
                                        (0053) export  SleepTimer_SyncWait
                                        (0054) export _SleepTimer_SyncWait
                                        (0055) 
                                        (0056) export  SleepTimer_SetInterval
                                        (0057) export _SleepTimer_SetInterval
                                        (0058) 	
                                        (0059) export  SleepTimer_bGetTickCntr
                                        (0060) export _SleepTimer_bGetTickCntr
                                        (0061) 
                                        (0062) export  SleepTimer_SetTimer
                                        (0063) export _SleepTimer_SetTimer
                                        (0064) 
                                        (0065) export  SleepTimer_bGetTimer
                                        (0066) export _SleepTimer_bGetTimer
                                        (0067) 
                                        (0068) IF(SleepTimer_TICK_CNTR_SIZE & (4|2))
                                        (0069) export  SleepTimer_iGetTickCntr
                                        (0070) export _SleepTimer_iGetTickCntr
                                        (0071) ENDIF
                                        (0072) 
                                        (0073) IF(SleepTimer_TICK_CNTR_SIZE & 4)
                                        (0074) export  SleepTimer_lGetTickCntr
                                        (0075) export _SleepTimer_lGetTickCntr
                                        (0076) ENDIF
                                        (0077) 
                                        (0078) 
                                        (0079) area text (ROM,REL)
                                        (0080) 
                                        (0081) ;-----------------------------------------------
                                        (0082) ;  EQUATES
                                        (0083) ;-----------------------------------------------
                                        (0084) 
                                        (0085) ; Counter LSB Offset if 4 byte tick counter
                                        (0086) IF(SleepTimer_TICK_CNTR_SIZE & 4)
                                        (0087) ST_LSB_OFFSET:   equ  3
                                        (0088) ENDIF
                                        (0089) 
                                        (0090) ; Counter LSB Offset if 2 byte tick counter
                                        (0091) IF(SleepTimer_TICK_CNTR_SIZE & 2)
                                        (0092) ST_LSB_OFFSET:   equ  1
                                        (0093) ENDIF
                                        (0094) 
                                        (0095) ; Counter LSB Offset if 1 byte tick counter
                                        (0096) IF(SleepTimer_TICK_CNTR_SIZE & 1)
                                        (0097) ST_LSB_OFFSET:   equ  0
                                        (0098) ENDIF
                                        (0099) 
                                        (0100) 
                                        (0101) area UserModules (ROM, REL, CON)
                                        (0102) 
                                        (0103) ;=============================================================================
                                        (0104) ;=============================================================================
                                        (0105) ;
                                        (0106) ;     Low-Level Commands
                                        (0107) ;
                                        (0108) ;=============================================================================
                                        (0109) ;=============================================================================
                                        (0110) 
                                        (0111) .SECTION
                                        (0112) ;-----------------------------------------------------------------------------
                                        (0113) ;  FUNCTION NAME: SleepTimer_EnableInt
                                        (0114) ;
                                        (0115) ;  DESCRIPTION:
                                        (0116) ;     Enables SleepTimer interrupts.
                                        (0117) ;-----------------------------------------------------------------------------
                                        (0118) ;
                                        (0119) ;  ARGUMENTS:
                                        (0120) ;     none.
                                        (0121) ;
                                        (0122) ;  RETURNS:
                                        (0123) ;     none.
                                        (0124) ;
                                        (0125) ;  SIDE EFFECTS:
                                        (0126) ;     REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0127) ;
                                        (0128) ;  THEORY of OPERATION OR PROCEDURE:
                                        (0129) ;
                                        (0130)  SleepTimer_EnableInt:
                                        (0131) _SleepTimer_EnableInt:
                                        (0132)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0133)    M8C_EnableIntMask SleepTimer_INT_REG, SleepTimer_INT_MASK
                                        (0134)    RAM_EPILOGUE RAM_USE_CLASS_1
030B: 7F       RET                      (0135)    ret
030C: 41 E0 BF AND   REG[0xE0],0xBF     
                                        (0136) .ENDSECTION
                                        (0137) 
                                        (0138)     
                                        (0139) .SECTION
                                        (0140) ;-----------------------------------------------------------------------------
                                        (0141) ;  FUNCTION NAME: SleepTimer_DisableInt
                                        (0142) ;
                                        (0143) ;  DESCRIPTION:
                                        (0144) ;     Disables the sleep timer. 
                                        (0145) ;
                                        (0146) ;-----------------------------------------------------------------------------
                                        (0147) ;
                                        (0148) ;  ARGUMENTS:
                                        (0149) ;     none.
                                        (0150) ;
                                        (0151) ;  RETURNS:
                                        (0152) ;     none.
                                        (0153) ;
                                        (0154) ;  SIDE EFFECTS:
                                        (0155) ;     REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0156) ;
                                        (0157) ;  THEORY of OPERATION OR PROCEDURE:
                                        (0158) ;
                                        (0159)  SleepTimer_DisableInt:
                                        (0160) _SleepTimer_DisableInt:
                                        (0161)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0162)    M8C_DisableIntMask SleepTimer_INT_REG, SleepTimer_INT_MASK
                                        (0163)    RAM_EPILOGUE RAM_USE_CLASS_1
030F: 7F       RET                      (0164)    ret
                                        (0165) .ENDSECTION
                                        (0166) 
                                        (0167) 
                                        (0168) .SECTION
                                        (0169) ;-----------------------------------------------------------------------------
                                        (0170) ;  FUNCTION NAME: SleepTimer_Start()
                                        (0171) ;
                                        (0172) ;  DESCRIPTION:
                                        (0173) ;     Clears all the variables.  
                                        (0174) ;-----------------------------------------------------------------------------
                                        (0175) ;
                                        (0176) ;  ARGUMENTS:
                                        (0177) ;      none
                                        (0178) ;
                                        (0179) ;  RETURNS:
                                        (0180) ;     none.
                                        (0181) ;
                                        (0182) ;  SIDE EFFECTS;    
                                        (0183) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0184) ;    IN THE LARGE MEMORY MODEL CURRENTLY ONLY THE PAGE POINTER 
                                        (0185) ;    REGISTERS LISTED BELOW ARE MODIFIED.  THIS DOES NOT GUARANTEE 
                                        (0186) ;    THAT IN FUTURE IMPLEMENTATIONS OF THIS FUNCTION OTHER PAGE POINTER 
                                        (0187) ;    REGISTERS WILL NOT BE MODIFIED.
                                        (0188) ;          
                                        (0189) ;    Page Pointer Registers Modified: 
                                        (0190) ;          CUR_PP
                                        (0191) ;
                                        (0192) ;  THEORY of OPERATION OR PROCEDURE:
                                        (0193) ;
                                        (0194)  SleepTimer_Start:
                                        (0195) _SleepTimer_Start:
                                        (0196)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0197)    RAM_SETPAGE_CUR >SleepTimer_fTick      
0310: 50 00    MOV   A,0x0              (0198)    mov  A,0
0312: 53 01    MOV   [0x1],A            (0199)    mov  [SleepTimer_fTick],A
0314: 53 02    MOV   [0x2],A            (0200)    mov  [SleepTimer_bTimerValue],A
0316: 53 03    MOV   [0x3],A            (0201)    mov  [SleepTimer_bCountDown],A
0318: 53 04    MOV   [0x4],A            (0202)    mov  [SleepTimer_TickCount + ST_LSB_OFFSET],A        ; Clear TickCount[0:7]
                                        (0203) IF(SleepTimer_TICK_CNTR_SIZE & (4|2))
                                        (0204)    mov  [SleepTimer_TickCount + ST_LSB_OFFSET - 1],A    ; Clear TickCount[8:15]
                                        (0205) ENDIF
                                        (0206) 
                                        (0207) 
                                        (0208) IF(SleepTimer_TICK_CNTR_SIZE & 4)
                                        (0209)    mov   [SleepTimer_TickCount + ST_LSB_OFFSET - 2],A    ; Clear TickCount[16:31]
                                        (0210)    mov   [SleepTimer_TickCount + ST_LSB_OFFSET - 3],A    
                                        (0211) ENDIF
                                        (0212) 
                                        (0213) 
                                        (0214)    RAM_EPILOGUE RAM_USE_CLASS_4
031A: 7F       RET                      (0215)    ret
                                        (0216) .ENDSECTION
                                        (0217) 
                                        (0218) 
                                        (0219) .SECTION
                                        (0220) ;-----------------------------------------------------------------------------
                                        (0221) ;  FUNCTION NAME: SleepTimer_Stop
                                        (0222) ;
                                        (0223) ;  DESCRIPTION:
                                        (0224) ;   This function does nothing at this time.  It is only here as a place 
                                        (0225) ;   holder.
                                        (0226) ;-----------------------------------------------------------------------------
                                        (0227) ;
                                        (0228) ;  ARGUMENTS:
                                        (0229) ;     none.
                                        (0230) ;
                                        (0231) ;  RETURNS:
                                        (0232) ;     none.
                                        (0233) ;
                                        (0234) ;  SIDE EFFECTS:
                                        (0235) ;     REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0236) ;
                                        (0237) ;  THEORY of OPERATION OR PROCEDURE:
                                        (0238) ;
                                        (0239)  SleepTimer_Stop:
                                        (0240) _SleepTimer_Stop:
                                        (0241)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0242)    RAM_EPILOGUE RAM_USE_CLASS_1
031B: 7F       RET                      (0243)    ret
                                        (0244) .ENDSECTION
                                        (0245) 
                                        (0246) .SECTION
                                        (0247) ;-----------------------------------------------------------------------------
                                        (0248) ;  FUNCTION NAME: SleepTimer_SetInterval
                                        (0249) ;
                                        (0250) ;  DESCRIPTION:
                                        (0251) ;     Sets sleep timer interval
                                        (0252) ;
                                        (0253) ;-----------------------------------------------------------------------------
                                        (0254) ;
                                        (0255) ;  ARGUMENTS:
                                        (0256) ;     A <= Timer setting
                                        (0257) ;
                                        (0258) ;  RETURNS:
                                        (0259) ;     none.
                                        (0260) ;
                                        (0261) ;  SIDE EFFECTS:
                                        (0262) ;     REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0263) ;
                                        (0264) ;  THEORY of OPERATION OR PROCEDURE:
                                        (0265) ;
                                        (0266)  SleepTimer_SetInterval:
                                        (0267) _SleepTimer_SetInterval:
                                        (0268)    RAM_PROLOGUE RAM_USE_CLASS_2
031C: 21 18    AND   A,0x18             (0269)    and  A,SleepTimer_CLOCK_MASK               ; Mask off invalid data
031E: 4F       MOV   X,SP               (0270)    mov  X, SP
031F: 08       PUSH  A                  (0271)    push A
0320: 71 10    OR    F,0x10             
                                        (0272)    M8C_SetBank1
0322: 5D E0    MOV   A,REG[0xE0]        (0273)    mov  A, reg[OSC_CR0]                  ; Get current timer value
0324: 21 E7    AND   A,0xE7             (0274)    and  A,~SleepTimer_CLOCK_MASK   ; Zero out old timer value
0326: 2B 00    OR    A,[X+0]            (0275)    or   A, [X]                           ; Set new timer values
0328: 60 E0    MOV   REG[0xE0],A        (0276)    mov  reg[OSC_CR0],A                   ; Write it
032A: 70 EF    AND   F,0xEF             
                                        (0277)    M8C_SetBank0
032C: 18       POP   A                  (0278)    pop  A
                                        (0279)    RAM_EPILOGUE RAM_USE_CLASS_2
032D: 7F       RET                      (0280)    ret
                                        (0281) .ENDSECTION
                                        (0282) 
                                        (0283) 
                                        (0284) .SECTION
                                        (0285) ;-----------------------------------------------------------------------------
                                        (0286) ;  FUNCTION NAME: SleepTimer_TickWait(BYTE bTicks)
                                        (0287) ;
                                        (0288) ;  DESCRIPTION:
                                        (0289) ;     Wait X Ticks and return
                                        (0290) ;
                                        (0291) ;-----------------------------------------------------------------------------
                                        (0292) ;
                                        (0293) ;  ARGUMENTS:
                                        (0294) ;     A <= Count down time
                                        (0295) ;
                                        (0296) ;  RETURNS:
                                        (0297) ;     none.
                                        (0298) ;
                                        (0299) ;  SIDE EFFECTS;    
                                        (0300) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0301) ;    IN THE LARGE MEMORY MODEL CURRENTLY ONLY THE PAGE POINTER 
                                        (0302) ;    REGISTERS LISTED BELOW ARE MODIFIED.  THIS DOES NOT GUARANTEE 
                                        (0303) ;    THAT IN FUTURE IMPLEMENTATIONS OF THIS FUNCTION OTHER PAGE POINTER 
                                        (0304) ;    REGISTERS WILL NOT BE MODIFIED.
                                        (0305) ;          
                                        (0306) ;    Page Pointer Registers Modified: 
                                        (0307) ;          CUR_PP
                                        (0308) ;
                                        (0309) ;  THEORY of OPERATION OR PROCEDURE:
                                        (0310) ;
                                        (0311)  SleepTimer_TickWait:
                                        (0312) _SleepTimer_TickWait:
                                        (0313)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0314)    RAM_SETPAGE_CUR >SleepTimer_fTick      
032E: 55 01 00 MOV   [0x1],0x0          (0315)    mov   [SleepTimer_fTick],0x00          ; Clear tick flag
                                        (0316) 
                                        (0317) .WaitTick:
0331: 47 01 FF TST   [0x1],0xFF         (0318)    tst   [SleepTimer_fTick],0xFF          ; Check for tick 
0334: AF FC    JZ    0x0331             (0319)    jz    .WaitTick
0336: 55 01 00 MOV   [0x1],0x0          (0320)    mov   [SleepTimer_fTick],0x00          ; Clear tick flag
0339: 78       DEC   A                  (0321)    dec   A                                      ; Dec the timer variable
033A: BF F6    JNZ   0x0331             (0322)    jnz   .WaitTick                              ; Loop until we count down to zero
                                        (0323) 
                                        (0324)    RAM_EPILOGUE RAM_USE_CLASS_4
033C: 7F       RET                      (0325)    ret
                                        (0326) .ENDSECTION
                                        (0327) 
                                        (0328) 
                                        (0329) .SECTION
                                        (0330) ;-----------------------------------------------------------------------------
                                        (0331) ;  FUNCTION NAME: SleepTimer_SyncWait(BYTE bCounts, BYTE fMode)
                                        (0332) ;
                                        (0333) ;  DESCRIPTION:
                                        (0334) ;     This function resets the SyncWait timer.  If fMode = 0, the timer
                                        (0335) ;     is set to the new value then exits the function immediatly.  If fMode
                                        (0336) ;     is set to 1, the firmware waits for the timer to expire before the
                                        (0337) ;     timer is reset and and exits.
                                        (0338) ;
                                        (0339) ;-----------------------------------------------------------------------------
                                        (0340) ;
                                        (0341) ;  ARGUMENTS:
                                        (0342) ;     A <= tCounts to wait
                                        (0343) ;     X <= fMode    fMode = 0  Just reload the value, do not wait
                                        (0344) ;                   fMode = 1  Wait for last value to count down to zero
                                        (0345) ;                              then reload.
                                        (0346) ;
                                        (0347) ;  RETURNS:
                                        (0348) ;     none.
                                        (0349) ;
                                        (0350) ;  SIDE EFFECTS;    
                                        (0351) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0352) ;    IN THE LARGE MEMORY MODEL CURRENTLY ONLY THE PAGE POINTER 
                                        (0353) ;    REGISTERS LISTED BELOW ARE MODIFIED.  THIS DOES NOT GUARANTEE 
                                        (0354) ;    THAT IN FUTURE IMPLEMENTATIONS OF THIS FUNCTION OTHER PAGE POINTER 
                                        (0355) ;    REGISTERS WILL NOT BE MODIFIED.
                                        (0356) ;          
                                        (0357) ;    Page Pointer Registers Modified: 
                                        (0358) ;          CUR_PP
                                        (0359) ;
                                        (0360) ;  THEORY of OPERATION OR PROCEDURE:
                                        (0361) ;
                                        (0362)  SleepTimer_SyncWait:
                                        (0363) _SleepTimer_SyncWait:
                                        (0364)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0365)    RAM_SETPAGE_CUR >SleepTimer_bCountDown
033D: 4B       SWAP  A,X                (0366)    swap  A,X
033E: 21 01    AND   A,0x1              (0367)    AND   A,SleepTimer_FORCE_RELOAD
0340: B0 06    JNZ   0x0347             (0368)    jnz   .ReloadIt
                                        (0369) 
                                        (0370) .WaitLoop:
0342: 47 03 FF TST   [0x3],0xFF         (0371)    tst   [SleepTimer_bCountDown],0xFF
0345: BF FC    JNZ   0x0342             (0372)    jnz   .WaitLoop
                                        (0373) 
                                        (0374) 
                                        (0375) .ReloadIt:
0347: 4B       SWAP  A,X                (0376)    swap  A,X
0348: 53 03    MOV   [0x3],A            (0377)    mov   [SleepTimer_bCountDown],A 
                                        (0378) 
                                        (0379)    RAM_EPILOGUE RAM_USE_CLASS_4
034A: 7F       RET                      (0380)    ret
                                        (0381) .ENDSECTION
                                        (0382) 
                                        (0383) 
                                        (0384) 
                                        (0385) .SECTION
                                        (0386) ;-----------------------------------------------------------------------------
                                        (0387) ;  FUNCTION NAME: SleepTimer_bGetTickCntr
                                        (0388) ;
                                        (0389) ;  DESCRIPTION:
                                        (0390) ;     Returns the LSB of the tick Counter
                                        (0391) ;
                                        (0392) ;-----------------------------------------------------------------------------
                                        (0393) ;
                                        (0394) ;  ARGUMENTS:
                                        (0395) ;     none
                                        (0396) ;
                                        (0397) ;  RETURNS:
                                        (0398) ;     LSB of lTickCount
                                        (0399) ;
                                        (0400) ;  SIDE EFFECTS;    
                                        (0401) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0402) ;    IN THE LARGE MEMORY MODEL CURRENTLY ONLY THE PAGE POINTER 
                                        (0403) ;    REGISTERS LISTED BELOW ARE MODIFIED.  THIS DOES NOT GUARANTEE 
                                        (0404) ;    THAT IN FUTURE IMPLEMENTATIONS OF THIS FUNCTION OTHER PAGE POINTER 
                                        (0405) ;    REGISTERS WILL NOT BE MODIFIED.
                                        (0406) ;          
                                        (0407) ;    Page Pointer Registers Modified: 
                                        (0408) ;          CUR_PP
                                        (0409) ;
                                        (0410) ;  THEORY of OPERATION OR PROCEDURE:
                                        (0411) ;
                                        (0412)  SleepTimer_bGetTickCntr:
                                        (0413) _SleepTimer_bGetTickCntr:
                                        (0414)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0415)    RAM_SETPAGE_CUR >SleepTimer_TickCount
034B: 51 04    MOV   A,[0x4]            (0416)    mov   A,[SleepTimer_TickCount + ST_LSB_OFFSET]
                                        (0417)    RAM_EPILOGUE RAM_USE_CLASS_4
034D: 7F       RET                      (0418)    ret
                                        (0419) .ENDSECTION
                                        (0420) 
                                        (0421) .SECTION
                                        (0422) ;-----------------------------------------------------------------------------
                                        (0423) ;  FUNCTION NAME: SleepTimer_SetTimer
                                        (0424) ;
                                        (0425) ;  DESCRIPTION:
                                        (0426) ;     Set timer with parameter in A
                                        (0427) ;
                                        (0428) ;-----------------------------------------------------------------------------
                                        (0429) ;
                                        (0430) ;  ARGUMENTS:
                                        (0431) ;     A => Value used to set Timer value
                                        (0432) ;
                                        (0433) ;  RETURNS:
                                        (0434) ;     None
                                        (0435) ;
                                        (0436) ;  SIDE EFFECTS;    
                                        (0437) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0438) ;    IN THE LARGE MEMORY MODEL CURRENTLY ONLY THE PAGE POINTER 
                                        (0439) ;    REGISTERS LISTED BELOW ARE MODIFIED.  THIS DOES NOT GUARANTEE 
                                        (0440) ;    THAT IN FUTURE IMPLEMENTATIONS OF THIS FUNCTION OTHER PAGE POINTER 
                                        (0441) ;    REGISTERS WILL NOT BE MODIFIED.
                                        (0442) ;          
                                        (0443) ;    Page Pointer Registers Modified: 
                                        (0444) ;          CUR_PP
                                        (0445) ;
                                        (0446) ;  THEORY of OPERATION OR PROCEDURE:
                                        (0447) ;
                                        (0448)  SleepTimer_SetTimer:
                                        (0449) _SleepTimer_SetTimer:
                                        (0450)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0451)    RAM_SETPAGE_CUR >SleepTimer_TickCount
034E: 53 02    MOV   [0x2],A            (0452)    mov   [SleepTimer_bTimerValue],A
                                        (0453)    RAM_EPILOGUE RAM_USE_CLASS_4
0350: 7F       RET                      (0454)    ret
                                        (0455) .ENDSECTION
                                        (0456) 
                                        (0457) .SECTION
                                        (0458) ;-----------------------------------------------------------------------------
                                        (0459) ;  FUNCTION NAME: SleepTimer_bGetTimer
                                        (0460) ;
                                        (0461) ;  DESCRIPTION:
                                        (0462) ;     Returns timer value in A
                                        (0463) ;
                                        (0464) ;-----------------------------------------------------------------------------
                                        (0465) ;
                                        (0466) ;  ARGUMENTS:
                                        (0467) ;     None
                                        (0468) ;
                                        (0469) ;  RETURNS:
                                        (0470) ;     Return timer value in A
                                        (0471) ;
                                        (0472) ;  SIDE EFFECTS;    
                                        (0473) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0474) ;    IN THE LARGE MEMORY MODEL CURRENTLY ONLY THE PAGE POINTER 
                                        (0475) ;    REGISTERS LISTED BELOW ARE MODIFIED.  THIS DOES NOT GUARANTEE 
                                        (0476) ;    THAT IN FUTURE IMPLEMENTATIONS OF THIS FUNCTION OTHER PAGE POINTER 
                                        (0477) ;    REGISTERS WILL NOT BE MODIFIED.
                                        (0478) ;          
                                        (0479) ;    Page Pointer Registers Modified: 
                                        (0480) ;          CUR_PP
                                        (0481) ;
                                        (0482) ;  THEORY of OPERATION OR PROCEDURE:
                                        (0483) ;
                                        (0484)  SleepTimer_bGetTimer:
                                        (0485) _SleepTimer_bGetTimer:
                                        (0486)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0487)    RAM_SETPAGE_CUR >SleepTimer_TickCount
0351: 51 02    MOV   A,[0x2]            (0488)    mov   A,[SleepTimer_bTimerValue]
                                        (0489)    RAM_EPILOGUE RAM_USE_CLASS_4
0353: 7F       RET                      (0490)    ret
                                        (0491) .ENDSECTION
                                        (0492) 
                                        (0493) IF(SleepTimer_TICK_CNTR_SIZE & (4|2))
                                        (0494) .SECTION
                                        (0495) ;-----------------------------------------------------------------------------
                                        (0496) ;  FUNCTION NAME: SleepTimer_iGetTickCntr
                                        (0497) ;
                                        (0498) ;  DESCRIPTION:
                                        (0499) ;     Returns the least significant 16 bits.
                                        (0500) ;
                                        (0501) ;-----------------------------------------------------------------------------
                                        (0502) ;
                                        (0503) ;  ARGUMENTS:
                                        (0504) ;     none
                                        (0505) ;
                                        (0506) ;  RETURNS:
                                        (0507) ;     (int)TickCount in A and X  
                                        (0508) ;     X  <= MSB
                                        (0509) ;     A  <= LSB
                                        (0510) ;
                                        (0511) ;  SIDE EFFECTS;    
                                        (0512) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0513) ;    IN THE LARGE MEMORY MODEL CURRENTLY ONLY THE PAGE POINTER 
                                        (0514) ;    REGISTERS LISTED BELOW ARE MODIFIED.  THIS DOES NOT GUARANTEE 
                                        (0515) ;    THAT IN FUTURE IMPLEMENTATIONS OF THIS FUNCTION OTHER PAGE POINTER 
                                        (0516) ;    REGISTERS WILL NOT BE MODIFIED.
                                        (0517) ;          
                                        (0518) ;    Page Pointer Registers Modified: 
                                        (0519) ;          CUR_PP
                                        (0520) ;
                                        (0521) ;  THEORY of OPERATION OR PROCEDURE:
                                        (0522) ;
                                        (0523)  SleepTimer_iGetTickCntr:
                                        (0524) _SleepTimer_iGetTickCntr:
                                        (0525)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0526)    RAM_SETPAGE_CUR >SleepTimer_TickCount
                                        (0527)    ; Disable interrupt here
                                        (0528)    M8C_DisableIntMask SleepTimer_INT_REG, SleepTimer_INT_MASK
                                        (0529)    mov   A,[SleepTimer_TickCount + ST_LSB_OFFSET]    ; Place LSB in A
                                        (0530)    mov   X,[SleepTimer_TickCount + ST_LSB_OFFSET - 1]    ; Place MSB in X
                                        (0531)    M8C_EnableIntMask SleepTimer_INT_REG, SleepTimer_INT_MASK
                                        (0532)    RAM_EPILOGUE RAM_USE_CLASS_4
                                        (0533)    ret
                                        (0534) .ENDSECTION
                                        (0535) ENDIF
                                        (0536) 
                                        (0537) IF(SleepTimer_TICK_CNTR_SIZE & 4)
                                        (0538) .SECTION
                                        (0539) ;-----------------------------------------------------------------------------
                                        (0540) ;  FUNCTION NAME: SleepTimer_lGetTickCntr
                                        (0541) ;
                                        (0542) ;  DESCRIPTION:
                                        (0543) ;     Returns a pointer to TickCount
                                        (0544) ;
                                        (0545) ;-----------------------------------------------------------------------------
                                        (0546) ;
                                        (0547) ;  ARGUMENTS:
                                        (0548) ;     [A:X] => Pointer to 32 bit tick counter (X=LSB, A=MSB)
                                        (0549) ;
                                        (0550) ;  RETURNS:
                                        (0551) ;     Pointer to lTickCount
                                        (0552) ;
                                        (0553) ;  SIDE EFFECTS;    
                                        (0554) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0555) ;    IN THE LARGE MEMORY MODEL CURRENTLY ONLY THE PAGE POINTER 
                                        (0556) ;    REGISTERS LISTED BELOW ARE MODIFIED.  THIS DOES NOT GUARANTEE 
                                        (0557) ;    THAT IN FUTURE IMPLEMENTATIONS OF THIS FUNCTION OTHER PAGE POINTER 
                                        (0558) ;    REGISTERS WILL NOT BE MODIFIED.
                                        (0559) ;          
                                        (0560) ;    Page Pointer Registers Modified: 
                                        (0561) ;          CUR_PP
                                        (0562) ;
                                        (0563) ;  THEORY of OPERATION OR PROCEDURE:
                                        (0564) ;
                                        (0565)  SleepTimer_lGetTickCntr:
                                        (0566) _SleepTimer_lGetTickCntr:
                                        (0567)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0568)    RAM_PROLOGUE RAM_USE_CLASS_3
                                        (0569)    ; Disable interrupt here
                                        (0570)    M8C_DisableIntMask SleepTimer_INT_REG, SleepTimer_INT_MASK
                                        (0571)    RAM_SETPAGE_CUR >SleepTimer_TickCount
                                        (0572)    RAM_SETPAGE_IDX A
                                        (0573)    push  A
                                        (0574)    mov   A,[SleepTimer_TickCount + 0]
                                        (0575)    mov   [X + 0],A
                                        (0576)    mov   A,[SleepTimer_TickCount + 1]
                                        (0577)    mov   [X + 1],A
                                        (0578)    mov   A,[SleepTimer_TickCount + 2]
                                        (0579)    mov   [X + 2],A
                                        (0580)    mov   A,[SleepTimer_TickCount + 3]
                                        (0581)    mov   [X + 3],A
                                        (0582)    pop   A
                                        (0583)    
                                        (0584)    M8C_EnableIntMask SleepTimer_INT_REG, SleepTimer_INT_MASK
                                        (0585)    RAM_EPILOGUE RAM_USE_CLASS_4
                                        (0586)    RAM_EPILOGUE RAM_USE_CLASS_3
                                        (0587)    ret
                                        (0588) .ENDSECTION
                                        (0589) ENDIF
                                        (0590) 
                                        (0591) 
                                        (0592) 
                                        (0593) 
                                        (0594) ; End of File SleepTimer.asm
FILE: lib\lcd.asm                       (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME:   LCD.asm
                                        (0004) ;;  Version: 1.60, Updated on 2015/3/4 at 22:26:36
                                        (0005) ;;  Generated by PSoC Designer 5.4.3191
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: LCD User Module software implementation file.
                                        (0008) ;;
                                        (0009) ;; This set of functions is written for the common 2 and 4 line
                                        (0010) ;; LCDs that use the Hitachi HD44780A controller.
                                        (0011) ;;
                                        (0012) ;;  LCD connections to PSoC port
                                        (0013) ;;
                                        (0014) ;;    PX.0 ==> LCD D4
                                        (0015) ;;    PX.1 ==> LCD D5
                                        (0016) ;;    PX.2 ==> LCD D6
                                        (0017) ;;    PX.3 ==> LCD D7
                                        (0018) ;;    PX.4 ==> LCD E
                                        (0019) ;;    PX.5 ==> LCD RS
                                        (0020) ;;    PX.6 ==> LCD R/W
                                        (0021) ;;
                                        (0022) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0023) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0024) ;;        This means it is the caller's responsibility to preserve any values
                                        (0025) ;;        in the X and A registers that are still needed after the API functions
                                        (0026) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0027) ;;        responsibility to preserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0028) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0029) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0030) ;;-----------------------------------------------------------------------------
                                        (0031) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0032) ;;*****************************************************************************
                                        (0033) ;;*****************************************************************************
                                        (0034) 
                                        (0035) include "m8c.inc"
                                        (0036) include "memory.inc"
                                        (0037) include "LCD.inc"
                                        (0038) 
                                        (0039) ;-----------------------------------------------
                                        (0040) ;  Global Symbols
                                        (0041) ;-----------------------------------------------
                                        (0042) 
                                        (0043) export   LCD_Start
                                        (0044) export  _LCD_Start
                                        (0045) export   LCD_Init
                                        (0046) export  _LCD_Init
                                        (0047) 
                                        (0048) export   LCD_WriteData
                                        (0049) export  _LCD_WriteData
                                        (0050) 
                                        (0051) export   LCD_Control
                                        (0052) export  _LCD_Control
                                        (0053) 
                                        (0054) export  LCD_PrString
                                        (0055) export _LCD_PrString
                                        (0056) 
                                        (0057) export  LCD_PrCString
                                        (0058) export _LCD_PrCString
                                        (0059) 
                                        (0060) export  LCD_Position
                                        (0061) export _LCD_Position
                                        (0062) 
                                        (0063) export  LCD_PrHexByte
                                        (0064) export _LCD_PrHexByte
                                        (0065) 
                                        (0066) export  LCD_PrHexInt
                                        (0067) export _LCD_PrHexInt
                                        (0068) 
                                        (0069) export  LCD_Delay50uTimes
                                        (0070) export _LCD_Delay50uTimes
                                        (0071) 
                                        (0072) export  LCD_Delay50u
                                        (0073) export _LCD_Delay50u
                                        (0074) 
                                        (0075) ;-----------------------------------------------
                                        (0076) ; If bargraph functions not required, don't
                                        (0077) ; export the function names.
                                        (0078) ;-----------------------------------------------
                                        (0079) 
                                        (0080) IF (LCD_BARGRAPH_ENABLE)
                                        (0081) export  LCD_InitBG
                                        (0082) export _LCD_InitBG
                                        (0083) 
                                        (0084) export  LCD_InitVBG
                                        (0085) export _LCD_InitVBG
                                        (0086) 
                                        (0087) ; NOTE: The two functions,
                                        (0088) ;
                                        (0089) ;    LCD_DrawVBG and
                                        (0090) ;    LCD_DrawBG
                                        (0091) ;
                                        (0092) ; are implemented using both fastcall16 and legacy fastcall16 because they
                                        (0093) ; fall into a special and rare case where the calling sequences specified
                                        (0094) ; by the two disciplines are incompatible. The fastcall16 versions are
                                        (0095) ; provided for both C and Assembly users in all memory models. The legacy
                                        (0096) ; fastcall16 versions are provided only to support existing small memory
                                        (0097) ; model assembly language code---they do not work in the large memory
                                        (0098) ; model.
                                        (0099) ;
                                        (0100) ; ** The legacy fastcall16 versions are provided on a temporary basis to
                                        (0101) ; ** ease the transition to the 4.2 release of PSoC Designer. Their use is
                                        (0102) ; ** deprecated and their status is "No Further Maintenance".
                                        (0103) ;
                                        (0104) ; The fastcall16 versions of these functions are distinguished by a
                                        (0105) ; leading underscore in the name. The legacy fastcall16 names (which appear
                                        (0106) ; in this comment) do not have the leading underscore. Details on the
                                        (0107) ; calling sequence to be used for fastcall16 are given in the user module
                                        (0108) ; datasheet.
                                        (0109) ;
                                        (0110) ; Fastcall16 versions:
                                        (0111) export _LCD_DrawVBG
                                        (0112) export _LCD_DrawBG
                                        (0113) 
                                        (0114) IF SYSTEM_SMALL_MEMORY_MODEL
                                        (0115) ; Legacy Fastcall versions:
                                        (0116) export  LCD_DrawVBG
                                        (0117) export  LCD_DrawBG
                                        (0118) ENDIF  ; SYSTEM_SMALL_MEMORY_MODEL
                                        (0119) 
                                        (0120) ENDIF  ; BARGRAPH_ENABLE
                                        (0121) 
                                        (0122) ;
                                        (0123) ; The following functions are deprecated and will be eliminated in a future
                                        (0124) ; version of PSoC Designer.
                                        (0125) ;
                                        (0126) export   LCD_Write_Data
                                        (0127) export  _LCD_Write_Data
                                        (0128) 
                                        (0129) 
                                        (0130) ;-----------------------------------------------
                                        (0131) ;  EQUATES
                                        (0132) ;-----------------------------------------------
                                        (0133) 
                                        (0134) LCD_Port:           equ    PRT2DR
                                        (0135) LCD_PortMode0:      equ    PRT2DM0
                                        (0136) LCD_PortMode1:      equ    PRT2DM1
                                        (0137) 
                                        (0138) LCD_E:              equ    10h
                                        (0139) LCD_RW:             equ    40h
                                        (0140) LCD_RS:             equ    20h
                                        (0141) 
                                        (0142) LCD_DATA_MASK:      equ    0Fh
                                        (0143) LCD_READY_BIT:      equ    08h
                                        (0144) 
                                        (0145) LCD_DATA_READ:      equ    ( LCD_E | LCD_RW | LCD_RS )
                                        (0146) LCD_CNTL_READ:      equ    ( LCD_E | LCD_RW )
                                        (0147) LCD_PORT_WRITE:     equ    7Fh
                                        (0148) LCD_PORT_MASK:      equ    7Fh
                                        (0149) 
                                        (0150) LCD_DISP_INC:       equ    03h
                                        (0151) LCD_DISP_OFF:       equ    08h
                                        (0152) LCD_DISP_ON:        equ    0Ch
                                        (0153) LCD_4BIT_2LINE:     equ    2Ch
                                        (0154) 
                                        (0155) 
                                        (0156) ;-----------------------------------------------
                                        (0157) ;      Bargraph definitions
                                        (0158) ;-----------------------------------------------
                                        (0159) 
                                        (0160) LCD_BG_CHAR_WIDTH:  equ    16     ; 16 characters in width
                                        (0161) LCD_BG_SEG_WIDTH:   equ    80     ; 16 * 5 = 80
                                        (0162) LCD_BG_COL_START:   equ     0     ; Always start in the left most column
                                        (0163) 
                                        (0164)                                   ; Offsets for 2x16, 2x20, 4x20
                                        (0165)                                   ; Change these values for a custom LCD
                                        (0166) 
                                        (0167) LCD_ROW1_OFFSET:    equ    80h    ; Address/command offset for row 1
                                        (0168) LCD_ROW2_OFFSET:    equ    C0h    ; Address/command offset for row 2
                                        (0169) LCD_ROW3_OFFSET:    equ    94h    ; Address/command offset for row 1
                                        (0170) LCD_ROW4_OFFSET:    equ    D4h    ; Address/command offset for row 2
                                        (0171) 
                                        (0172) LCD_BG_ROW1_OFFSET: equ    80h    ; Address/command offset for row 1
                                        (0173) LCD_BG_ROW2_OFFSET: equ    C0h    ; Address/command offset for row 2
                                        (0174) 
                                        (0175) LCD_CG_RAM_OFFSET:  equ    40h    ; Offset to character RAM
                                        (0176) 
                                        (0177) AREA UserModules (ROM, REL)
                                        (0178) 
                                        (0179) .SECTION
                                        (0180) ;-----------------------------------------------------------------------------
                                        (0181) ;  FUNCTION NAME: LCD_PrCString
                                        (0182) ;
                                        (0183) ;  DESCRIPTION:
                                        (0184) ;    Print constant (ROM) string to LCD
                                        (0185) ;-----------------------------------------------------------------------------
                                        (0186) ;
                                        (0187) ;  ARGUMENTS:
                                        (0188) ;     A:X  Pointer to String
                                        (0189) ;          A contains MSB of string address
                                        (0190) ;          X contains LSB of string address
                                        (0191) ;
                                        (0192) ;  RETURNS:  none
                                        (0193) ;
                                        (0194) ;  SIDE EFFECTS:
                                        (0195) ;    The A and X registers may be modified by this or future implementations
                                        (0196) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0197) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0198) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0199) ;    functions.
                                        (0200) ;          
                                        (0201) ;    Currently only the page pointer registers listed below are modified: 
                                        (0202) ;          CUR_PP
                                        (0203) ;
                                        (0204)  LCD_PrCString:
                                        (0205) _LCD_PrCString:
                                        (0206)     RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0207)  .Loop_PrCString:
0354: 08       PUSH  A                  (0208)     push  A                            ; Store ROM pointer
0355: 10       PUSH  X                  (0209)     push  X
0356: 28       ROMX                     (0210)     romx                               ; Get character from ROM
0357: B0 04    JNZ   0x035C             (0211)     jnz   .LCD_PrCString_WR            ; print character and advance pointer
0359: 20       POP   X                  (0212)     pop   X                            ; Restore the stack
035A: 18       POP   A                  (0213)     pop   A
                                        (0214)     RAM_EPILOGUE RAM_USE_CLASS_1
035B: 7F       RET                      (0215)     ret                                ; Return
                                        (0216) 
                                        (0217) .LCD_PrCString_WR:
035C: 90 3C    CALL  _LCD_WriteData|LCD_Write_Data|_LCD_Write_Data(0218)     call  LCD_WriteData                ; Write data to LCD
035E: 20       POP   X                  (0219)     pop   X                            ; Get ROM pointer
035F: 18       POP   A                  (0220)     pop   A
0360: 75       INC   X                  (0221)     inc   X                            ; Inc LSB of pointer
0361: DF F2    JNC   _LCD_PrCString     (0222)     jnc   .Loop_PrCString
0363: 74       INC   A                  (0223)     inc   A                            ; Inc MSB of pointer if LSB overflow
0364: 8F EF    JMP   _LCD_PrCString     (0224)     jmp   .Loop_PrCString
                                        (0225) 
                                        (0226) .ENDSECTION
                                        (0227) 
                                        (0228) ;-----------------------------------------------------------------------------
                                        (0229) ;  FUNCTION NAME: LCD_PrHexByte
                                        (0230) ;
                                        (0231) ;  DESCRIPTION:
                                        (0232) ;     Print a byte in Hex (two characters) to current LCD position
                                        (0233) ;
                                        (0234) ;-----------------------------------------------------------------------------
                                        (0235) ;
                                        (0236) ;  ARGUMENTS:
                                        (0237) ;     A  => (BYTE) Data/char to be printed
                                        (0238) ;
                                        (0239) ;  RETURNS: none
                                        (0240) ;
                                        (0241) ;  SIDE EFFECTS:
                                        (0242) ;    The A and X registers may be modified by this or future implementations
                                        (0243) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0244) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0245) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0246) ;    functions.
                                        (0247) ;          
                                        (0248) ;    Currently only the page pointer registers listed below are modified: 
                                        (0249) ;          CUR_PP
                                        (0250) ;
                                        (0251) .LITERAL
                                        (0252) LCD_HEX_STR::
                                        (0253)      DS    "0123456789ABCDEF"
                                        (0254) .ENDLITERAL
                                        (0255) .SECTION
                                        (0256) 
                                        (0257)  LCD_PrHexByte:
                                        (0258) _LCD_PrHexByte:
                                        (0259)     RAM_PROLOGUE RAM_USE_CLASS_1
0376: 08       PUSH  A                  (0260)     push  A                            ; Save lower nibble
0377: 67       ASR   A                  (0261)     asr   A                            ; Shift high nibble to right
0378: 67       ASR   A                  (0262)     asr   A
0379: 67       ASR   A                  (0263)     asr   A
037A: 67       ASR   A                  (0264)     asr   A
037B: 21 0F    AND   A,0xF              (0265)     and   A,0Fh                        ; Mask off nibble
037D: FF E7    INDEX LCD_HEX_STR        (0266)     index LCD_HEX_STR                  ; Get Hex value
037F: 90 19    CALL  _LCD_WriteData|LCD_Write_Data|_LCD_Write_Data(0267)     call  LCD_WriteData                ; Write data to screen
0381: 18       POP   A                  (0268)     pop   A                            ; Restore value
0382: 21 0F    AND   A,0xF              (0269)     and   A,0Fh                        ; Mask off lower nibble
0384: FF E0    INDEX LCD_HEX_STR        (0270)     index LCD_HEX_STR                  ; Get Hex value
0386: 90 12    CALL  _LCD_WriteData|LCD_Write_Data|_LCD_Write_Data(0271)     call  LCD_WriteData                ; Write data to screen
                                        (0272)     RAM_EPILOGUE RAM_USE_CLASS_1
0388: 7F       RET                      (0273)     ret
                                        (0274) .ENDSECTION
                                        (0275) 
                                        (0276) .SECTION
                                        (0277) ;-----------------------------------------------------------------------------
                                        (0278) ;  FUNCTION NAME: LCD_PrHexInt
                                        (0279) ;
                                        (0280) ;  DESCRIPTION:
                                        (0281) ;     Print an Int in Hex (four characters) to current LCD position
                                        (0282) ;
                                        (0283) ;-----------------------------------------------------------------------------
                                        (0284) ;
                                        (0285) ;  ARGUMENTS:
                                        (0286) ;     A:X Integer value
                                        (0287) ;         A  contains LSB of Int
                                        (0288) ;         X  contains MSB of Int
                                        (0289) ;
                                        (0290) ;  RETURNS: none
                                        (0291) ;
                                        (0292) ;  SIDE EFFECTS:
                                        (0293) ;    The A and X registers may be modified by this or future implementations
                                        (0294) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0295) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0296) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0297) ;    functions.
                                        (0298) ;          
                                        (0299) ;    Currently only the page pointer registers listed below are modified: 
                                        (0300) ;          CUR_PP
                                        (0301) ;
                                        (0302)  LCD_PrHexInt:
                                        (0303) _LCD_PrHexInt:
                                        (0304)     RAM_PROLOGUE RAM_USE_CLASS_1
0389: 4B       SWAP  A,X                (0305)     swap  A,X
038A: 9F EA    CALL  _LCD_PrHexByte     (0306)     call  LCD_PrHexByte                ; Print MSB
038C: 5B       MOV   A,X                (0307)     mov   A,X                          ; Move LSB into position
038D: 9F E7    CALL  _LCD_PrHexByte     (0308)     call  LCD_PrHexByte                ; Print LSB
                                        (0309)     RAM_EPILOGUE RAM_USE_CLASS_1
038F: 7F       RET                      (0310)     ret
                                        (0311) .ENDSECTION
                                        (0312) 
                                        (0313) .SECTION
                                        (0314) ;-----------------------------------------------------------------------------
                                        (0315) ;  FUNCTION NAME: LCD_PrString
                                        (0316) ;
                                        (0317) ;  DESCRIPTION:
                                        (0318) ;     Print (RAM) ASCII string to LCD
                                        (0319) ;
                                        (0320) ;-----------------------------------------------------------------------------
                                        (0321) ;
                                        (0322) ;  ARGUMENTS:
                                        (0323) ;     A:X contains pointer to string
                                        (0324) ;         X  contains LSB of string pointer
                                        (0325) ;         A  contains MSB or page of string pointer (not used at this time)
                                        (0326) ;
                                        (0327) ;  RETURNS:
                                        (0328) ;
                                        (0329) ;  SIDE EFFECTS:
                                        (0330) ;    The A and X registers may be modified by this or future implementations
                                        (0331) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0332) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0333) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0334) ;    functions.
                                        (0335) ;          
                                        (0336) ;    Currently only the page pointer registers listed below are modified: 
                                        (0337) ;          CUR_PP
                                        (0338) ;          IDX_PP
                                        (0339) ;
                                        (0340) ;
                                        (0341)  LCD_PrString:
                                        (0342) _LCD_PrString:
                                        (0343)     RAM_PROLOGUE RAM_USE_CLASS_3
                                        (0344)     RAM_SETPAGE_IDX A
                                        (0345)  .Loop_PrString:
0390: 52 00    MOV   A,[X+0]            (0346)     mov   A,[X]                        ; Get value pointed to by X
0392: A0 06    JZ    0x0399             (0347)     jz    .End_LCD_PrString            ; Check for end of string
                                        (0348)     ;LCD_writeData is known not to modify X so no need to preserve
0394: 90 04    CALL  _LCD_WriteData|LCD_Write_Data|_LCD_Write_Data(0349)     call  LCD_WriteData                ; Write data to screen
0396: 75       INC   X                  (0350)     inc   X                            ; Advance pointer to next character
0397: 8F F8    JMP   _LCD_PrString      (0351)     jmp   .Loop_PrString               ; Go get next character
                                        (0352) .End_LCD_PrString:
                                        (0353)     RAM_EPILOGUE RAM_USE_CLASS_3
0399: 7F       RET                      (0354)     ret
                                        (0355) .ENDSECTION
                                        (0356) 
                                        (0357) .SECTION
                                        (0358) ;-----------------------------------------------------------------------------
                                        (0359) ;  FUNCTION NAME: LCD_WriteData
                                        (0360) ;
                                        (0361) ;  DESCRIPTION:
                                        (0362) ;     Write a byte to the LCD's data register.
                                        (0363) ;
                                        (0364) ;-----------------------------------------------------------------------------
                                        (0365) ;
                                        (0366) ;  ARGUMENTS:
                                        (0367) ;    A contains byte to be written to LCD data register
                                        (0368) ;
                                        (0369) ;  RETURNS: none
                                        (0370) ;
                                        (0371) ;  SIDE EFFECTS:
                                        (0372) ;    The A and X registers may be modified by this or future implementations
                                        (0373) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0374) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0375) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0376) ;    functions.
                                        (0377) ;          
                                        (0378) ;    Currently only the page pointer registers listed below are modified: 
                                        (0379) ;          CUR_PP
                                        (0380) ;
                                        (0381)  LCD_WriteData:
                                        (0382) _LCD_WriteData:
                                        (0383)  LCD_Write_Data:   ; Do not use
                                        (0384) _LCD_Write_Data:   ; Do not use
                                        (0385)     RAM_PROLOGUE RAM_USE_CLASS_1
039A: 90 5F    CALL  0x03FB             (0386)     call  LCD_Check_Ready              ; Make sure controller is ready
                                        (0387)                                        ; A is preserved in LCD_Check_Ready
039C: 08       PUSH  A                  (0388)     push  A                            ; Save copy of character
039D: 67       ASR   A                  (0389)     asr   A                            ; Shift high nibble to right
039E: 67       ASR   A                  (0390)     asr   A
039F: 67       ASR   A                  (0391)     asr   A
03A0: 67       ASR   A                  (0392)     asr   A
03A1: 21 0F    AND   A,0xF              (0393)     and   A,0Fh                        ; Mask off high nibble
03A3: 90 38    CALL  0x03DD             (0394)     call  LCD_WDATA_Nibble             ; Write Upper nibble
03A5: 18       POP   A                  (0395)     pop   A                            ; Retrieve copy of character
03A6: 21 0F    AND   A,0xF              (0396)     and   A,0Fh                        ; Mask off high nibble
03A8: 40       NOP                      (0397)     nop
03A9: 40       NOP                      (0398)     nop
03AA: 40       NOP                      (0399)     nop
03AB: 90 30    CALL  0x03DD             (0400)     call  LCD_WDATA_Nibble   ; Write Lower nibble
                                        (0401)     RAM_EPILOGUE RAM_USE_CLASS_1
03AD: 7F       RET                      (0402)     ret
                                        (0403) .ENDSECTION
                                        (0404) 
                                        (0405) .SECTION
                                        (0406) ;-----------------------------------------------------------------------------
                                        (0407) ;  FUNCTION NAME: LCD_Control
                                        (0408) ;
                                        (0409) ;  DESCRIPTION:
                                        (0410) ;     Write a byte to the LCD's control register.
                                        (0411) ;
                                        (0412) ;-----------------------------------------------------------------------------
                                        (0413) ;
                                        (0414) ;  ARGUMENTS:
                                        (0415) ;     A contains data to be written to LCD control register.
                                        (0416) ;
                                        (0417) ;  RETURNS: none
                                        (0418) ;
                                        (0419) ;  SIDE EFFECTS:
                                        (0420) ;    The A and X registers may be modified by this or future implementations
                                        (0421) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0422) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0423) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0424) ;    functions.
                                        (0425) ;          
                                        (0426) ;    Currently only the page pointer registers listed below are modified: 
                                        (0427) ;          CUR_PP
                                        (0428) ;
                                        (0429)  LCD_Control:
                                        (0430) _LCD_Control:
                                        (0431)     RAM_PROLOGUE RAM_USE_CLASS_1
03AE: 90 4B    CALL  0x03FB             (0432)     call  LCD_Check_Ready              ; Make sure controller is ready
                                        (0433)                                        ; A is preserved in LCD_Check_Ready
03B0: 08       PUSH  A                  (0434)     push  A                            ; Save copy of byte
03B1: 67       ASR   A                  (0435)     asr   A                            ; Shift Upper Nibble to right
03B2: 67       ASR   A                  (0436)     asr   A
03B3: 67       ASR   A                  (0437)     asr   A
03B4: 67       ASR   A                  (0438)     asr   A
03B5: 21 0F    AND   A,0xF              (0439)     and   A,0Fh                        ; Mask off, just in case
03B7: 90 09    CALL  0x03C2             (0440)     call  LCD_WCNTL_Nibble             ; Write high nibble
03B9: 18       POP   A                  (0441)     pop   A                            ; Restore copy of byte
03BA: 21 0F    AND   A,0xF              (0442)     and   A,0Fh                        ; Mask off high nibble
03BC: 40       NOP                      (0443)     nop
03BD: 40       NOP                      (0444)     nop
03BE: 40       NOP                      (0445)     nop
03BF: 90 01    CALL  0x03C2             (0446)     call  LCD_WCNTL_Nibble             ; Write Lower nibble
                                        (0447)     RAM_EPILOGUE RAM_USE_CLASS_1
03C1: 7F       RET                      (0448)     ret
                                        (0449) .ENDSECTION
                                        (0450) 
                                        (0451) .SECTION
                                        (0452) ;-----------------------------------------------------------------------------
                                        (0453) ;  FUNCTION NAME: LCD_WCNTL_Nibble
                                        (0454) ;
                                        (0455) ;  DESCRIPTION:
                                        (0456) ;     Write a single nibble to the LCD's command register
                                        (0457) ;
                                        (0458) ;-----------------------------------------------------------------------------
                                        (0459) ;
                                        (0460) ;  ARGUMENTS:
                                        (0461) ;     A[3:0]   Contains Nibble to be written to command register
                                        (0462) ;
                                        (0463) ;  RETURNS: none
                                        (0464) ;
                                        (0465) ;  SIDE EFFECTS:
                                        (0466) ;    The A and X registers may be modified by this or future implementations
                                        (0467) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0468) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0469) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0470) ;    functions.
                                        (0471) ;          
                                        (0472) ;    Currently only the page pointer registers listed below are modified: 
                                        (0473) ;          CUR_PP
                                        (0474) ;
                                        (0475)  LCD_WCNTL_Nibble:
                                        (0476)     RAM_PROLOGUE RAM_USE_CLASS_4
03C2: 08       PUSH  A                  (0477)     push  A
                                        (0478)     RAM_SETPAGE_CUR >Port_2_Data_SHADE           ; Set CUR_PP to LCD variable address
03C3: 26 06 80 AND   [0x6],0x80         (0479)     and   [Port_2_Data_SHADE],~LCD_PORT_MASK
03C6: 51 06    MOV   A,[0x6]            (0480)     mov   A,[Port_2_Data_SHADE]
03C8: 60 08    MOV   REG[0x8],A         (0481)     mov   reg[LCD_Port],A                        ; Reset control lines
                                        (0482) 
03CA: 18       POP   A                  (0483)     pop   A
03CB: 21 0F    AND   A,0xF              (0484)     and   A,LCD_DATA_MASK                        ; Make sure no bogus data in MSN
03CD: 29 10    OR    A,0x10             (0485)     or    A,LCD_E                                ; Bring "E" Enable line high
03CF: 2A 06    OR    A,[0x6]            (0486)     or    A,[Port_2_Data_SHADE]                  ; OR in bit 7 just
03D1: 60 08    MOV   REG[0x8],A         (0487)     mov   reg[LCD_Port], A                       ; Write data
03D3: 53 06    MOV   [0x6],A            (0488)     mov   [Port_2_Data_SHADE],A                  ; Keep shadow register in sync
03D5: 40       NOP                      (0489)     nop
03D6: 21 8F    AND   A,0x8F             (0490)     and   A,(~LCD_PORT_MASK|LCD_DATA_MASK)       ; Disable E signal and leave data on bus.
03D8: 53 06    MOV   [0x6],A            (0491)     mov   [Port_2_Data_SHADE],A                  ; Keep shadow register in sync
03DA: 60 08    MOV   REG[0x8],A         (0492)     mov   reg[LCD_Port],A
                                        (0493)     RAM_EPILOGUE RAM_USE_CLASS_4
03DC: 7F       RET                      (0494)     ret
                                        (0495) .ENDSECTION
                                        (0496) 
                                        (0497) .SECTION
                                        (0498) ;-----------------------------------------------------------------------------
                                        (0499) ;  FUNCTION NAME: LCD_WDATA_Nibble
                                        (0500) ;
                                        (0501) ;  DESCRIPTION:
                                        (0502) ;     Write a single nibble to the LCD's DATA register
                                        (0503) ;
                                        (0504) ;-----------------------------------------------------------------------------
                                        (0505) ;
                                        (0506) ;  ARGUMENTS:
                                        (0507) ;     A[3:0]   Contains Nibble to be written to data register
                                        (0508) ;
                                        (0509) ;  RETURNS: none
                                        (0510) ;
                                        (0511) ;  SIDE EFFECTS:
                                        (0512) ;    The A and X registers may be modified by this or future implementations
                                        (0513) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0514) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0515) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0516) ;    functions.
                                        (0517) ;          
                                        (0518) ;    Currently only the page pointer registers listed below are modified: 
                                        (0519) ;          CUR_PP
                                        (0520) ;
                                        (0521) LCD_WDATA_Nibble:
                                        (0522)     RAM_PROLOGUE RAM_USE_CLASS_4
03DD: 08       PUSH  A                  (0523)     push  A
                                        (0524)     RAM_SETPAGE_CUR >Port_2_Data_SHADE          ; Set CUR_PP to LCD variable address
03DE: 26 06 80 AND   [0x6],0x80         (0525)     and   [Port_2_Data_SHADE],~LCD_PORT_MASK
03E1: 2E 06 20 OR    [0x6],0x20         (0526)     or    [Port_2_Data_SHADE],LCD_RS                  ; Raise RS to signify a Data Write
03E4: 51 06    MOV   A,[0x6]            (0527)     mov   A,[Port_2_Data_SHADE]
03E6: 60 08    MOV   REG[0x8],A         (0528)     mov   reg[LCD_Port],A
                                        (0529) 
03E8: 18       POP   A                  (0530)     pop   A
03E9: 21 0F    AND   A,0xF              (0531)     and   A,LCD_DATA_MASK                             ; Make sure no bogus data in A[7:4]
03EB: 29 30    OR    A,0x30             (0532)     or    A,(LCD_E | LCD_RS)                          ; Bring "E" Enable line high
03ED: 2A 06    OR    A,[0x6]            (0533)     or    A,[Port_2_Data_SHADE]                       ; Keep shadow in sync
03EF: 60 08    MOV   REG[0x8],A         (0534)     mov   reg[LCD_Port], A                            ; Write data
03F1: 53 06    MOV   [0x6],A            (0535)     mov   [Port_2_Data_SHADE],A                       ; Keep shadow in sync
03F3: 40       NOP                      (0536)     NOP
03F4: 21 AF    AND   A,0xAF             (0537)     and   A,(~LCD_PORT_MASK|LCD_DATA_MASK|LCD_RS)     ; Disable E signal and leave Data on bus
03F6: 53 06    MOV   [0x6],A            (0538)     mov   [Port_2_Data_SHADE],A                       ; keep shadow in sync
03F8: 60 08    MOV   REG[0x8],A         (0539)     mov   reg[LCD_Port],A
                                        (0540)     RAM_EPILOGUE RAM_USE_CLASS_4
03FA: 7F       RET                      (0541)     ret
                                        (0542) .ENDSECTION
                                        (0543) 
                                        (0544) .SECTION
                                        (0545) ;-----------------------------------------------------------------------------
                                        (0546) ;  FUNCTION NAME: LCD_Check_Ready
                                        (0547) ;
                                        (0548) ;  DESCRIPTION:
                                        (0549) ;     Wait until LCD has completed last command.
                                        (0550) ;
                                        (0551) ;-----------------------------------------------------------------------------
                                        (0552) ;
                                        (0553) ;  ARGUMENTS: none
                                        (0554) ;
                                        (0555) ;  RETURNS: none
                                        (0556) ;
                                        (0557) ;  SIDE EFFECTS:
                                        (0558) ;    The A and X registers may be modified by this or future implementations
                                        (0559) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0560) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0561) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0562) ;    functions.
                                        (0563) ;          
                                        (0564) ;    Currently only the page pointer registers listed below are modified: 
                                        (0565) ;          CUR_PP
                                        (0566) ;
                                        (0567) ;     If LCD is not present, this routine may never return.
                                        (0568) ;
                                        (0569) LCD_Check_Ready:
                                        (0570)     RAM_PROLOGUE RAM_USE_CLASS_4
03FB: 08       PUSH  A                  (0571)     push  A                                           ; Save Accumulator
                                        (0572)     RAM_SETPAGE_CUR >Port_2_Data_SHADE                ; Set CUR_PP to LCD variable address
03FC: 26 06 80 AND   [0x6],0x80         (0573)     and   [Port_2_Data_SHADE],~LCD_PORT_MASK          ; Mask of all LCD bits
03FF: 51 06    MOV   A,[0x6]            (0574)     mov   A,[Port_2_Data_SHADE]
0401: 60 08    MOV   REG[0x8],A         (0575)     mov   reg[LCD_Port],A                             ; Zero LCD port bits
                                        (0576) 
0403: 26 07 F0 AND   [0x7],0xF0         (0577)     and   [Port_2_DriveMode_0_SHADE],~LCD_DATA_MASK   ; Clear out LCD mode bits.
0406: 51 07    MOV   A,[0x7]            (0578)     mov   A,[Port_2_DriveMode_0_SHADE]
0408: 71 10    OR    F,0x10             
                                        (0579)     M8C_SetBank1                                      ; Change port mode to read status
040A: 60 08    MOV   REG[0x8],A         (0580)     mov   reg[LCD_PortMode0],A                        ; Setup LCD Port for reading
040C: 70 EF    AND   F,0xEF             
                                        (0581)     M8C_SetBank0
                                        (0582) 
040E: 2E 06 40 OR    [0x6],0x40         (0583)     or    [Port_2_Data_SHADE],LCD_RW                  ; Raise RW to signify Read operation
0411: 51 06    MOV   A,[0x6]            (0584)     mov   A,[Port_2_Data_SHADE]
0413: 60 08    MOV   REG[0x8],A         (0585)     mov   reg[LCD_Port],A
0415: 40       NOP                      (0586)     NOP
                                        (0587) 
0416: 10       PUSH  X                  (0588)     push  X							                            ; Save 'X' register
0417: 57 FF    MOV   X,0xFF             (0589)     mov   X,255                         			            ; 255 Attempts
                                        (0590) 
                                        (0591) .LCD_RDY_LOOP:
0419: 2E 06 50 OR    [0x6],0x50         (0592)     or    [Port_2_Data_SHADE], LCD_CNTL_READ                    ; Raise E to start cycle
041C: 51 06    MOV   A,[0x6]            (0593)     mov   A,[Port_2_Data_SHADE]
041E: 60 08    MOV   REG[0x8],A         (0594)     mov   reg[LCD_Port],A
                                        (0595) 
0420: 40       NOP                      (0596)     nop                                               ; Wait 2 nops to make sure data is ready
0421: 40       NOP                      (0597)     nop
0422: 5D 08    MOV   A,REG[0x8]         (0598)     mov   A,reg[LCD_Port]
                                        (0599) 
                                        (0600) ; The code below is used to work around the async read issue with the ICE with the 
                                        (0601) ; 25/26xxx family of devices.  It will help to eliminate "Invalid memory reference" 
                                        (0602) ; errors.  It is not required when running without the ICE or when using any other 
                                        (0603) ; family besides the 25/26xxx family. If not using the ICE or with any other family
                                        (0604) ; the ICE_PORT_SYNC flag should be set to 0.
                                        (0605) IF(ICE_PORT_SYNC)                          
                                        (0606)     mov   reg[ 0xfa], A                    
                                        (0607)     mov   A, reg[0xfa]                     
                                        (0608) ENDIF   
                                        (0609)                                    
0424: 08       PUSH  A                  (0610)     push  A
0425: 26 06 C0 AND   [0x6],0xC0         (0611)     and   [Port_2_Data_SHADE],(~LCD_PORT_MASK | LCD_RW)         ; Lower E signal
0428: 51 06    MOV   A,[0x6]            (0612)     mov   A,[Port_2_Data_SHADE]
042A: 60 08    MOV   REG[0x8],A         (0613)     mov   reg[LCD_Port],A
                                        (0614) 
042C: 40       NOP                      (0615)     nop                                    ; Add delay for the slowest part and the
042D: 40       NOP                      (0616)     nop                                    ; fastest PSoC
042E: 40       NOP                      (0617)     nop
                                        (0618)                                                                 ; Get the LSBs
042F: 2E 06 50 OR    [0x6],0x50         (0619)     or    [Port_2_Data_SHADE],LCD_CNTL_READ                     ; Raise E to start cycle
0432: 51 06    MOV   A,[0x6]            (0620)     mov   A,[Port_2_Data_SHADE]
0434: 60 08    MOV   REG[0x8],A         (0621)     mov   reg[LCD_Port],A
                                        (0622) 
0436: 40       NOP                      (0623)     nop
0437: 40       NOP                      (0624)     nop
                                        (0625) 
0438: 26 06 C0 AND   [0x6],0xC0         (0626)     and   [Port_2_Data_SHADE],(~LCD_PORT_MASK | LCD_RW)         ; Lower E signal
043B: 51 06    MOV   A,[0x6]            (0627)     mov   A,[Port_2_Data_SHADE]
043D: 60 08    MOV   REG[0x8],A         (0628)     mov   reg[LCD_Port],A
                                        (0629) 
043F: 18       POP   A                  (0630)     pop   A
0440: 21 08    AND   A,0x8              (0631)     and   A,LCD_READY_BIT                                       ; Check busy
                                        (0632) 
0442: A0 04    JZ    0x0447             (0633)     jz    .UNLOCK
0444: 79       DEC   X                  (0634)     dec   X
0445: BF D3    JNZ   0x0419             (0635)     jnz   .LCD_RDY_LOOP                                         ; If LCD still busy, read again for 255 times
                                        (0636) .UNLOCK:
0447: 20       POP   X                  (0637)     pop   X							                            ; Restore 'X' register
                                        (0638) 
0448: 2E 07 7F OR    [0x7],0x7F         (0639)     or    [Port_2_DriveMode_0_SHADE],LCD_PORT_WRITE   ; Revert Data bit to Write mode
044B: 51 07    MOV   A,[0x7]            (0640)     mov   A,[Port_2_DriveMode_0_SHADE]
044D: 71 10    OR    F,0x10             
                                        (0641)     M8C_SetBank1
044F: 60 08    MOV   REG[0x8],A         (0642)     mov   reg[LCD_PortMode0],A                        ; Setup LCD Port for writing
0451: 70 EF    AND   F,0xEF             
                                        (0643)     M8C_SetBank0
0453: 18       POP   A                  (0644)     pop   A
                                        (0645)     RAM_EPILOGUE RAM_USE_CLASS_4                                ; Restore Accumulator
0454: 7F       RET                      (0646)     ret
                                        (0647) .ENDSECTION
                                        (0648) 
                                        (0649) .SECTION
                                        (0650) ;-----------------------------------------------------------------------------
                                        (0651) ;  FUNCTION NAME: LCD_Start
                                        (0652) ;  FUNCTION NAME: LCD_Init
                                        (0653) ;
                                        (0654) ;  DESCRIPTION:
                                        (0655) ;     Initialize LCD
                                        (0656) ;
                                        (0657) ;-----------------------------------------------------------------------------
                                        (0658) ;
                                        (0659) ;  ARGUMENTS: none
                                        (0660) ;
                                        (0661) ;  RETURNS: none
                                        (0662) ;
                                        (0663) ;  SIDE EFFECTS:
                                        (0664) ;    The A and X registers may be modified by this or future implementations
                                        (0665) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0666) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0667) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0668) ;    functions.
                                        (0669) ;          
                                        (0670) ;    Currently only the page pointer registers listed below are modified: 
                                        (0671) ;          CUR_PP
                                        (0672) ;
                                        (0673) ;  THEORY of OPERATION or PROCEDURE:
                                        (0674) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0675) ;    This initialization is a bit long, but it should work for
                                        (0676) ;    most 2 and 4 line LCDs.
                                        (0677) ;
                                        (0678)  LCD_Start:
                                        (0679) _LCD_Start:
                                        (0680)  LCD_Init:
                                        (0681) _LCD_Init:
                                        (0682)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0683)     RAM_SETPAGE_CUR >Port_2_Data_SHADE                          ; Set CUR_PP to LCD variable address
                                        (0684) 
0455: 26 07 80 AND   [0x7],0x80         (0685)     and   [Port_2_DriveMode_0_SHADE],~LCD_PORT_MASK             ; Mask off LCD bits
0458: 2E 07 7F OR    [0x7],0x7F         (0686)     or    [Port_2_DriveMode_0_SHADE],LCD_PORT_WRITE             ; Set LCD port for writing
045B: 26 08 80 AND   [0x8],0x80         (0687)     and   [Port_2_DriveMode_1_SHADE],~LCD_PORT_MASK             ; Mask off LCD bits
                                        (0688) 
045E: 51 07    MOV   A,[0x7]            (0689)     mov   A,[Port_2_DriveMode_0_SHADE]
0460: 71 10    OR    F,0x10             
                                        (0690)     M8C_SetBank1
0462: 60 08    MOV   REG[0x8],A         (0691)     mov   reg[LCD_PortMode0],A                                  ; Setup LCD Port for writing
0464: 51 08    MOV   A,[0x8]            (0692)     mov   A,[Port_2_DriveMode_1_SHADE]
0466: 60 09    MOV   REG[0x9],A         (0693)     mov   reg[LCD_PortMode1],A
0468: 70 EF    AND   F,0xEF             
                                        (0694)     M8C_SetBank0
                                        (0695) 
046A: 50 FA    MOV   A,0xFA             (0696)     mov   A,250                             ; Delay for 12.5 mSec (250 * 50uSec)
046C: 90 63    CALL  _LCD_Delay50uTimes (0697)     call  LCD_Delay50uTimes
046E: 50 FA    MOV   A,0xFA             (0698)     mov   A,250                             ; Delay for 12.5 mSec (250 * 50uSec)
0470: 90 5F    CALL  _LCD_Delay50uTimes (0699)     call  LCD_Delay50uTimes
                                        (0700) 
0472: 50 03    MOV   A,0x3              (0701)     mov   A,03h
0474: 9F 4C    CALL  0x03C2             (0702)     call  LCD_WCNTL_Nibble
                                        (0703) 
0476: 50 52    MOV   A,0x52             (0704)     mov   A,82                              ; Delay for 4.1 mSec (82 * 50uSec)
0478: 90 57    CALL  _LCD_Delay50uTimes (0705)     call  LCD_Delay50uTimes
                                        (0706) 
047A: 50 03    MOV   A,0x3              (0707)     mov   A,03h
047C: 9F 44    CALL  0x03C2             (0708)     call  LCD_WCNTL_Nibble
                                        (0709) 
047E: 90 5F    CALL  _LCD_Delay50u      (0710)     call  LCD_Delay50u
0480: 90 5D    CALL  _LCD_Delay50u      (0711)     call  LCD_Delay50u
0482: 90 5B    CALL  _LCD_Delay50u      (0712)     call  LCD_Delay50u
                                        (0713) 
0484: 50 03    MOV   A,0x3              (0714)     mov   A,03h
0486: 9F 3A    CALL  0x03C2             (0715)     call  LCD_WCNTL_Nibble
                                        (0716) 
0488: 50 5A    MOV   A,0x5A             (0717)     mov   A,90                              ; Delay for 4.5 mSec (90 * 50uSec)
048A: 90 45    CALL  _LCD_Delay50uTimes (0718)     call  LCD_Delay50uTimes
                                        (0719) 
048C: 50 02    MOV   A,0x2              (0720)     mov   A,02h
048E: 9F 32    CALL  0x03C2             (0721)     call  LCD_WCNTL_Nibble
                                        (0722) 
0490: 50 5A    MOV   A,0x5A             (0723)     mov   A,90                              ; Delay for 4.5 mSec (90 * 50uSec)
0492: 90 3D    CALL  _LCD_Delay50uTimes (0724)     call  LCD_Delay50uTimes
                                        (0725) 
0494: 50 08    MOV   A,0x8              (0726)     mov   A,08h
0496: 9F 16    CALL  _LCD_Control       (0727)     call  LCD_Control
0498: 50 5A    MOV   A,0x5A             (0728)     mov   A,90                              ; Delay for 4.5 mSec (90 * 50uSec)
049A: 90 35    CALL  _LCD_Delay50uTimes (0729)     call  LCD_Delay50uTimes
                                        (0730) 
049C: 50 01    MOV   A,0x1              (0731)     mov   A,01h
049E: 9F 0E    CALL  _LCD_Control       (0732)     call  LCD_Control
04A0: 50 5A    MOV   A,0x5A             (0733)     mov   A,90                              ; Delay for 4.5 mSec (90 * 50uSec)
04A2: 90 2D    CALL  _LCD_Delay50uTimes (0734)     call  LCD_Delay50uTimes
                                        (0735) 
04A4: 50 06    MOV   A,0x6              (0736)     mov   A,06h
04A6: 9F 06    CALL  _LCD_Control       (0737)     call  LCD_Control
                                        (0738) 
04A8: 50 0E    MOV   A,0xE              (0739)     mov   A,0Eh
04AA: 9F 02    CALL  _LCD_Control       (0740)     call  LCD_Control
                                        (0741) 
04AC: 50 2C    MOV   A,0x2C             (0742)     mov   A,LCD_4BIT_2LINE                  ; Setup for 4 bit interface, 2 line
04AE: 9E FE    CALL  _LCD_Control       (0743)     call  LCD_Control
                                        (0744) 
04B0: 50 08    MOV   A,0x8              (0745)     mov   A,LCD_DISP_OFF
04B2: 9E FA    CALL  _LCD_Control       (0746)     call  LCD_Control
                                        (0747) 
04B4: 50 0C    MOV   A,0xC              (0748)     mov   A,LCD_DISP_ON
04B6: 9E F6    CALL  _LCD_Control       (0749)     call  LCD_Control
                                        (0750) 
04B8: 50 03    MOV   A,0x3              (0751)     mov   A,LCD_DISP_INC
04BA: 9E F2    CALL  _LCD_Control       (0752)     call  LCD_Control
                                        (0753) 
04BC: 50 5A    MOV   A,0x5A             (0754)     mov   A,90                              ; Delay for 4.5 mSec (90 * 50uSec)
04BE: 90 11    CALL  _LCD_Delay50uTimes (0755)     call  LCD_Delay50uTimes
                                        (0756)     RAM_EPILOGUE RAM_USE_CLASS_4
04C0: 7F       RET                      (0757)     ret
                                        (0758) .ENDSECTION
                                        (0759) 
                                        (0760) ;-----------------------------------------------------------------------------
                                        (0761) ;  FUNCTION NAME: LCD_Position
                                        (0762) ;
                                        (0763) ;  DESCRIPTION:
                                        (0764) ;     Position Cursor at Row and Col location
                                        (0765) ;
                                        (0766) ;-----------------------------------------------------------------------------
                                        (0767) ;
                                        (0768) ;  ARGUMENTS:
                                        (0769) ;     A => Row  0 to 3
                                        (0770) ;     X => Col  0 to 39+
                                        (0771) ;
                                        (0772) ;  RETURNS:  none
                                        (0773) ;
                                        (0774) ;  SIDE EFFECTS:
                                        (0775) ;    The A and X registers may be modified by this or future implementations
                                        (0776) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0777) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0778) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0779) ;    functions.
                                        (0780) ;
                                        (0781) .LITERAL
                                        (0782) LCD_ROW_OFFSET::
                                        (0783)      DB    LCD_ROW1_OFFSET, LCD_ROW2_OFFSET, LCD_ROW3_OFFSET, LCD_ROW4_OFFSET
                                        (0784) .ENDLITERAL
                                        (0785) 
                                        (0786) .SECTION
                                        (0787)  LCD_Position:
                                        (0788) _LCD_Position:
                                        (0789)     RAM_PROLOGUE RAM_USE_CLASS_2
04C5: 21 03    AND   A,0x3              (0790)     and   A,03h                        ; Mask off 2 bits for row address 0 to 3
04C7: 10       PUSH  X                  (0791)     push  X                            ; Store COL
04C8: FF F7    INDEX LCD_ROW_OFFSET     (0792)     index LCD_ROW_OFFSET ; Get ROW memory offset from table
04CA: 4F       MOV   X,SP               (0793)     mov   X,SP                         ; Get Stack pointer
04CB: 03 FF    ADD   A,[X-1]            (0794)     add   A,[X+(-1)]                   ; Add the COL to the display pointer
04CD: 20       POP   X                  (0795)     pop   X
                                        (0796) 
04CE: 9E DE    CALL  _LCD_Control       (0797)     call  LCD_Control                  ; Write control byte
                                        (0798)     RAM_EPILOGUE RAM_USE_CLASS_2
04D0: 7F       RET                      (0799)     ret
                                        (0800) .ENDSECTION
                                        (0801) 
                                        (0802) .SECTION
                                        (0803) ;-----------------------------------------------------------------------------
                                        (0804) ;  FUNCTION NAME: LCD_Delay50uTimes
                                        (0805) ;
                                        (0806) ;  DESCRIPTION:
                                        (0807) ;     Delay increments of 50uSeconds
                                        (0808) ;
                                        (0809) ;-----------------------------------------------------------------------------
                                        (0810) ;
                                        (0811) ;  ARGUMENTS:
                                        (0812) ;     A contains the delay multiplier
                                        (0813) ;
                                        (0814) ;  RETURNS:
                                        (0815) ;
                                        (0816) ;  SIDE EFFECTS:
                                        (0817) ;    The A and X registers may be modified by this or future implementations
                                        (0818) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0819) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0820) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0821) ;    functions.
                                        (0822) ;
                                        (0823) ;
                                        (0824)  LCD_Delay50uTimes:
                                        (0825) _LCD_Delay50uTimes:
                                        (0826)     RAM_PROLOGUE RAM_USE_CLASS_1
04D1: 90 0C    CALL  _LCD_Delay50u      (0827)     call  LCD_Delay50u
04D3: 78       DEC   A                  (0828)     dec   A
04D4: BF FC    JNZ   _LCD_Delay50uTimes (0829)     jnz   LCD_Delay50uTimes
                                        (0830)     RAM_EPILOGUE RAM_USE_CLASS_1
04D6: 7F       RET                      (0831)     ret
                                        (0832) 
                                        (0833) .ENDSECTION
                                        (0834) 
                                        (0835) ;-----------------------------------------------------------------------------
                                        (0836) ;  FUNCTION NAME: LCD_Delay50u
                                        (0837) ;
                                        (0838) ;  DESCRIPTION:
                                        (0839) ;     Delay 50uSec for any clock frequency from 1.5MHz to 24MHz
                                        (0840) ;     Slower clock frequencies the delay will be;
                                        (0841) ;           1.5
                                        (0842) ;        -------------- * 50uSec
                                        (0843) ;        clock_freq(MHz)
                                        (0844) ;
                                        (0845) ;
                                        (0846) ;-----------------------------------------------------------------------------
                                        (0847) ;
                                        (0848) ;  ARGUMENTS: none
                                        (0849) ;
                                        (0850) ;  RETURNS: none
                                        (0851) ;
                                        (0852) ;  SIDE EFFECTS:
                                        (0853) ;    The A and X registers may be modified by this or future implementations
                                        (0854) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0855) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0856) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0857) ;    functions.
                                        (0858) ;
                                        (0859) ;  THEORY of OPERATION or PROCEDURE:
                                        (0860) ;
                                        (0861) .LITERAL
                                        (0862)  LCD_Delay50u_Table::
                                        (0863)      DB    08h,  19h,   3Ah,   7Ch,   01h,    01h,    01h,   01h
                                        (0864) ;         3MHz, 6MHz, 12MHz, 24MHz, 1.5MHz, 750kHz, 188kHz, 94kHz
                                        (0865) .ENDLITERAL
                                        (0866) .SECTION
                                        (0867) 
                                        (0868)   LCD_Delay50u:
                                        (0869)  _LCD_Delay50u:                        ; [11]  Call
                                        (0870)     RAM_PROLOGUE RAM_USE_CLASS_1
04DF: 08       PUSH  A                  (0871)     push  A
04E0: 71 10    OR    F,0x10             
                                        (0872)     M8C_SetBank1                         ; [4]
04E2: 5D E0    MOV   A,REG[0xE0]        (0873)     mov   A, reg[OSC_CR0]                ; [6] Get delay value
04E4: 70 EF    AND   F,0xEF             
                                        (0874)     M8C_SetBank0                         ; [4]
04E6: 21 07    AND   A,0x7              (0875)     and   A,07h                          ; [4] Mask off only the clock bits
04E8: 39 05    CMP   A,0x5              (0876)     cmp   A,05h
04EA: D0 06    JNC   0x04F1             (0877)     jnc   .Delay50u_End
04EC: FF E9    INDEX LCD_Delay50u_Table (0878)     index LCD_Delay50u_Table ; [13] Get delay value
                                        (0879) .Delay50u_Loop:                          ;
04EE: 78       DEC   A                  (0880)     dec   A                              ; [4]
04EF: BF FE    JNZ   0x04EE             (0881)     jnz   .Delay50u_Loop                 ; [5]
                                        (0882) .Delay50u_End:
04F1: 18       POP   A                  (0883)     pop   A
                                        (0884)     RAM_EPILOGUE RAM_USE_CLASS_1
04F2: 7F       RET                      (0885)     ret
                                        (0886) .ENDSECTION
                                        (0887) 
                                        (0888) 
                                        (0889) ;-----------------------------------------------------------------------------
                                        (0890) ;      If bargraph is not enabled, the following functions are not required.
                                        (0891) ;-----------------------------------------------------------------------------
                                        (0892) 
                                        (0893) IF (LCD_BARGRAPH_ENABLE)
                                        (0894) 
                                        (0895) IF SYSTEM_SMALL_MEMORY_MODEL
                                        (0896) .SECTION
                                        (0897) ;-----------------------------------------------------------------------------
                                        (0898) ;  FUNCTION NAME: LCD_DrawBG
                                        (0899) ;
                                        (0900) ;  DESCRIPTION:
                                        (0901) ;  This legacy fastcall version are provided only to support existing small
                                        (0902) ;  memory model assembly language code---it does not work in the large memory
                                        (0903) ;  model.
                                        (0904) ;
                                        (0905) ;  ** This legacy fastcall version is provided on a temporary basis to
                                        (0906) ;  ** ease the transition to the 4.2 release of PSoC Designer. Its use is
                                        (0907) ;  ** deprecated and its status is "No Further Maintenance". If you call this
                                        (0908) ;  ** function in assembly you should convert to _LCD_DrawVBG
                                        (0909) ;  ** (with a leading underscore) and the fastcall16 interface
                                        (0910) ;
                                        (0911) ;  Draw a horizontal bargraph on the LCD with the given parameters.  This
                                        (0912) ;  is a legacy function that is intended to support existing Assembly
                                        (0913) ;  language programs that call this function.  This should not be used for
                                        (0914) ;  new code or with Large Memory Model programs.
                                        (0915) ;-----------------------------------------------------------------------------
                                        (0916) ;
                                        (0917) ;  LEGACY FASTCALL ARGUMENTS:
                                        (0918) ;    A    => Starting row for bargraph 0 to 3
                                        (0919) ;   [X]   => Starting Column for bargraph 0 to 39+
                                        (0920) ;   [x-1] => Length of bargraph in chars 1 to 40+
                                        (0921) ;   [X-2] => Position of pointer in segments 5 times Length
                                        (0922) ;
                                        (0923) ;
                                        (0924) ;  RETURNS:  none
                                        (0925) ;
                                        (0926) ;  SIDE EFFECTS:
                                        (0927) ;    The A and X registers may be modified by this or future implementations
                                        (0928) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0929) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0930) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0931) ;    functions.
                                        (0932) ;
                                        (0933) ;    If LCD_Init is not called before this function, the
                                        (0934) ;    bargraph will not be drawn properly.
                                        (0935) ;
                                        (0936) ; Stack offset constants
                                        (0937) BG_COLX:       equ  0                   ; Stack position of Column
                                        (0938) BG_CHAR_LENX:  equ -1                   ; Stack position of Length
                                        (0939) BG_LENGTHX:    equ -2                   ; Stack position of bargraph pointer position
                                        (0940) 
                                        (0941) 
                                        (0942) LCD_DrawBG:
                                        (0943)     push  X
                                        (0944)     mov   X,[X+BG_COLX]                 ; Row in A, Col in X
                                        (0945)     call  LCD_Position                 ; Set cursor position
                                        (0946)     pop   X                             ; Restore pointer
                                        (0947) 
                                        (0948) .LCD_BG_LOOP1X:
                                        (0949)     cmp   [X+BG_LENGTHX],00h            ; Check for past end of BG
                                        (0950)     jnz   .LCD_CHECK1X
                                        (0951)     mov   A,00h                         ; Load empty character
                                        (0952)     jmp   .LCD_BG_DOITX                 ;
                                        (0953) 
                                        (0954) .LCD_CHECK1X:
                                        (0955)     cmp   [X+BG_LENGTHX],06h            ; Check if BG pointer is at this character
                                        (0956)     jnc   .LCD_CHECK2X                  ; Note yet, use full character
                                        (0957)     mov   A,[X+BG_LENGTHX]
                                        (0958)     sub   [X+BG_LENGTHX],A
                                        (0959)     jmp   .LCD_BG_DOITX
                                        (0960) 
                                        (0961) .LCD_CHECK2X:                           ; Put index to full character
                                        (0962)     mov   A, 06h
                                        (0963)     sub   [X+BG_LENGTHX],05h            ; Subtract another 5 positions
                                        (0964) 
                                        (0965) .LCD_BG_DOITX:
                                        (0966)     call  LCD_WriteData                ; Display BG character
                                        (0967) 
                                        (0968)     dec   [X+BG_CHAR_LENX]              ; Dec Char count
                                        (0969)     jnz   .LCD_BG_LOOP1X                ; Do it all over again
                                        (0970)     ret
                                        (0971) .ENDSECTION
                                        (0972) ENDIF ; SYSTEM_SMALL_MEMORY_MODEL
                                        (0973) 
                                        (0974) .SECTION
                                        (0975) ;-----------------------------------------------------------------------------
                                        (0976) ;  FUNCTION NAME: LCD_DrawBG
                                        (0977) ;
                                        (0978) ;  DESCRIPTION:
                                        (0979) ;     Draw a horizontal bargraph on the LCD with the given parameters.
                                        (0980) ;
                                        (0981) ;
                                        (0982) ;-----------------------------------------------------------------------------
                                        (0983) ;
                                        (0984) ;  FASTCALL16 ARGUMENTS:
                                        (0985) ;   [SP-3] => Starting row for bargraph 0 to 3
                                        (0986) ;   [SP-4] => Starting Column for bargraph 0 to 39+
                                        (0987) ;   [SP-5] => Length of bargraph in chars 1 to 40+
                                        (0988) ;   [SP-6] => Position of pointer in segments 5 times Length
                                        (0989) ;
                                        (0990) ;
                                        (0991) ;  RETURNS:  none
                                        (0992) ;
                                        (0993) ;  SIDE EFFECTS:
                                        (0994) ;    The A and X registers may be modified by this or future implementations
                                        (0995) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0996) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0997) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0998) ;    functions.
                                        (0999) ;          
                                        (1000) ;    Currently only the page pointer registers listed below are modified: 
                                        (1001) ;          CUR_PP
                                        (1002) ;
                                        (1003) ;    If LCD_Init is not called before this function, the
                                        (1004) ;    bargraph will not be drawn properly.
                                        (1005) ;
                                        (1006) ; Stack offset constants
                                        (1007) BG_ROW:       equ -3
                                        (1008) BG_COL:       equ -4                   ; Stack position of Column
                                        (1009) BG_CHAR_LEN:  equ -5                   ; Stack position of Length
                                        (1010) BG_LENGTH:    equ -6                   ; Stack position of bargraph pointer position
                                        (1011) 
                                        (1012) 
                                        (1013) _LCD_DrawBG:
                                        (1014)     RAM_PROLOGUE RAM_USE_CLASS_2
                                        (1015)     mov   X, SP
                                        (1016)     push  X
                                        (1017)     mov   A,[X+BG_ROW]                 ; Row in A
                                        (1018)     mov   X,[X+BG_COL]                 ; Col in X
                                        (1019)     RAM_EPILOGUE RAM_USE_CLASS_2
                                        (1020)     call  LCD_Position                 ; Set cursor position
                                        (1021)     RAM_PROLOGUE RAM_USE_CLASS_2
                                        (1022)     pop  X
                                        (1023) 
                                        (1024) .LCD_BG_LOOP1:
                                        (1025)     cmp   [X+BG_LENGTH],00h            ; Check for past end of BG
                                        (1026)     jnz   .LCD_CHECK1
                                        (1027)     mov   A,00h                        ; Load empty character
                                        (1028)     jmp   .LCD_BG_DOIT                  ;
                                        (1029) 
                                        (1030) .LCD_CHECK1:
                                        (1031)     cmp   [X+BG_LENGTH],06h            ; Check if BG pointer is at this character
                                        (1032)     jnc   .LCD_CHECK2                   ; Note yet, use full character
                                        (1033)     mov   A,[X+BG_LENGTH]
                                        (1034)     sub   [X+BG_LENGTH],A
                                        (1035)     jmp   .LCD_BG_DOIT
                                        (1036) 
                                        (1037) .LCD_CHECK2:                            ; Put index to full character
                                        (1038)     mov   A, 06h
                                        (1039)     sub   [X+BG_LENGTH],05h            ; Subtract another 5 positions
                                        (1040) 
                                        (1041) .LCD_BG_DOIT:
                                        (1042)     call  LCD_WriteData                ; Display BG character
                                        (1043) 
                                        (1044)     dec   [X+BG_CHAR_LEN]              ; Dec Char count
                                        (1045)     jnz   .LCD_BG_LOOP1                 ; Do it all over again
                                        (1046)     RAM_EPILOGUE RAM_USE_CLASS_2
                                        (1047)     ret
                                        (1048) .ENDSECTION
                                        (1049) 
                                        (1050) IF SYSTEM_SMALL_MEMORY_MODEL
                                        (1051) .SECTION
                                        (1052) ;-----------------------------------------------------------------------------
                                        (1053) ;  FUNCTION NAME: LCD_DrawVBG
                                        (1054) ;
                                        (1055) ;  DESCRIPTION:
                                        (1056) ;  This legacy fastcall version are provided only to support existing small
                                        (1057) ;  memory model assembly language code---it does not work in the large memory
                                        (1058) ;  model.
                                        (1059) ;
                                        (1060) ;  ** This legacy fastcall version is provided on a temporary basis to
                                        (1061) ;  ** ease the transition to the 4.2 release of PSoC Designer. Its use is
                                        (1062) ;  ** deprecated and its status is "No Further Maintenance". If you call this
                                        (1063) ;  ** function in assembly you should convert to _LCD_DrawVBG
                                        (1064) ;  ** (with a leading underscore) and the fastcall16 interface
                                        (1065) ;
                                        (1066) ;  Draw a vertical bargraph on the LCD with the given parameters. This
                                        (1067) ;  is a legacy function that is intended to support existing Assembly
                                        (1068) ;  language programs that call this function.  This should not be used for
                                        (1069) ;  new code or with Large Memory Model programs.
                                        (1070) ;-----------------------------------------------------------------------------
                                        (1071) ;
                                        (1072) ;  LEGACY FASTCALL ARGUMENTS:
                                        (1073) ;    A    => Starting row for bargraph 0 to 3
                                        (1074) ;   [X]   => Starting Column for bargraph 0 to 40+
                                        (1075) ;   [x-1] => Height of bargraph in chars 1 - 4
                                        (1076) ;   [X-2] => Position of pointer in segments 8 times height
                                        (1077) ;  RETURNS:
                                        (1078) ;
                                        (1079) ;  SIDE EFFECTS:
                                        (1080) ;    The A and X registers may be modified by this or future implementations
                                        (1081) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1082) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1083) ;    responsibility to preserve their values across calls to fastcall16 
                                        (1084) ;    functions.
                                        (1085) ;    
                                        (1086) ;    If LCD_Init is not called before this function, the
                                        (1087) ;    bargraph will not be drawn properly.
                                        (1088) ;
                                        (1089) ; Stack offset constants
                                        (1090) VBG_COLX:            equ  0
                                        (1091) VBG_CHAR_HEIGHTX:    equ -1
                                        (1092) VBG_SEG_HEIGHTX:     equ -2
                                        (1093) 
                                        (1094) LCD_DrawVBG:
                                        (1095) 
                                        (1096)     and   A,03h                        ; Make sure only rows 0 - 3 are valid
                                        (1097) .VBG_LOOPX:
                                        (1098)     push  A
                                        (1099)     index LCD_ROW_OFFSET  ; Get row offset
                                        (1100)     add   A,[X+VBG_COLX]                ; Add column offset to position
                                        (1101)     call  LCD_Control                  ; Position Cursor
                                        (1102)     cmp   [X+VBG_SEG_HEIGHTX],00h       ; Check for zero segs
                                        (1103)     jnz   .VBG_NZ_SEGX
                                        (1104)     mov   A,' '                        ; Load space character
                                        (1105)     jmp   .VBG_WRITE_CHARX
                                        (1106) .VBG_NZ_SEGX:
                                        (1107)     cmp   [X+VBG_SEG_HEIGHTX],09h       ; Check for full segment
                                        (1108)     jnc   .VBG_FULL_SEGX
                                        (1109)                                         ; Partial segment between 1 and 8
                                        (1110)     mov   A,[X+VBG_SEG_HEIGHTX]
                                        (1111)     dec   A
                                        (1112)     mov   [X+VBG_SEG_HEIGHTX],00h       ; Zero segment height
                                        (1113)     jmp   .VBG_WRITE_CHARX
                                        (1114) 
                                        (1115) .VBG_FULL_SEGX:                          ; Bargaph
                                        (1116)     sub   [X+VBG_SEG_HEIGHTX],08h       ; Subtract full segment
                                        (1117)     mov   A,07h                        ; Load full segment
                                        (1118) 
                                        (1119) .VBG_WRITE_CHARX:                        ; Write character to display
                                        (1120)     call  LCD_WriteData                ; Write value
                                        (1121)     pop   A
                                        (1122)     dec   A
                                        (1123)     dec   [X+VBG_CHAR_HEIGHTX]
                                        (1124)     jnz   .VBG_LOOPX
                                        (1125)     ret
                                        (1126) .ENDSECTION
                                        (1127) ENDIF ; SYSTEM_SMALL_MEMORY_MODEL
                                        (1128) 
                                        (1129) .SECTION
                                        (1130) ;-----------------------------------------------------------------------------
                                        (1131) ;  FUNCTION NAME: LCD_DrawVBG
                                        (1132) ;
                                        (1133) ;  DESCRIPTION:
                                        (1134) ;     Draw a vertical bargraph on the LCD with the given parameters.
                                        (1135) ;
                                        (1136) ;
                                        (1137) ;-----------------------------------------------------------------------------
                                        (1138) ;
                                        (1139) ;  FASTCALL16 ARGUMENTS:
                                        (1140) ;
                                        (1141) ;   [SP-3] => Starting row for bargraph 0 to 3
                                        (1142) ;   [SP-4] => Starting Column for bargraph 0 to 40+
                                        (1143) ;   [SP-5] => Height of bargraph in chars 1 - 4
                                        (1144) ;   [SP-6] => Position of pointer in segments 8 times height
                                        (1145) ;  RETURNS:
                                        (1146) ;
                                        (1147) ;  SIDE EFFECTS:
                                        (1148) ;    The A and X registers may be modified by this or future implementations
                                        (1149) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1150) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1151) ;    responsibility to preserve their values across calls to fastcall16 
                                        (1152) ;    functions.
                                        (1153) ;          
                                        (1154) ;    Currently only the page pointer registers listed below are modified: 
                                        (1155) ;          CUR_PP
                                        (1156) ;
                                        (1157) ;    If LCD_Init is not called before this function, the
                                        (1158) ;    bargraph will not be drawn properly.
                                        (1159) ;
                                        (1160) ; Stack offset constants
                                        (1161) VBG_ROW:        equ -3
                                        (1162) VBG_COL:            equ -4
                                        (1163) VBG_CHAR_HEIGHT:    equ -5
                                        (1164) VBG_SEG_HEIGHT:     equ -6
                                        (1165) 
                                        (1166) _LCD_DrawVBG:
                                        (1167)     RAM_PROLOGUE RAM_USE_CLASS_2
                                        (1168)     mov   X, SP
                                        (1169)     mov   A, [X+VBG_ROW]
                                        (1170)     and   A,03h                        ; Make sure only rows 0 - 3 are valid
                                        (1171) .VBG_LOOP:
                                        (1172)     push  A
                                        (1173)     index LCD_ROW_OFFSET  ; Get row offset
                                        (1174)     add   A,[X+VBG_COL]                ; Add column offset to position
                                        (1175)     call  LCD_Control                  ; Position Cursor
                                        (1176)     cmp   [X+VBG_SEG_HEIGHT],00h       ; Check for zero segs
                                        (1177)     jnz   .VBG_NZ_SEG
                                        (1178)     mov   A,' '                        ; Load space character
                                        (1179)     jmp   .VBG_WRITE_CHAR
                                        (1180) .VBG_NZ_SEG:
                                        (1181)     cmp   [X+VBG_SEG_HEIGHT],09h       ; Check for full segment
                                        (1182)     jnc   .VBG_FULL_SEG
                                        (1183)                                        ; Partial segment between 1 and 8
                                        (1184)     mov   A,[X+VBG_SEG_HEIGHT]
                                        (1185)     dec   A
                                        (1186)     mov   [X+VBG_SEG_HEIGHT],00h       ; Zero segment height
                                        (1187)     jmp   .VBG_WRITE_CHAR
                                        (1188) 
                                        (1189) .VBG_FULL_SEG:                          ; Bargaph
                                        (1190)     sub   [X+VBG_SEG_HEIGHT],08h       ; Subtract full segment
                                        (1191)     mov   A,07h                        ; Load full segment
                                        (1192) 
                                        (1193) .VBG_WRITE_CHAR:                        ; Write character to display
                                        (1194)     call  LCD_WriteData                ; Write value
                                        (1195)     pop   A
                                        (1196)     dec   A
                                        (1197)     dec   [X+VBG_CHAR_HEIGHT]
                                        (1198)     jnz   .VBG_LOOP
                                        (1199)     RAM_EPILOGUE RAM_USE_CLASS_2
                                        (1200)     ret
                                        (1201) .ENDSECTION
                                        (1202) 
                                        (1203) .SECTION
                                        (1204) ;-----------------------------------------------------------------------------
                                        (1205) ;  FUNCTION NAME: LCD_InitVBG
                                        (1206) ;
                                        (1207) ;  DESCRIPTION:
                                        (1208) ;     Initialize the vertical bargraph characters.
                                        (1209) ;
                                        (1210) ;-----------------------------------------------------------------------------
                                        (1211) ;
                                        (1212) ;  ARGUMENTS:  none
                                        (1213) ;
                                        (1214) ;  RETURNS:  none
                                        (1215) ;
                                        (1216) ;  SIDE EFFECTS:
                                        (1217) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (1218) ;    Only one type of bargraph (horizontal or vertical) may be used
                                        (1219) ;    at a time since they each require their own set of characters.
                                        (1220) ;
                                        (1221) ;  SIDE EFFECTS:
                                        (1222) ;    The A and X registers may be modified by this or future implementations
                                        (1223) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1224) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1225) ;    responsibility to preserve their values across calls to fastcall16 
                                        (1226) ;    functions.
                                        (1227) ;          
                                        (1228) ;    Currently only the page pointer registers listed below are modified: 
                                        (1229) ;          CUR_PP
                                        (1230) ;
                                        (1231) ; Stack offset constants
                                        (1232) VBGDATA_CTR:      equ    00h           ; Char data count stack offset
                                        (1233) VBG_BYTES:        equ    01h           ; Byte counter stack offset
                                        (1234) 
                                        (1235)  LCD_InitVBG:
                                        (1236) _LCD_InitVBG:
                                        (1237)     RAM_PROLOGUE RAM_USE_CLASS_2
                                        (1238)     mov   X,SP                         ; Get location of stack
                                        (1239)     push  A                            ; Create 2 locations
                                        (1240)     push  A
                                        (1241) 
                                        (1242)     mov   A,LCD_CG_RAM_OFFSET              ; Setup pointer
                                        (1243)     call  LCD_Control                  ; Position the CG pointer
                                        (1244)     mov   [X+VBGDATA_CTR],01h          ; Reset data counter
                                        (1245) 
                                        (1246)  .VBG_Loop1:                            ; loop once for each 8 characters
                                        (1247)     mov   [X+VBG_BYTES],08h            ; Load cycle pointer
                                        (1248)  .VBG_Loop2:                            ; Loop once for each line in character (8 times)
                                        (1249)     mov   A,[X+VBGDATA_CTR]
                                        (1250)     cmp   A,[X+VBG_BYTES]
                                        (1251)     jnc   .VBG_SOLID
                                        (1252)     mov   A,00h                        ; Empty line
                                        (1253)     jmp   .VBG_Load                     ; Jump to load the bargraph
                                        (1254) .VBG_SOLID:
                                        (1255)     mov   A,FFh                        ; Load solid line
                                        (1256) .VBG_Load:
                                        (1257)     call  LCD_WriteData                ; character data
                                        (1258)     dec   [X+VBG_BYTES]                ; Dec byte counter
                                        (1259)     jnz   .VBG_Loop2                    ; End Loop 2
                                        (1260)     inc   [X+VBGDATA_CTR]
                                        (1261)     cmp   [X+VBGDATA_CTR],09h
                                        (1262)     jnz   .VBG_Loop1                    ; End Loop1
                                        (1263) 
                                        (1264)     pop  A
                                        (1265)     pop  A
                                        (1266)     mov  A,LCD_DISP_ON                    ; Turn on display, don't really
                                        (1267)     call LCD_Control                   ; need this.
                                        (1268)     RAM_EPILOGUE RAM_USE_CLASS_2
                                        (1269)     ret
                                        (1270) .ENDSECTION
                                        (1271) 
                                        (1272) ;-----------------------------------------------------------------------------
                                        (1273) ;  FUNCTION NAME: LCD_InitBG
                                        (1274) ;
                                        (1275) ;  DESCRIPTION:
                                        (1276) ;     Initialize horizontal bargraph characters
                                        (1277) ;
                                        (1278) ;-----------------------------------------------------------------------------
                                        (1279) ;
                                        (1280) ;  ARGUMENTS:
                                        (1281) ;     A = type  0 = full                   |||||||||........
                                        (1282) ;               1 = single vertical line   ..........|......
                                        (1283) ;
                                        (1284) ;  RETURNS:
                                        (1285) ;
                                        (1286) ;  SIDE EFFECTS:
                                        (1287) ;    The A and X registers may be modified by this or future implementations
                                        (1288) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1289) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1290) ;    responsibility to preserve their values across calls to fastcall16 
                                        (1291) ;    functions.
                                        (1292) ;          
                                        (1293) ;    Currently only the page pointer registers listed below are modified: 
                                        (1294) ;          CUR_PP
                                        (1295) ;
                                        (1296) ;    Only one type of bargraph (horizontal or vertical) may be used
                                        (1297) ;    at a time since they each require their own set of characters.
                                        (1298) ;
                                        (1299) ;  THEORY of OPERATION or PROCEDURE:
                                        (1300) ;    This function writes to the LCD character RAM to generate 8 custom
                                        (1301) ;    characters used to generated one of two horizontal bargraphs.
                                        (1302) ;
                                        (1303) .LITERAL
                                        (1304)  LCD_BG_TYPE1:: ; ....., |...., ||..., |||.., ||||., |||||, |||||
                                        (1305)      DB    00h, 10h, 18h, 1Ch, 1Eh, 1Fh, 1Fh
                                        (1306)  LCD_BG_TYPE2:: ; ....., |...., .|..., ..|.., ...|., ....|, .....
                                        (1307)     DB  00h, 10h, 08h, 04h, 02h, 01h, 00h
                                        (1308) .ENDLITERAL
                                        (1309) 
                                        (1310) .SECTION
                                        (1311) ; Stack offset constants
                                        (1312) BGDATA_PTR:   equ    00h               ; Stack offsets
                                        (1313) BGCHARS:      equ    01h
                                        (1314) BGTYPE:       equ    02h
                                        (1315) 
                                        (1316)  LCD_InitBG:
                                        (1317) _LCD_InitBG:
                                        (1318)     RAM_PROLOGUE RAM_USE_CLASS_2
                                        (1319)     mov   X,SP                         ; Get location of stack
                                        (1320)     add   SP,3
                                        (1321)     mov   [X+BGTYPE],A                 ; Store the bargraph type
                                        (1322) 
                                        (1323)     mov   A,LCD_CG_RAM_OFFSET              ; Setup pointer
                                        (1324)     call  LCD_Control                  ; Position the CG pointer
                                        (1325)     mov   [X+BGDATA_PTR],00h           ; Reset pointer to BG data
                                        (1326) 
                                        (1327)  .BG_Loop1:
                                        (1328)     mov   [X+BGCHARS],08h              ; Load cycle pointer
                                        (1329)  .BG_Loop2:
                                        (1330)     mov   A,[X+BGDATA_PTR]
                                        (1331)     cmp   [X+BGTYPE],00h               ; Check which bargraph
                                        (1332)     jnz   .BG_OTHER
                                        (1333)     index LCD_BG_TYPE1
                                        (1334)     jmp   .BG_Load
                                        (1335)  .BG_OTHER:
                                        (1336)     index LCD_BG_TYPE2
                                        (1337)  .BG_Load:
                                        (1338)     call  LCD_WriteData
                                        (1339)     dec   [X+BGCHARS]                  ; Character builder counter
                                        (1340)     jnz   .BG_Loop2
                                        (1341)     inc   [X+BGDATA_PTR]               ; Advance to next character
                                        (1342)     cmp   [X+BGDATA_PTR],07h
                                        (1343)     jnz   .BG_Loop1
                                        (1344) 
                                        (1345)     add   SP,-3
                                        (1346)     mov   A,LCD_DISP_ON
                                        (1347)     call  LCD_Control
                                        (1348)     RAM_EPILOGUE RAM_USE_CLASS_2
                                        (1349)     ret
                                        (1350) .ENDSECTION
                                        (1351) 
                                        (1352) ENDIF
                                        (1353) 
                                        (1354) ; End of File LCD.asm
FILE: .\delay.asm                       (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: delay.asm
                                        (0004) ;;
                                        (0005) ;;  DESCRIPTION: Delay functions implementation file
                                        (0006) ;;
                                        (0007) ;;-----------------------------------------------------------------------------
                                        (0008) ;;  Copyright (c) Cypress MicroSystems 2002-2006. All Rights Reserved.
                                        (0009) ;;*****************************************************************************
                                        (0010) ;;*****************************************************************************
                                        (0011) 
                                        (0012) ;-----------------------------------------------------------------------------
                                        (0013) ;  Include Files
                                        (0014) ;-----------------------------------------------------------------------------
                                        (0015) include "m8c.inc"
                                        (0016) include "memory.inc"
                                        (0017) 
                                        (0018) ;-----------------------------------------------------------------------------
                                        (0019) ;  Global Symbols
                                        (0020) ;-----------------------------------------------------------------------------
                                        (0021) export  Delay50uTimes
                                        (0022) export _Delay50uTimes
                                        (0023) 
                                        (0024) export  Delay50u
                                        (0025) export _Delay50u
                                        (0026) 
                                        (0027) export  Delay10msTimes
                                        (0028) export _Delay10msTimes
                                        (0029) 
                                        (0030) 
                                        (0031) area text(rom)
                                        (0032) .SECTION
                                        (0033) ;-----------------------------------------------------------------------------
                                        (0034) ;  FUNCTION NAME: DelaySeconds
                                        (0035) ;
                                        (0036) ;  DESCRIPTION:
                                        (0037) ;     Delay increments of 10mSeconds
                                        (0038) ;
                                        (0039) ;-----------------------------------------------------------------------------
                                        (0040) ;
                                        (0041) ;  ARGUMENTS:
                                        (0042) ;     A contains the delay multiplier
                                        (0043) ;
                                        (0044) ;  RETURNS:
                                        (0045) ;
                                        (0046) ;  SIDE EFFECTS:
                                        (0047) ;    The A and X registers may be modified by this or future implementations
                                        (0048) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0049) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0050) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0051) ;    functions.
                                        (0052) 
                                        (0053) 
                                        (0054)  Delay10msTimes:
                                        (0055) _Delay10msTimes:
                                        (0056)     RAM_PROLOGUE RAM_USE_CLASS_1
04F3: 08       PUSH  A                  (0057) 	push A
                                        (0058) 
04F4: 50 C8    MOV   A,0xC8             (0059) 	mov A, 200
                                        (0060) 	DELAY50US:
04F6: 90 16    CALL  _Delay50u          (0061)     call  Delay50u
04F8: 78       DEC   A                  (0062)     dec   A
04F9: BF FC    JNZ   0x04F6             (0063)     jnz   DELAY50US
                                        (0064) 
04FB: 18       POP   A                  (0065) 	pop A
04FC: 78       DEC   A                  (0066) 	dec   A
04FD: BF F5    JNZ   __UserModules_end|_Delay10msTimes|Delay10msTimes|__text_start(0067)     jnz   Delay10msTimes
                                        (0068) 
                                        (0069)     RAM_EPILOGUE RAM_USE_CLASS_1
04FF: 7F       RET                      (0070)     ret
                                        (0071) .ENDSECTION
                                        (0072) 
                                        (0073) 
                                        (0074) 
                                        (0075) 
                                        (0076) .SECTION
                                        (0077) ;-----------------------------------------------------------------------------
                                        (0078) ;  FUNCTION NAME: Delay50uTimes
                                        (0079) ;
                                        (0080) ;  DESCRIPTION:
                                        (0081) ;     Delay increments of 50uSeconds
                                        (0082) ;
                                        (0083) ;-----------------------------------------------------------------------------
                                        (0084) ;
                                        (0085) ;  ARGUMENTS:
                                        (0086) ;     A contains the delay multiplier
                                        (0087) ;
                                        (0088) ;  RETURNS:
                                        (0089) ;
                                        (0090) ;  SIDE EFFECTS:
                                        (0091) ;    The A and X registers may be modified by this or future implementations
                                        (0092) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0093) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0094) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0095) ;    functions.
                                        (0096) ;
                                        (0097) ;
                                        (0098) 
                                        (0099)  Delay50uTimes:
                                        (0100) _Delay50uTimes:
                                        (0101)     RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0102) 
0500: 90 0C    CALL  _Delay50u          (0103)     call  Delay50u
0502: 78       DEC   A                  (0104) 	dec A
0503: BF FC    JNZ   _Delay50uTimes     (0105)     jnz   Delay50uTimes
                                        (0106) 
                                        (0107) 	
                                        (0108)     RAM_EPILOGUE RAM_USE_CLASS_1
0505: 7F       RET                      (0109)     ret
                                        (0110) 
                                        (0111) .ENDSECTION
                                        (0112) 
                                        (0113) ;-----------------------------------------------------------------------------
                                        (0114) ;  FUNCTION NAME: Delay50u
                                        (0115) ;
                                        (0116) ;  DESCRIPTION:
                                        (0117) ;     Delay 50uSec for any clock frequency from 1.5MHz to 24MHz
                                        (0118) ;     Slower clock frequencies the delay will be;
                                        (0119) ;           1.5
                                        (0120) ;        -------------- * 50uSec
                                        (0121) ;        clock_freq(MHz)
                                        (0122) ;
                                        (0123) ;
                                        (0124) ;-----------------------------------------------------------------------------
                                        (0125) ;
                                        (0126) ;  ARGUMENTS: none
                                        (0127) ;
                                        (0128) ;  RETURNS: none
                                        (0129) ;
                                        (0130) ;  SIDE EFFECTS:
                                        (0131) ;    The A and X registers may be modified by this or future implementations
                                        (0132) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0133) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0134) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0135) ;    functions.
                                        (0136) ;
                                        (0137) ;  THEORY of OPERATION or PROCEDURE:
                                        (0138) ;
                                        (0139) .LITERAL
                                        (0140)  Delay50u_Table::
                                        (0141)      DB    08h,  19h,   3Ah,   7Ch,   01h,    01h,    01h,   01h
                                        (0142) ;         3MHz, 6MHz, 12MHz, 24MHz, 1.5MHz, 750kHz, 188kHz, 94kHz
                                        (0143) .ENDLITERAL
                                        (0144) .SECTION
                                        (0145) 
                                        (0146)   Delay50u:
                                        (0147)  _Delay50u:                      ; [11]  Call
                                        (0148)     RAM_PROLOGUE RAM_USE_CLASS_1
050E: 08       PUSH  A                  (0149)     push  A
050F: 71 10    OR    F,0x10             
                                        (0150)     M8C_SetBank1                       ; [4]
0511: 5D E0    MOV   A,REG[0xE0]        (0151)     mov   A, reg[OSC_CR0]              ; [6] Get delay value
0513: 70 EF    AND   F,0xEF             
                                        (0152)     M8C_SetBank0                       ; [4]
0515: 21 07    AND   A,0x7              (0153)     and   A,07h                        ; [4] Mask off only the clock bits
0517: 39 05    CMP   A,0x5              (0154)     cmp   A,05h
0519: D0 06    JNC   0x0520             (0155)     jnc   Delay50u_End
051B: FF E9    INDEX Delay50u_Table     (0156)     index Delay50u_Table               ; [13] Get delay value
                                        (0157) Delay50u_Loop:                         ;
051D: 78       DEC   A                  (0158)     dec   A                            ; [4]
051E: BF FE    JNZ   0x051D             (0159)     jnz   Delay50u_Loop                ; [5]
                                        (0160) Delay50u_End:
0520: 18       POP   A                  (0161)     pop   A
                                        (0162)     RAM_EPILOGUE RAM_USE_CLASS_1
0521: 7F       RET                      (0163)     ret
FILE: .\main.asm                        (0001) ;-----------------------------------------------------------------------------
                                        (0002) ; Assembly main line
                                        (0003) ;-----------------------------------------------------------------------------
                                        (0004) 
                                        (0005) include "m8c.inc"       ; part specific constants and macros
                                        (0006) include "memory.inc"    ; Constants & macros for SMM/LMM and Compiler
                                        (0007) include "PSoCAPI.inc"   ; PSoC API definitions for all User Modules
                                        (0008) include "nrf.inc"		; Symbolic names for nRF's commands and registers addresses
                                        (0009) 
                                        (0010) export _main
                                        (0011) export rxrdy_flag
                                        (0012) 
                                        (0013) ;; GPIO macros
                                        (0014) macro SetCE_High
                                        (0015) 	or		[Port_0_Data_SHADE], 2h				; OR CE pin with shadow reg
                                        (0016) 	mov		A, [Port_0_Data_SHADE]				; Load shadow reg in A
                                        (0017) 	mov		reg[CE_Data_ADDR], A				; Store data in port 0
                                        (0018) endm
                                        (0019) 
                                        (0020) macro SetCE_Low
                                        (0021) 	or		[Port_0_Data_SHADE], ~2h			; OR not-CE with shadow reg
                                        (0022) 	mov		A, [Port_0_Data_SHADE]				; Load shadow reg in A
                                        (0023) 	mov		reg[CE_Data_ADDR], A				; Store data in port 0
                                        (0024) endm
                                        (0025) 
                                        (0026) macro SetCSN_High
                                        (0027) 	or		[Port_0_Data_SHADE], 4h				; OR CSN pin with shadow reg
                                        (0028) 	mov		A, [Port_0_Data_SHADE]				; Load shadow reg in A
                                        (0029) 	mov		reg[CSN_Data_ADDR], A				; Store data in port 0
                                        (0030) endm
                                        (0031) 
                                        (0032) macro SetCSN_Low
                                        (0033) 	and		[Port_0_Data_SHADE], ~4h			; OR not-CSN with shadow reg
                                        (0034) 	mov		A, [Port_0_Data_SHADE]				; Load shadow reg in A
                                        (0035) 	mov		reg[CSN_Data_ADDR], A				; Store data in port 0
                                        (0036) endm
                                        (0037) 
                                        (0038) ;; RAM variables 
                                        (0039) area bss(ram, rel)
                                        (0040) 
                                        (0041) rxrdy_flag: blk 1	; interrupt flag
                                        (0042) 
                                        (0043) pipe0_data: blk 10	; Allocate 10 bytes for each transmitter 
                                        (0044) pipe1_data: blk 10	
                                        (0045) pipe2_data: blk 10
                                        (0046) pipe3_data: blk 10
                                        (0047) pipe4_data: blk 10
                                        (0048) pipe5_data: blk 10
                                        (0049) 
                                        (0050) pointer: blk 1		; Byte used as a pointer for Source/Destination Indirect Post Increment addressing
                                        (0051) 					
                                        (0052) row1Index: blk 1	; indexes to alternate values on LCD
                                        (0053) row2Index: blk 1	; 
                                        (0054) 
                                        (0055) temp: blk 1			; Temporary storage
                                        (0056) 
                                        (0057) ;; ROM constants
                                        (0058) area table(rom,rel)
                                        (0059) pipes_table:
                                        (0060) 	DB pipe0_data, pipe1_data, pipe2_data, pipe3_data, pipe4_data, pipe5_data	; Pointers to pipes data
                                        (0061) area text(rom, rel)
                                        (0062) .LITERAL 
                                        (0063) default_string:
                                        (0064) asciz "N/A"
                                        (0065) .ENDLITERAL 
                                        (0066) 
                                        (0067) ;############################## MAIN PROGRAM ###############################
                                        (0068) _main:
                                        (0069) ;-------------------------------- RAM INIT ---------------------------------
                                        (0070) 	
0526: 55 47 00 MOV   [rxrdy_flag+62],0x0(0071) 	mov [row1Index], 0	; init display indexes to the first 2 elements
0529: 55 48 01 MOV   [rxrdy_flag+63],0x1(0072) 	mov [row2Index], 1
052C: 55 09 00 MOV   [rxrdy_flag],0x0   (0073) 	mov [rxrdy_flag], 0	; init rxrdy flag to 0
                                        (0074) 
                                        (0075) ; Init the 6 pipes buffer to a default value ("NA")
                                        (0076) 
052F: 50 00    MOV   A,0x0              (0077) 	mov A, 0	; Push pipe buffer index on the stack (init to 0)
0531: 08       PUSH  A                  (0078) 	push A
                                        (0079) .init_buffers:
0532: 20       POP   X                  (0080) 	pop X				; Pop pipe index to X
0533: 5B       MOV   A,X                (0081) 	mov A, X			; Transfer it to A
0534: 39 06    CMP   A,0x6              (0082) 	cmp A, 0x6			; End when the default string is copied to all 6 buffers
0536: A0 13    JZ    0x054A             (0083) 	jz .end_init_buff
0538: F2 53    INDEX 0x078D             (0084) 	index pipes_table	; Get next pipe buffer address
053A: 53 46    MOV   [rxrdy_flag+61],A  (0085) 	mov [pointer], A	; Store it to the pointer
053C: 75       INC   X                  (0086) 	inc X				; Increase pipe index
053D: 10       PUSH  X                  (0087) 	push X				; Preserve it on the stack
053E: 57 00    MOV   X,0x0              (0088) 	mov X, 0			; Init x to 0, now the character index
                                        (0089) .init_pipe_buff:
0540: 5B       MOV   A,X                (0090) 	mov A, X				; Transfer character index to A
0541: FF DF    INDEX 0x0522             (0091) 	index default_string	; Get current character from the default string
0543: 3F 46    MVI   [rxrdy_flag+61],A  (0092) 	mvi [pointer], A		; Store it to the buffer, increasing the pointer
0545: AF EC    JZ    0x0532             (0093) 	jz .init_buffers		; End on null character and init next buffer
0547: 75       INC   X                  (0094) 	inc X					; Increase character index
0548: 8F F7    JMP   0x0540             (0095) 	jmp .init_pipe_buff		; write next character
                                        (0096) .end_init_buff:
                                        (0097) 
                                        (0098) 	
                                        (0099) ;------------------------------ HARDWARE SETUP-----------------------------
                                        (0100)    
                                        (0101) ; Interrupts 
054A: 43 01 08 OR    REG[0x1],0x8       (0102) 	or reg[PRT0IE], 0x08 						; Enable int on IRQ pin
054D: 43 E0 20 OR    REG[0xE0],0x20     
0550: 71 01    OR    F,0x1              
                                        (0103) 	M8C_EnableIntMask INT_MSK0, INT_MSK0_GPIO 	; Enable GPIO int
                                        (0104) 	M8C_EnableGInt 								; Enable Global Interrupts
                                        (0105) 
                                        (0106) ; SPI init 
0552: 50 00    MOV   A,0x0              (0107) 	mov A,  SPIM_SPIM_MODE_0 | SPIM_SPIM_MSB_FIRST	; Leading edge latch, MSB first
0554: 7C 02 E2 LCALL _SPIM_Start        (0108) 	lcall SPIM_Start								; Start SPI module
                                        (0109) 
                                        (0110) ; LCD 
0557: 7C 04 55 LCALL LCD_Init|LCD_Start|_LCD_Init|_LCD_Start(0111) 	lcall LCD_Start 			; Init and start the LCD module
                                        (0112) 
                                        (0113) ; Sleep Timer 
055A: 7C 03 08 LCALL _SleepTimer_EnableInt(0114) 	lcall SleepTimer_EnableInt	; Enable Sleep Timer interrupt
055D: 7C 03 10 LCALL _SleepTimer_Start  (0115) 	lcall SleepTimer_Start		; Start Sleep Timer
0560: 50 10    MOV   A,0x10             (0116) 	mov A, 0x10
0562: 7C 03 4E LCALL _SleepTimer_SetTimer(0117) 	lcall SleepTimer_SetTimer	; Set it to count 2 secs
                                        (0118) 	
                                        (0119) ; Nrf Module init 
0565: 50 0A    MOV   A,0xA              (0120) 	mov A, 0x0A					; Give 100 ms to the nRF module for power on reset
0567: 7C 04 F3 LCALL __UserModules_end|_Delay10msTimes|Delay10msTimes|__text_start(0121) 	lcall Delay10msTimes
056A: 90 7A    CALL  0x05E6             (0122) 	call InitNrfRx				; Configure and start the nRF in RX mode
                                        (0123) 	
056C: 80 61    JMP   0x05CE             (0124) 	jmp .update_display			; start the program with display update, then go through main loop
                                        (0125) 	
                                        (0126) 
                                        (0127) ;------------------------------- MAIN LOOP -----------------------------------	
                                        (0128) 
                                        (0129) .main_loop:
056E: 51 09    MOV   A,[rxrdy_flag]     (0130) 	mov A, [rxrdy_flag] 		; Check RX Ready status
0570: B0 23    JNZ   0x0594             (0131) 	jnz .get_rx_data			; Go get new data if available
0572: 7C 03 51 LCALL _SleepTimer_bGetTimer(0132) 	lcall SleepTimer_bGetTimer	; Get the Sleep Timer count
0575: 39 00    CMP   A,0x0              (0133) 	cmp A, 0	    			; Check if it expired
0577: BF F6    JNZ   0x056E             (0134) 	jnz .main_loop				; If not, jump back to beginning of main loop
                                        (0135) 
                                        (0136) 	;----- Increase indexes to alternate values on LCD -----
                                        (0137) .change_display_idx:
0579: 76 47    INC   [rxrdy_flag+62]    (0138) 	inc [row1Index]				; Increment row index 1
057B: 3C 47 06 CMP   [rxrdy_flag+62],0x6(0139) 	cmp [row1Index], 6			; check if out of bound (>5)
057E: B0 04    JNZ   0x0583             (0140) 	jnz .inc_rowI2				; Skip to 2nd row index if ok
0580: 55 47 00 MOV   [rxrdy_flag+62],0x0(0141) 	mov [row1Index], 0			; Otherwise reset it to 0
                                        (0142) .inc_rowI2:
0583: 76 48    INC   [rxrdy_flag+63]    (0143) 	inc [row2Index]				; Increment row index 2
0585: 3C 48 06 CMP   [rxrdy_flag+63],0x6(0144) 	cmp [row2Index], 6			; check if out of bound (>5)
0588: B0 04    JNZ   0x058D             (0145) 	jnz .reload_timer			; Skip to reload timer if ok
058A: 55 48 00 MOV   [rxrdy_flag+63],0x0(0146) 	mov [row2Index], 0			; Otherwise reset it to 0
                                        (0147) .reload_timer:
058D: 50 10    MOV   A,0x10             (0148) 	mov A, 0x10
058F: 7C 03 4E LCALL _SleepTimer_SetTimer(0149) 	lcall SleepTimer_SetTimer	; Set timer to count 2 secs
0592: 80 3B    JMP   0x05CE             (0150) 	jmp .update_display			; Jump to update display
                                        (0151) 
                                        (0152) 		;----- Get data from the nRF FIFO -----
                                        (0153) .get_rx_data:	
0594: 55 09 00 MOV   [rxrdy_flag],0x0   (0154) 	mov [rxrdy_flag], 0			; Clear rx ready flag
                                        (0155) .loop_rx_data:
0597: 50 07    MOV   A,0x7              (0156) 	mov A, STATUS 				; Get status register content
0599: 90 F9    CALL  0x0694             (0157) 	call NrfGetReg				; 
059B: 21 0E    AND   A,0xE              (0158) 	and A, 0x0e					; Mask data pipe number
059D: 70 FB    AND   F,0xFB             (0159) 	and F, 0xfb 				; Clear carry 
059F: 6D       RRC   A                  (0160) 	rrc A						; Rotate right -> get pipe number in A
05A0: 39 07    CMP   A,0x7              (0161) 	cmp A, 0x07					; Check if FIFO empty
05A2: A0 12    JZ    0x05B5             (0162) 	jz .clear_buffer			; End read payload if empty
05A4: 08       PUSH  A                  (0163) 	push A						; Store pipe number on stack
05A5: 50 60    MOV   A,0x60             (0164) 	mov A, R_RX_PL_WID			; Get payload width in bytes
05A7: 90 EB    CALL  0x0694             (0165) 	call NrfGetReg
05A9: 5C       MOV   X,A                (0166) 	mov X, A				    ; Transfer payload width in X
05AA: 18       POP   A                  (0167) 	pop A						; Pop the pipe number back in A
05AB: 91 35    CALL  0x06E2             (0168) 	call ReadPayload			; Read the payload from nRF
05AD: 50 27    MOV   A,0x27             (0169) 	mov A, W_REGISTER | STATUS 	; Write 0x40 to config register to ACK interrupt
05AF: 57 40    MOV   X,0x40             (0170) 	mov X, MASK_RX_DR
05B1: 90 C2    CALL  0x0675             (0171) 	call NrfSetReg				; Ack interrupt
05B3: 8F E3    JMP   0x0597             (0172) 	jmp .loop_rx_data			; check if more payloads are on FIFO	
                                        (0173) .clear_buffer:	
05B5: 91 83    CALL  0x073A             (0174) 	call WaitBufferFree	
05B7: 26 05 FB AND   [0x5],0xFB         
05BA: 51 05    MOV   A,[0x5]            
05BC: 60 00    MOV   REG[0x0],A         
                                        (0175) 	SetCSN_Low
05BE: 50 E2    MOV   A,0xE2             (0176) 	mov A, FLUSH_RX
05C0: 7C 02 EB LCALL _SPIM_SendTxData   (0177) 	lcall SPIM_SendTxData	; Send value over SPI
05C3: 91 75    CALL  0x073A             (0178) 	call WaitBufferFree		; Wait until tx buffer is empty
05C5: 2E 05 04 OR    [0x5],0x4          
05C8: 51 05    MOV   A,[0x5]            
05CA: 60 00    MOV   REG[0x0],A         
                                        (0179) 	SetCSN_High				; Set chip select high (inactive)
05CC: 91 B0    CALL  0x077E             (0180) 	call Read_All_Regs
                                        (0181) ;----- Refresh the display if timer expired or if data has changed -----
                                        (0182) .update_display:			
05CE: 50 00    MOV   A,0x0              (0183) 	mov A, 0				
05D0: 57 00    MOV   X,0x0              (0184) 	mov X, 0
05D2: 7C 04 C5 LCALL _LCD_Position      (0185) 	lcall LCD_Position
05D5: 51 47    MOV   A,[rxrdy_flag+62]  (0186) 	mov A, [row1Index]
05D7: 91 69    CALL  0x0742             (0187) 	call Write_To_LCD
05D9: 50 01    MOV   A,0x1              (0188) 	mov A, 1
05DB: 57 00    MOV   X,0x0              (0189) 	mov X, 0
05DD: 7C 04 C5 LCALL _LCD_Position      (0190) 	lcall LCD_Position
05E0: 51 48    MOV   A,[rxrdy_flag+63]  (0191) 	mov A, [row2Index]
05E2: 91 5E    CALL  0x0742             (0192) 	call Write_To_LCD
                                        (0193)     
05E4: 8F 89    JMP   0x056E             (0194) 	jmp .main_loop
05E6: 2E 05 04 OR    [0x5],0x4          
05E9: 51 05    MOV   A,[0x5]            
05EB: 60 00    MOV   REG[0x0],A         
                                        (0195) 	
                                        (0196) ;-------------------------------- END MAIN -----------------------------------	
                                        (0197) 
                                        (0198) ;-----------------------------------------------------------------------------
                                        (0199) ;  FUNCTION NAME: InitNrfRx
                                        (0200) ;
                                        (0201) ;  DESCRIPTION:
                                        (0202) ;     Initialize and start the nRF module as a receiver
                                        (0203) ;
                                        (0204) ;-----------------------------------------------------------------------------
                                        (0205) ;
                                        (0206) ;  ARGUMENTS:
                                        (0207) ;     none
                                        (0208) ;
                                        (0209) ;  RETURNS:
                                        (0210) ;	  none
                                        (0211) ;-----------------------------------------------------------------------------
                                        (0212) InitNrfRx:
                                        (0213) 	SetCSN_High			; Set CSN pin high
05ED: 50 14    MOV   A,0x14             (0214) 	mov A, 20			; load accumulator with delay counter
05EF: 9F 0F    CALL  _Delay50uTimes     (0215) 	call Delay50uTimes	; Wait 1 ms 
                                        (0216) 	
                                        (0217) 	;-- Configuration registers --;
05F1: 50 20    MOV   A,0x20             (0218) 	mov A, W_REGISTER | CONFIG 	; Set write to config register
05F3: 57 39    MOV   X,0x39             (0219) 	mov X, 0x39				   	; Set register value ( Rx ready int, CRC, Rx mode)
05F5: 90 7E    CALL  0x0675             (0220) 	call NrfSetReg				; Write to SPI
                                        (0221) 	
05F7: 50 21    MOV   A,0x21             (0222) 	mov A, W_REGISTER | EN_AA		; Enable auto ack
05F9: 57 3F    MOV   X,0x3F             (0223) 	mov X, 0x3f						; Enable AA on all pipes
05FB: 90 78    CALL  0x0675             (0224) 	call NrfSetReg
                                        (0225) 	
                                        (0226) 	
05FD: 50 22    MOV   A,0x22             (0227) 	mov A, W_REGISTER | EN_RXADDR	; Set write to enabled rx address register
05FF: 57 3F    MOV   X,0x3F             (0228) 	mov X, 0x3f						; Enable all 6 registers
0601: 90 72    CALL  0x0675             (0229) 	call NrfSetReg					; Write to SPI
                                        (0230) 	
0603: 50 23    MOV   A,0x23             (0231) 	mov A, W_REGISTER | SETUP_AW	; Set write to address width register
0605: 57 03    MOV   X,0x3              (0232) 	mov X, 0x03						; Set width to 5
0607: 90 6C    CALL  0x0675             (0233) 	call NrfSetReg					; Write to SPI
                                        (0234) 	
0609: 50 24    MOV   A,0x24             (0235) 	mov A, W_REGISTER | SETUP_RETR	; Set write to retransmit register
060B: 57 00    MOV   X,0x0              (0236) 	mov X, 0x00						; disable retransmit
060D: 90 66    CALL  0x0675             (0237) 	call NrfSetReg					; Write to SPI
                                        (0238) 	
060F: 50 25    MOV   A,0x25             (0239) 	mov A, W_REGISTER | RF_CH		; Set write to rf channel register
0611: 57 05    MOV   X,0x5              (0240) 	mov X, 0x05						; Set channel to 5
0613: 90 60    CALL  0x0675             (0241) 	call NrfSetReg					; Write to SPI
                                        (0242) 	
0615: 50 26    MOV   A,0x26             (0243) 	mov A, W_REGISTER | RF_SETUP	; Set write to rf setup register
0617: 57 20    MOV   X,0x20             (0244) 	mov X, 0x20						; RF data rate to 250kbps, output power to 0dBm
0619: 90 5A    CALL  0x0675             (0245) 	call NrfSetReg					; Write to SPI
                                        (0246) 	
061B: 50 3C    MOV   A,0x3C             (0247) 	mov A, W_REGISTER | DYNPD		; Set write to dynamic payload register
061D: 57 3F    MOV   X,0x3F             (0248) 	mov X, 0x3f						; Enable dynamic payload on all channels
061F: 90 54    CALL  0x0675             (0249) 	call NrfSetReg					; Write to SPI
                                        (0250) 	
0621: 50 3D    MOV   A,0x3D             (0251) 	mov A, W_REGISTER | FEATURE		; Set write to feature register
0623: 57 04    MOV   X,0x4              (0252) 	mov X, 0x04						; Enable dynamic payload length & ack
0625: 90 4E    CALL  0x0675             (0253) 	call NrfSetReg					; Write to SPI
                                        (0254) 	
                                        (0255) 	;-------- Set Rx Address --------;
0627: 4F       MOV   X,SP               (0256) 	mov X, SP
0628: 5A 46    MOV   [rxrdy_flag+61],X  (0257) 	mov [pointer], X 	; store sp (stack frame address) in the pointer
062A: 50 00    MOV   A,0x0              (0258) 	mov A, 0x00			; push the 5 address bytes on stack
062C: 08       PUSH  A                  (0259) 	push A
062D: 50 18    MOV   A,0x18             (0260) 	mov A, 0x18
062F: 08       PUSH  A                  (0261) 	push A
0630: 50 EF    MOV   A,0xEF             (0262) 	mov A, 0xef
0632: 08       PUSH  A                  (0263) 	push A
0633: 50 CD    MOV   A,0xCD             (0264) 	mov A, 0xcd
0635: 08       PUSH  A                  (0265) 	push A
0636: 50 AB    MOV   A,0xAB             (0266) 	mov A, 0xab
0638: 08       PUSH  A                  (0267) 	push A
                                        (0268) 	
0639: 10       PUSH  X                  (0269) 	push X		 					; push the initial sp to repeat below without unwinding
                                        (0270) 	
063A: 50 2A    MOV   A,0x2A             (0271) 	mov A, W_REGISTER | RX_ADDR_P0	; Load the write to pipe 0 rx address command in A
063C: 57 05    MOV   X,0x5              (0272) 	mov X, 5						; load X with the number of values to send
063E: 90 7F    CALL  0x06BF             (0273) 	call SendBytes					; Send command and address over SPI
                                        (0274) 	
0640: 20       POP   X                  (0275) 	pop X				; Pop sp (bottom of stack frame address) back in X
0641: 77 00    INC   [X+0]              (0276) 	inc [X]				; Increment the element at the bottom (nrf address LSByte)
0643: 5A 46    MOV   [rxrdy_flag+61],X  (0277) 	mov [pointer], X	; Store the bottom of stack frame address in pointer
                                        (0278) 	
0645: 57 05    MOV   X,0x5              (0279) 	mov X, 5						; Load X with the number of values to send
0647: 50 2B    MOV   A,0x2B             (0280) 	mov A, W_REGISTER | RX_ADDR_P1 	; Load the write to pipe 1 rx address command in A
0649: 90 74    CALL  0x06BF             (0281) 	call SendBytes 					; Send command and address over SPI
064B: 38 FB    ADD   SP,0xFB            (0282) 	add SP, 0xFB					; substract 5 to stack pointer / remove 5 bytes address
                                        (0283) 	
064D: 50 2C    MOV   A,0x2C             (0284) 	mov A, W_REGISTER | RX_ADDR_P2	; Load the write to pipe 2 rx address command in A
064F: 57 02    MOV   X,0x2              (0285) 	mov X, 0x02						; Set value to 0x02
0651: 90 22    CALL  0x0675             (0286) 	call NrfSetReg					; Write to nrf register
                                        (0287) 	
0653: 50 2D    MOV   A,0x2D             (0288) 	mov A, W_REGISTER | RX_ADDR_P3	; Load the write to pipe 3 rx address command in A
0655: 57 03    MOV   X,0x3              (0289) 	mov X, 0x03						; Set value to 0x03
0657: 90 1C    CALL  0x0675             (0290) 	call NrfSetReg					; Write to nrf register
                                        (0291) 	
0659: 50 2E    MOV   A,0x2E             (0292) 	mov A, W_REGISTER | RX_ADDR_P4	; Load the write to pipe 4 rx address command in A
065B: 57 04    MOV   X,0x4              (0293) 	mov X, 0x04						; Set value to 0x04
065D: 90 16    CALL  0x0675             (0294) 	call NrfSetReg					; Write to nrf register
                                        (0295) 	
065F: 50 2F    MOV   A,0x2F             (0296) 	mov A, W_REGISTER | RX_ADDR_P5	; Load the write to pipe 5 rx address command in A
0661: 57 05    MOV   X,0x5              (0297) 	mov X, 0x05						; Set value to 0x05
0663: 90 10    CALL  0x0675             (0298) 	call NrfSetReg					; Write to nrf register
                                        (0299) 	
                                        (0300) 	;-------- Power on --------;
0665: 50 20    MOV   A,0x20             (0301) 	mov A, W_REGISTER | CONFIG
0667: 57 3B    MOV   X,0x3B             (0302) 	mov X, 0x3b						; RX Ready int enabled, CRC enabled, power on, rx mode
0669: 90 0A    CALL  0x0675             (0303) 	call NrfSetReg	
066B: 2E 05 02 OR    [0x5],0x2          
066E: 51 05    MOV   A,[0x5]            
0670: 60 00    MOV   REG[0x0],A         
                                        (0304) 	
                                        (0305) 	SetCE_High						; Set CE high - Waiting for rx	
                                        (0306) 	
                                        (0307) 	; Testing - Read registers:
0672: 91 0A    CALL  0x077E             (0308) 	call Read_All_Regs
0674: 7F       RET                      (0309) 	ret 							; End configs
                                        (0310) 	
                                        (0311) ;-----------------------------------------------------------------------------
                                        (0312) ;  FUNCTION NAME: NrfSetReg
                                        (0313) ;
                                        (0314) ;  DESCRIPTION:
                                        (0315) ;     Write a byte to the specified nRF module register 
                                        (0316) ;
                                        (0317) ;-----------------------------------------------------------------------------
                                        (0318) ;
                                        (0319) ;  ARGUMENTS:
                                        (0320) ;     Register address / command in A
                                        (0321) ;	  Value in X
                                        (0322) ;
                                        (0323) ;  RETURNS:
                                        (0324) ;	  none
                                        (0325) ;-----------------------------------------------------------------------------
                                        (0326) NrfSetReg:
0675: 10       PUSH  X                  (0327) 	push X					; Preserve registers
0676: 08       PUSH  A                  (0328) 	push A
0677: 26 05 FB AND   [0x5],0xFB         
067A: 51 05    MOV   A,[0x5]            
067C: 60 00    MOV   REG[0x0],A         
                                        (0329) 	SetCSN_Low				; Set chip select low (active)
067E: 90 BA    CALL  0x073A             (0330) 	call WaitBufferFree		; Wait until tx buffer is empty
0680: 18       POP   A                  (0331) 	pop A					; Restore command in A
0681: 7C 02 EB LCALL _SPIM_SendTxData   (0332) 	lcall SPIM_SendTxData	; Send value over SPI
0684: 90 B4    CALL  0x073A             (0333) 	call WaitBufferFree		; Wait until tx buffer is empty
0686: 18       POP   A                  (0334) 	pop A					; Restore nRF register value in A
0687: 7C 02 EB LCALL _SPIM_SendTxData   (0335) 	lcall SPIM_SendTxData	; Send value over SPI
068A: 90 AE    CALL  0x073A             (0336) 	call WaitBufferFree		; Wait until tx buffer is empty
068C: 2E 05 04 OR    [0x5],0x4          
068F: 51 05    MOV   A,[0x5]            
0691: 60 00    MOV   REG[0x0],A         
                                        (0337) 	SetCSN_High				; Set chip select high (inactive)
0693: 7F       RET                      (0338) 	ret
                                        (0339) ;-----------------------------------------------------------------------------
                                        (0340) ;  FUNCTION NAME: NrfGetReg
                                        (0341) ;
                                        (0342) ;  DESCRIPTION:
                                        (0343) ;     Get a one byte register value from the nRF 
                                        (0344) ;
                                        (0345) ;-----------------------------------------------------------------------------
                                        (0346) ;
                                        (0347) ;  ARGUMENTS:
                                        (0348) ;     Register adress in A
                                        (0349) ;
                                        (0350) ;  RETURNS:
                                        (0351) ;	  Register value in A
                                        (0352) ;-----------------------------------------------------------------------------	
                                        (0353) NrfGetReg:
0694: 08       PUSH  A                  (0354) 	push A
0695: 26 05 FB AND   [0x5],0xFB         
0698: 51 05    MOV   A,[0x5]            
069A: 60 00    MOV   REG[0x0],A         
                                        (0355) 	SetCSN_Low
069C: 90 9C    CALL  0x073A             (0356) 	call WaitBufferFree		; Wait until tx buffer is empty
069E: 18       POP   A                  (0357) 	pop A
069F: 7C 02 EB LCALL _SPIM_SendTxData   (0358) 	lcall SPIM_SendTxData	; Send value over SPI
06A2: 90 96    CALL  0x073A             (0359) 	call WaitBufferFree		; Wait until tx buffer is empty
06A4: 50 00    MOV   A,0x0              (0360) 	mov A, 0
06A6: 7C 02 EB LCALL _SPIM_SendTxData   (0361) 	lcall SPIM_SendTxData	; Send dummy byte / Receive reg value
06A9: 90 8F    CALL  0x073A             (0362) 	call WaitBufferFree		; Wait until tx buffer is empty
                                        (0363) .wait_rx:	
06AB: 7C 02 F1 LCALL bSPIM_ReadStatus|_SPIM_bReadStatus|_bSPIM_ReadStatus|SPIM_bReadStatus(0364) 	lcall  SPIM_bReadStatus	; Read SPI status
06AE: 21 28    AND   A,0x28             (0365) 	and A, SPIM_SPIM_SPI_COMPLETE | SPIM_SPIM_RX_BUFFER_FULL ; Check if rx is completed
06B0: AF FA    JZ    0x06AB             (0366) 	jz .wait_rx				; Loop until rx buffer is full
06B2: 7C 02 EE LCALL bSPIM_ReadRxData|SPIM_bReadRxData|_SPIM_bReadRxData|_bSPIM_ReadRxData(0367) 	lcall SPIM_bReadRxData	; Store content of rx buffer in A
06B5: 08       PUSH  A                  (0368) 	push A					; Store A on stack
06B6: 2E 05 04 OR    [0x5],0x4          
06B9: 51 05    MOV   A,[0x5]            
06BB: 60 00    MOV   REG[0x0],A         
                                        (0369) 	SetCSN_High				; Set Chip select inactive 
06BD: 18       POP   A                  (0370) 	pop A					; Restore RX value in A
06BE: 7F       RET                      (0371) 	ret					
                                        (0372) 	
                                        (0373) ;-----------------------------------------------------------------------------
                                        (0374) ;  FUNCTION NAME: SendBytes
                                        (0375) ;
                                        (0376) ;  DESCRIPTION:
                                        (0377) ;     Send multiple bytes to the nRF
                                        (0378) ;
                                        (0379) ;-----------------------------------------------------------------------------
                                        (0380) ;
                                        (0381) ;  ARGUMENTS:
                                        (0382) ;     -Destination Command/Register in A
                                        (0383) ;	  -Number of bytes to send in X (excluding command)
                                        (0384) ;	  -Pointer to the first element in ram[pointer]
                                        (0385) ;  RETURNS:
                                        (0386) ;	  none	
                                        (0387) ;-----------------------------------------------------------------------------
                                        (0388) SendBytes:
06BF: 5A 49    MOV   [rxrdy_flag+64],X  (0389) 	mov [temp], X			; Store bytes count in temp
06C1: 08       PUSH  A                  (0390) 	push A					; Store command on stack
06C2: 26 05 FB AND   [0x5],0xFB         
06C5: 51 05    MOV   A,[0x5]            
06C7: 60 00    MOV   REG[0x0],A         
                                        (0391) 	SetCSN_Low				; Set nrf chip select signal low (active)
06C9: 90 6F    CALL  0x073A             (0392) 	call WaitBufferFree		; Wait until TX buffer is empty
06CB: 18       POP   A                  (0393) 	pop A					; Restore Command in Acc
06CC: 7C 02 EB LCALL _SPIM_SendTxData   (0394) 	lcall SPIM_SendTxData	; Send the Command/register address
                                        (0395) .byteToSend:
06CF: 90 69    CALL  0x073A             (0396) 	call WaitBufferFree		; Wait until TX buffer is empty
06D1: 3E 46    MVI   A,[rxrdy_flag+61]  (0397) 	mvi A, [pointer]		; Load next value (on the stack), increment pointer
06D3: 7C 02 EB LCALL _SPIM_SendTxData   (0398) 	lcall SPIM_SendTxData	; Send byte over SPI
06D6: 7A 49    DEC   [rxrdy_flag+64]    (0399) 	dec [temp]				; Decrement counter
06D8: BF F6    JNZ   0x06CF             (0400) 	jnz .byteToSend			; If counter == 0, done
06DA: 2E 05 04 OR    [0x5],0x4          
06DD: 51 05    MOV   A,[0x5]            
06DF: 60 00    MOV   REG[0x0],A         
                                        (0401) 	SetCSN_High				; Set nrf chip select signal high (inactive)
06E1: 7F       RET                      (0402) 	ret
                                        (0403) 	
                                        (0404) ;-----------------------------------------------------------------------------
                                        (0405) ;  FUNCTION NAME: ReadPayload
                                        (0406) ;
                                        (0407) ;  DESCRIPTION:
                                        (0408) ;     - Get the payload and store it in buffer for the specified pipe
                                        (0409) ;	  - If the length of the data received is greater than buffer, 
                                        (0410) ;		it discards the rest.
                                        (0411) ;	  - Get the first 9 bytes and append a null char
                                        (0412) ;-----------------------------------------------------------------------------
                                        (0413) ;
                                        (0414) ;  ARGUMENTS:
                                        (0415) ;	  Pipe index/number in A, Length in X
                                        (0416) ;  RETURNS:
                                        (0417) ;	  none	/ Store string in corresponding buffer
                                        (0418) ;-----------------------------------------------------------------------------
                                        (0419) ReadPayload:
06E2: 5A 49    MOV   [rxrdy_flag+64],X  (0420) 	mov [temp], X		; Store data length in temp
06E4: 3C 49 0A CMP   [rxrdy_flag+64],0xA(0421) 	cmp [temp], 10		; Check if data length is greater than buffer - 1 ( CF set length < 10 )
06E7: D0 05    JNC   0x06ED             (0422) 	jnc .fix_length		; If greater than buffer, fix length
06E9: 57 00    MOV   X,0x0              (0423) 	mov X, 0			; Otherwise set number of bytes to send to 0
06EB: 80 08    JMP   0x06F4             (0424) 	jmp .length_ok		; And skip adjustments
                                        (0425) .fix_length: 
06ED: 4B       SWAP  A,X                (0426) 	swap A, X			; Preserve A val, get data length in A
06EE: 11 09    SUB   A,0x9              (0427) 	sub A, 9			; Calculate the number of bytes to flush out of the FIFO after filling buffer
06F0: 4B       SWAP  A,X                (0428) 	swap A, X			; Swap values back, now X has the extra bytes to clear
06F1: 55 49 09 MOV   [rxrdy_flag+64],0x9(0429) 	mov [temp], 9		; Set to read 9 bytes in the buffer
                                        (0430) .length_ok:
06F4: 10       PUSH  X                  (0431) 	push X				; Push amount of bytes to clear at the end (or 0)
06F5: F0 96    INDEX 0x078D             (0432) 	index pipes_table	; Get target pipe buffer starting address
06F7: 53 46    MOV   [rxrdy_flag+61],A  (0433) 	mov [pointer], A	; Store buffer addr. in pointer
06F9: 90 3F    CALL  0x073A             (0434) 	call WaitBufferFree	; Make sure SPI is ready to send
06FB: 26 05 FB AND   [0x5],0xFB         
06FE: 51 05    MOV   A,[0x5]            
0700: 60 00    MOV   REG[0x0],A         
                                        (0435) 	SetCSN_Low			; Set nrF Chip Select low/active
0702: 50 61    MOV   A,0x61             (0436) 	mov A, R_RX_PAYLOAD	; Send receive payload command to nRF
0704: 7C 02 EB LCALL _SPIM_SendTxData   (0437) 	lcall SPIM_SendTxData
0707: 90 31    CALL  0x073A             (0438) 	call WaitBufferFree	; Wait until SPI is complete
                                        (0439) .get_pl_byte:
0709: 50 00    MOV   A,0x0              (0440) 	mov A, 0x00				; Load dummy data in A
070B: 7C 02 EB LCALL _SPIM_SendTxData   (0441) 	lcall SPIM_SendTxData	; Clock SPI to receive a payload byte	
                                        (0442) .wait_pl_rx:	
070E: 7C 02 F1 LCALL bSPIM_ReadStatus|_SPIM_bReadStatus|_bSPIM_ReadStatus|SPIM_bReadStatus(0443) 	lcall  SPIM_bReadStatus	; Read SPI status
0711: 21 28    AND   A,0x28             (0444) 	and A, SPIM_SPIM_SPI_COMPLETE | SPIM_SPIM_RX_BUFFER_FULL ; Check if SPI Rx is completed
0713: AF FA    JZ    0x070E             (0445) 	jz .wait_pl_rx			; Wait until Rx is done
0715: 7C 02 EE LCALL bSPIM_ReadRxData|SPIM_bReadRxData|_SPIM_bReadRxData|_bSPIM_ReadRxData(0446) 	lcall SPIM_bReadRxData	; Read data in A
0718: 3F 46    MVI   [rxrdy_flag+61],A  (0447) 	mvi [pointer], A		; Store byte in pipe buffer, increment index
071A: 7A 49    DEC   [rxrdy_flag+64]    (0448) 	dec [temp] 				; Decrement count
071C: BF EC    JNZ   0x0709             (0449) 	jnz .get_pl_byte		; Get other bytes until count is 0.
071E: 18       POP   A                  (0450) 	pop A					; Pop number of bytes to clear in A
071F: A0 0E    JZ    0x072E             (0451) 	jz .end_pl_rx			; End if extra bytes = 0
0721: 53 49    MOV   [rxrdy_flag+64],A  (0452) 	mov [temp], A			; Store in temp
                                        (0453) .discard_bytes:
0723: 50 00    MOV   A,0x0              (0454) 	mov A, 0x00				; Load dummy data in A
0725: 7C 02 EB LCALL _SPIM_SendTxData   (0455) 	lcall SPIM_SendTxData	; Clock SPI to receive a payload byte	
0728: 90 10    CALL  0x073A             (0456) 	call WaitBufferFree		; Wait until tx is done
072A: 7A 49    DEC   [rxrdy_flag+64]    (0457) 	dec [temp]				; decrease count
072C: BF F6    JNZ   0x0723             (0458) 	jnz .discard_bytes		; repeat until count is zero
072E: 2E 05 04 OR    [0x5],0x4          
0731: 51 05    MOV   A,[0x5]            
0733: 60 00    MOV   REG[0x0],A         
                                        (0459) .end_pl_rx:
                                        (0460) 	SetCSN_High				; Set nRF Chip Select high
0735: 50 00    MOV   A,0x0              (0461) 	mov A, 0				; Load A with null char
0737: 3F 46    MVI   [rxrdy_flag+61],A  (0462) 	mvi [pointer], A		; Store it at the end of the buffer
0739: 7F       RET                      (0463) 	ret
                                        (0464) ;-----------------------------------------------------------------------------
                                        (0465) ;  FUNCTION NAME: WaitBufferFree
                                        (0466) ;
                                        (0467) ;  DESCRIPTION:
                                        (0468) ;     Wait until the SPI buffer is clear to send
                                        (0469) ;
                                        (0470) ;-----------------------------------------------------------------------------
                                        (0471) ;
                                        (0472) ;  ARGUMENTS:
                                        (0473) ;	  none
                                        (0474) ;  RETURNS:
                                        (0475) ;	  none	
                                        (0476) ;-----------------------------------------------------------------------------
                                        (0477) WaitBufferFree:
073A: 7C 02 F1 LCALL bSPIM_ReadStatus|_SPIM_bReadStatus|_bSPIM_ReadStatus|SPIM_bReadStatus(0478) 	lcall SPIM_bReadStatus				; Fetch SPI Status
073D: 21 10    AND   A,0x10             (0479) 	and A, SPIM_SPIM_TX_BUFFER_EMPTY 	; Check if buffer is empty
073F: AF FA    JZ    0x073A             (0480) 	jz WaitBufferFree					; Loop until it is
0741: 7F       RET                      (0481) 	ret									; Return from subroutine
                                        (0482) 	
                                        (0483) ;-----------------------------------------------------------------------------
                                        (0484) ;  FUNCTION NAME: Write_To_LCD
                                        (0485) ;
                                        (0486) ;  DESCRIPTION:
                                        (0487) ;     Write a string with a static format on LCD
                                        (0488) ;     "Tx<pipe index>: <temperature> C"
                                        (0489) ;-----------------------------------------------------------------------------
                                        (0490) ;
                                        (0491) ;  ARGUMENTS:
                                        (0492) ;	  Pipe Index in A
                                        (0493) ;  RETURNS:
                                        (0494) ;	  none
                                        (0495) ;-----------------------------------------------------------------------------	
                                        (0496) Write_To_LCD:
0742: 53 49    MOV   [rxrdy_flag+64],A  (0497) 	mov [temp], A 		; copy the pipe index to temp
0744: 4F       MOV   X,SP               (0498) 	mov X, sp			; store current sp to X
0745: 50 54    MOV   A,0x54             (0499) 	mov A, 'T'			; Push the string on the stack
0747: 08       PUSH  A                  (0500) 	push A
0748: 50 78    MOV   A,0x78             (0501) 	mov A, 'x'
074A: 08       PUSH  A                  (0502) 	push A
074B: 51 49    MOV   A,[rxrdy_flag+64]  (0503) 	mov A, [temp]		; Load A with pipe index
074D: 01 30    ADD   A,0x30             (0504) 	add A, 0x30			; Add 0x30 to convert to ascii
074F: 08       PUSH  A                  (0505) 	push A
0750: 50 3A    MOV   A,0x3A             (0506) 	mov A, ':'
0752: 08       PUSH  A                  (0507) 	push A
0753: 50 20    MOV   A,0x20             (0508) 	mov A, ' '
0755: 08       PUSH  A                  (0509) 	push A	
0756: 51 49    MOV   A,[rxrdy_flag+64]  (0510) 	mov A, [temp]		; Load A with pipe index
0758: F0 33    INDEX 0x078D             (0511) 	index pipes_table	; Load the address of the buffer in A
075A: 53 46    MOV   [rxrdy_flag+61],A  (0512) 	mov [pointer], A	; copy the address to pointer 
                                        (0513) .copy_to_stack:
075C: 3E 46    MVI   A,[rxrdy_flag+61]  (0514) 	mvi A, [pointer]	; Load A with indexed character, increase index
075E: A0 04    JZ    0x0763             (0515) 	jz .end_copy		; stop at null character, do not push it on stack
0760: 08       PUSH  A                  (0516) 	push A				; push character on the stack
0761: 8F FA    JMP   0x075C             (0517) 	jmp .copy_to_stack	; repeat until null character
                                        (0518) .end_copy:
0763: 50 20    MOV   A,0x20             (0519) 	mov A, ' '			; Push the rest of the string on stack (" C    ")
0765: 08       PUSH  A                  (0520) 	push A
0766: 50 43    MOV   A,0x43             (0521) 	mov A, 'C'
0768: 08       PUSH  A                  (0522) 	push A
0769: 50 20    MOV   A,0x20             (0523) 	mov A, ' '			; Adding spaces to avoid "ghost" characters from previous prints \
076B: 08       PUSH  A                  (0524) 	push A				; if the string is smaller than the last
076C: 50 20    MOV   A,0x20             (0525) 	mov A, ' '
076E: 08       PUSH  A                  (0526) 	push A
076F: 50 20    MOV   A,0x20             (0527) 	mov A, ' '
0771: 08       PUSH  A                  (0528) 	push A
0772: 50 00    MOV   A,0x0              (0529) 	mov A, 0			; Push null character on stack
0774: 08       PUSH  A                  (0530) 	push A
0775: 10       PUSH  X                  (0531) 	push X 				; Preserve original SP
                                        (0532) 	
0776: 50 00    MOV   A,0x0              (0533) 	mov A, 0			; Load A with str pointer MSByte (256 bytes ram...)
0778: 7C 03 90 LCALL _LCD_PrString      (0534) 	lcall LCD_PrString	; Call LCD PrString, X already has str pointer LSByte (original SP)
                                        (0535) 	
077B: 18       POP   A                  (0536) 	pop A		; pop SP back in A
077C: 4E       SWAP  SP,A               (0537) 	swap A, sp	; Restore SP / get rid of string
077D: 7F       RET                      (0538) 	ret
                                        (0539) 	
                                        (0540) Read_All_Regs:	; Get a register dump on the logic analyzer
077E: 50 00    MOV   A,0x0              (0541) 	mov A, 0
                                        (0542) .read_loop:	
0780: 08       PUSH  A                  (0543) 	push a
0781: 9F 11    CALL  0x0694             (0544) 	call NrfGetReg
0783: 18       POP   A                  (0545) 	pop A
0784: 74       INC   A                  (0546) 	inc A
0785: 39 18    CMP   A,0x18             (0547) 	cmp A, 0x18
0787: BF F8    JNZ   0x0780             (0548) 	jnz .read_loop
0789: 7F       RET                      (0549) 	ret
FILE: lib\psocgpioint.asm               (0001) ;  Generated by PSoC Designer 5.4.3191
                                        (0002) ;
                                        (0003) ;;*****************************************************************************
                                        (0004) ;;*****************************************************************************
                                        (0005) ;;  FILENAME: PSoCGPIOINT.asm
                                        (0006) ;;   Version: 2.0.0.20, Updated on 2003/07/17 at 12:10:35
                                        (0007) ;;  @PSOC_VERSION
                                        (0008) ;;
                                        (0009) ;;  DESCRIPTION: PSoC GPIO Interrupt Service Routine
                                        (0010) ;;-----------------------------------------------------------------------------
                                        (0011) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0012) ;;*****************************************************************************
                                        (0013) ;;*****************************************************************************
                                        (0014) 
                                        (0015) include "m8c.inc"
                                        (0016) include "PSoCGPIOINT.inc"
                                        (0017) 
                                        (0018) ;-----------------------------------------------
                                        (0019) ;  Global Symbols
                                        (0020) ;-----------------------------------------------
                                        (0021) export   PSoC_GPIO_ISR
                                        (0022) 
                                        (0023) 
                                        (0024) ;-----------------------------------------------
                                        (0025) ;  Constant Definitions
                                        (0026) ;-----------------------------------------------
                                        (0027) 
                                        (0028) 
                                        (0029) ;-----------------------------------------------
                                        (0030) ; Variable Allocation
                                        (0031) ;-----------------------------------------------
                                        (0032) 	
                                        (0033) 
                                        (0034) ;@PSoC_UserCode_INIT@ (Do not change this line.)
                                        (0035) ;---------------------------------------------------
                                        (0036) ; Insert your custom declarations below this banner
                                        (0037) ;---------------------------------------------------
                                        (0038) 
                                        (0039) ;---------------------------------------------------
                                        (0040) ; Insert your custom declarations above this banner
                                        (0041) ;---------------------------------------------------
                                        (0042) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0043) 
                                        (0044) 
                                        (0045) ;-----------------------------------------------------------------------------
                                        (0046) ;  FUNCTION NAME: PSoC_GPIO_ISR
                                        (0047) ;
                                        (0048) ;  DESCRIPTION: Unless modified, this implements only a null handler stub.
                                        (0049) ;
                                        (0050) ;-----------------------------------------------------------------------------
                                        (0051) ;
                                        (0052) PSoC_GPIO_ISR:
                                        (0053) 
                                        (0054) 
                                        (0055)    ;@PSoC_UserCode_BODY@ (Do not change this line.)
                                        (0056)    ;---------------------------------------------------
                                        (0057)    ; Insert your custom code below this banner
                                        (0058)    ;---------------------------------------------------
078A: 76 09    INC   [rxrdy_flag]       (0059) 	inc [rxrdy_flag]
                                        (0060)    ;---------------------------------------------------
                                        (0061)    ; Insert your custom code above this banner
                                        (0062)    ;---------------------------------------------------
                                        (0063)    ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0064) 
078C: 7E       RETI                     (0065)    reti
                                        (0066) 
                                        (0067) 
                                        (0068) ; end of file PSoCGPIOINT.asm
