 0000           ;-----------------------------------------------------------------------------
 0000           ; Assembly main line
 0000           ;-----------------------------------------------------------------------------
 0000           
 0010           FLAG_XIO_MASK:  equ 10h
 0008           FLAG_SUPER:     equ 08h
 0004           FLAG_CARRY:     equ 04h
 0002           FLAG_ZERO:      equ 02h
 0001           FLAG_GLOBAL_IE: equ 01h
 0000           
 0000           
 0000           ;;=============================================================================
 0000           ;;      Register Space, Bank 0
 0000           ;;=============================================================================
 0000           
 0000           ;------------------------------------------------
 0000           ;  Port Registers
 0000           ;  Note: Also see this address range in Bank 1.
 0000           ;------------------------------------------------
 0000           ; Port 0
 0000           PRT0DR:       equ 00h          ; Port 0 Data Register                     (RW)
 0001           PRT0IE:       equ 01h          ; Port 0 Interrupt Enable Register         (RW)
 0002           PRT0GS:       equ 02h          ; Port 0 Global Select Register            (RW)
 0003           PRT0DM2:      equ 03h          ; Port 0 Drive Mode 2                      (RW)
 0000           ; Port 1
 0004           PRT1DR:       equ 04h          ; Port 1 Data Register                     (RW)
 0005           PRT1IE:       equ 05h          ; Port 1 Interrupt Enable Register         (RW)
 0006           PRT1GS:       equ 06h          ; Port 1 Global Select Register            (RW)
 0007           PRT1DM2:      equ 07h          ; Port 1 Drive Mode 2                      (RW)
 0000           ; Port 2
 0008           PRT2DR:       equ 08h          ; Port 2 Data Register                     (RW)
 0009           PRT2IE:       equ 09h          ; Port 2 Interrupt Enable Register         (RW)
 000A           PRT2GS:       equ 0Ah          ; Port 2 Global Select Register            (RW)
 000B           PRT2DM2:      equ 0Bh          ; Port 2 Drive Mode 2                      (RW)
 0000           ; Port 3
 000C           PRT3DR:       equ 0Ch          ; Port 3 Data Register                     (RW)
 000D           PRT3IE:       equ 0Dh          ; Port 3 Interrupt Enable Register         (RW)
 000E           PRT3GS:       equ 0Eh          ; Port 3 Global Select Register            (RW)
 000F           PRT3DM2:      equ 0Fh          ; Port 3 Drive Mode 2                      (RW)
 0000           ; Port 4
 0010           PRT4DR:       equ 10h          ; Port 4 Data Register                     (RW)
 0011           PRT4IE:       equ 11h          ; Port 4 Interrupt Enable Register         (RW)
 0012           PRT4GS:       equ 12h          ; Port 4 Global Select Register            (RW)
 0013           PRT4DM2:      equ 13h          ; Port 4 Drive Mode 2                      (RW)
 0000           ; Port 5
 0014           PRT5DR:       equ 14h          ; Port 5 Data Register                     (RW)
 0015           PRT5IE:       equ 15h          ; Port 5 Interrupt Enable Register         (RW)
 0016           PRT5GS:       equ 16h          ; Port 5 Global Select Register            (RW)
 0017           PRT5DM2:      equ 17h          ; Port 5 Drive Mode 2                      (RW)
 0000           
 0000           ;------------------------------------------------
 0000           ;  Digital PSoC(tm) block Registers
 0000           ;  Note: Also see this address range in Bank 1.
 0000           ;------------------------------------------------
 0000           ; Digital PSoC block 00, Basic Type B
 0020           DBB00DR0:     equ 20h          ; data register 0                          (#)
 0021           DBB00DR1:     equ 21h          ; data register 1                          (W)
 0022           DBB00DR2:     equ 22h          ; data register 2                          (RW)
 0023           DBB00CR0:     equ 23h          ; control & status register 0              (#)
 0000           
 0000           ; Digital PSoC block 01, Basic Type B
 0024           DBB01DR0:     equ 24h          ; data register 0                          (#)
 0025           DBB01DR1:     equ 25h          ; data register 1                          (W)
 0026           DBB01DR2:     equ 26h          ; data register 2                          (RW)
 0027           DBB01CR0:     equ 27h          ; control & status register 0              (#)
 0000           
 0000           ; Digital PSoC block 02, Communications Type B
 0028           DCB02DR0:     equ 28h          ; data register 0                          (#)
 0029           DCB02DR1:     equ 29h          ; data register 1                          (W)
 002A           DCB02DR2:     equ 2Ah          ; data register 2                          (RW)
 002B           DCB02CR0:     equ 2Bh          ; control & status register 0              (#)
 0000           
 0000           ; Digital PSoC block 03, Communications Type B
 002C           DCB03DR0:     equ 2Ch          ; data register 0                          (#)
 002D           DCB03DR1:     equ 2Dh          ; data register 1                          (W)
 002E           DCB03DR2:     equ 2Eh          ; data register 2                          (RW)
 002F           DCB03CR0:     equ 2Fh          ; control & status register 0              (#)
 0000           
 0000           ; Digital PSoC block 10, Basic Type B
 0030           DBB10DR0:     equ 30h          ; data register 0                          (#)
 0031           DBB10DR1:     equ 31h          ; data register 1                          (W)
 0032           DBB10DR2:     equ 32h          ; data register 2                          (RW)
 0033           DBB10CR0:     equ 33h          ; control & status register 0              (#)
 0000           
 0000           ; Digital PSoC block 11, Basic Type B
 0034           DBB11DR0:     equ 34h          ; data register 0                          (#)
 0035           DBB11DR1:     equ 35h          ; data register 1                          (W)
 0036           DBB11DR2:     equ 36h          ; data register 2                          (RW)
 0037           DBB11CR0:     equ 37h          ; control & status register 0              (#)
 0000           
 0000           ; Digital PSoC block 12, Communications Type B
 0038           DCB12DR0:     equ 38h          ; data register 0                          (#)
 0039           DCB12DR1:     equ 39h          ; data register 1                          (W)
 003A           DCB12DR2:     equ 3Ah          ; data register 2                          (RW)
 003B           DCB12CR0:     equ 3Bh          ; control & status register 0              (#)
 0000           
 0000           ; Digital PSoC block 13, Communications Type B
 003C           DCB13DR0:     equ 3Ch          ; data register 0                          (#)
 003D           DCB13DR1:     equ 3Dh          ; data register 1                          (W)
 003E           DCB13DR2:     equ 3Eh          ; data register 2                          (RW)
 003F           DCB13CR0:     equ 3Fh          ; control & status register 0              (#)
 0000           
 0000           ;-------------------------------------
 0000           ;  Analog Resource Control Registers
 0000           ;-------------------------------------
 0060           AMX_IN:       equ 60h          ; Analog Input Multiplexor Control         (RW)
 00C0           AMX_IN_ACI3:          equ 0C0h    ; MASK: column 3 input mux
 0030           AMX_IN_ACI2:          equ 30h    ; MASK: column 2 input mux
 000C           AMX_IN_ACI1:          equ 0Ch    ; MASK: column 1 input mux
 0003           AMX_IN_ACI0:          equ 03h    ; MASK: column 0 input mux
 0000           
 0063           ARF_CR:       equ 63h          ; Analog Reference Control Register        (RW)
 0040           ARF_CR_HBE:           equ 40h    ; MASK: Bias level control
 0038           ARF_CR_REF:           equ 38h    ; MASK: Analog Reference controls
 0007           ARF_CR_REFPWR:        equ 07h    ; MASK: Analog Reference power
 0004           ARF_CR_APWR:          equ 04h    ; MASK: use deprecated; see datasheet
 0003           ARF_CR_SCPWR:         equ 03h    ; MASK: Switched Cap block power
 0000           
 0064           CMP_CR0:      equ 64h          ; Analog Comparator Bus 0 Register         (#)
 0080           CMP_CR0_COMP3:        equ 80h    ; MASK: Column 3 comparator state        (R)
 0040           CMP_CR0_COMP2:        equ 40h    ; MASK: Column 2 comparator state        (R)
 0020           CMP_CR0_COMP1:        equ 20h    ; MASK: Column 1 comparator state        (R)
 0010           CMP_CR0_COMP0:        equ 10h    ; MASK: Column 0 comparator state        (R)
 0008           CMP_CR0_AINT3:        equ 08h    ; MASK: Column 3 interrupt source        (RW)
 0004           CMP_CR0_AINT2:        equ 04h    ; MASK: Column 2 interrupt source        (RW)
 0002           CMP_CR0_AINT1:        equ 02h    ; MASK: Column 1 interrupt source        (RW)
 0001           CMP_CR0_AINT0:        equ 01h    ; MASK: Column 0 interrupt source        (RW)
 0000           
 0065           ASY_CR:       equ 65h          ; Analog Synchronizaton Control            (#)
 0070           ASY_CR_SARCOUNT:      equ 70h    ; MASK: SAR support: resolution count    (W)
 0008           ASY_CR_SARSIGN:       equ 08h    ; MASK: SAR support: sign                (RW)
 0006           ASY_CR_SARCOL:        equ 06h    ; MASK: SAR support: column spec         (RW)
 0001           ASY_CR_SYNCEN:        equ 01h    ; MASK: Stall bit                        (RW)
 0000           
 0066           CMP_CR1:      equ 66h          ; Analog Comparator Bus 1 Register         (RW)
 0080           CMP_CR1_ASYNCH3:      equ 80h    ; MASK: Column 3 comparator bus synch
 0040           CMP_CR1_ASYNCH2:      equ 40h    ; MASK: Column 2 comparator bus synch
 0020           CMP_CR1_ASYNCH1:      equ 20h    ; MASK: Column 1 comparator bus synch
 0010           CMP_CR1_ASYNCH0:      equ 10h    ; MASK: Column 0 comparator bus synch
 0000           
 0000           ;---------------------------------------------------
 0000           ;  Analog PSoC block Registers
 0000           ;
 0000           ;  Note: the following registers are mapped into
 0000           ;  both register bank 0 AND register bank 1.
 0000           ;---------------------------------------------------
 0000           
 0000           ; Continuous Time PSoC block Type B Row 0 Col 0
 0070           ACB00CR3:     equ 70h          ; Control register 3                       (RW)
 0071           ACB00CR0:     equ 71h          ; Control register 0                       (RW)
 0072           ACB00CR1:     equ 72h          ; Control register 1                       (RW)
 0073           ACB00CR2:     equ 73h          ; Control register 2                       (RW)
 0000           
 0000           ; Continuous Time PSoC block Type B Row 0 Col 1
 0074           ACB01CR3:     equ 74h          ; Control register 3                       (RW)
 0075           ACB01CR0:     equ 75h          ; Control register 0                       (RW)
 0076           ACB01CR1:     equ 76h          ; Control register 1                       (RW)
 0077           ACB01CR2:     equ 77h          ; Control register 2                       (RW)
 0000           
 0000           ; Continuous Time PSoC block Type B Row 0 Col 2
 0078           ACB02CR3:     equ 78h          ; Control register 3                       (RW)
 0079           ACB02CR0:     equ 79h          ; Control register 0                       (RW)
 007A           ACB02CR1:     equ 7Ah          ; Control register 1                       (RW)
 007B           ACB02CR2:     equ 7Bh          ; Control register 2                       (RW)
 0000           
 0000           ; Continuous Time PSoC block Type B Row 0 Col 3
 007C           ACB03CR3:     equ 7Ch          ; Control register 3                       (RW)
 007D           ACB03CR0:     equ 7Dh          ; Control register 0                       (RW)
 007E           ACB03CR1:     equ 7Eh          ; Control register 1                       (RW)
 007F           ACB03CR2:     equ 7Fh          ; Control register 2                       (RW)
 0000           
 0000           ; Switched Cap PSoC blockType C Row 1 Col 0
 0080           ASC10CR0:     equ 80h          ; Control register 0                       (RW)
 0081           ASC10CR1:     equ 81h          ; Control register 1                       (RW)
 0082           ASC10CR2:     equ 82h          ; Control register 2                       (RW)
 0083           ASC10CR3:     equ 83h          ; Control register 3                       (RW)
 0000           
 0000           ; Switched Cap PSoC blockType D Row 1 Col 1
 0084           ASD11CR0:     equ 84h          ; Control register 0                       (RW)
 0085           ASD11CR1:     equ 85h          ; Control register 1                       (RW)
 0086           ASD11CR2:     equ 86h          ; Control register 2                       (RW)
 0087           ASD11CR3:     equ 87h          ; Control register 3                       (RW)
 0000           
 0000           ; Switched Cap PSoC blockType C Row 1 Col 2
 0088           ASC12CR0:     equ 88h          ; Control register 0                       (RW)
 0089           ASC12CR1:     equ 89h          ; Control register 1                       (RW)
 008A           ASC12CR2:     equ 8Ah          ; Control register 2                       (RW)
 008B           ASC12CR3:     equ 8Bh          ; Control register 3                       (RW)
 0000           
 0000           ; Switched Cap PSoC blockType D Row 1 Col 3
 008C           ASD13CR0:     equ 8Ch          ; Control register 0                       (RW)
 008D           ASD13CR1:     equ 8Dh          ; Control register 1                       (RW)
 008E           ASD13CR2:     equ 8Eh          ; Control register 2                       (RW)
 008F           ASD13CR3:     equ 8Fh          ; Control register 3                       (RW)
 0000           
 0000           ; Switched Cap PSoC blockType D Row 2 Col 0
 0090           ASD20CR0:     equ 90h          ; Control register 0                       (RW)
 0091           ASD20CR1:     equ 91h          ; Control register 1                       (RW)
 0092           ASD20CR2:     equ 92h          ; Control register 2                       (RW)
 0093           ASD20CR3:     equ 93h          ; Control register 3                       (RW)
 0000           
 0000           ; Switched Cap PSoC blockType C Row 2 Col 1
 0094           ASC21CR0:     equ 94h          ; Control register 0                       (RW)
 0095           ASC21CR1:     equ 95h          ; Control register 1                       (RW)
 0096           ASC21CR2:     equ 96h          ; Control register 2                       (RW)
 0097           ASC21CR3:     equ 97h          ; Control register 3                       (RW)
 0000           
 0000           ; Switched Cap PSoC blockType D Row 2 Col 2
 0098           ASD22CR0:     equ 98h          ; Control register 0                       (RW)
 0099           ASD22CR1:     equ 99h          ; Control register 1                       (RW)
 009A           ASD22CR2:     equ 9Ah          ; Control register 2                       (RW)
 009B           ASD22CR3:     equ 9Bh          ; Control register 3                       (RW)
 0000           
 0000           ; Switched Cap PSoC blockType C Row 2 Col 3
 009C           ASC23CR0:     equ 9Ch          ; Control register 0                       (RW)
 009D           ASC23CR1:     equ 9Dh          ; Control register 1                       (RW)
 009E           ASC23CR2:     equ 9Eh          ; Control register 2                       (RW)
 009F           ASC23CR3:     equ 9Fh          ; Control register 3                       (RW)
 0000           
 0000           ;------------------------------------------------
 0000           ;  Row Digital Interconnects
 0000           ;
 0000           ;  Note: the following registers are mapped into
 0000           ;  both register bank 0 AND register bank 1.
 0000           ;------------------------------------------------
 0000           
 00B0           RDI0RI:       equ 0B0h          ; Row Digital Interconnect Row 0 Input Reg (RW)
 00B1           RDI0SYN:      equ 0B1h          ; Row Digital Interconnect Row 0 Sync Reg  (RW)
 00B2           RDI0IS:       equ 0B2h          ; Row 0 Input Select Register              (RW)
 00B3           RDI0LT0:      equ 0B3h          ; Row 0 Look Up Table Register 0           (RW)
 00B4           RDI0LT1:      equ 0B4h          ; Row 0 Look Up Table Register 1           (RW)
 00B5           RDI0RO0:      equ 0B5h          ; Row 0 Output Register 0                  (RW)
 00B6           RDI0RO1:      equ 0B6h          ; Row 0 Output Register 1                  (RW)
 0000           
 00B8           RDI1RI:       equ 0B8h          ; Row Digital Interconnect Row 1 Input Reg (RW)
 00B9           RDI1SYN:      equ 0B9h          ; Row Digital Interconnect Row 1 Sync Reg  (RW)
 00BA           RDI1IS:       equ 0BAh          ; Row 1 Input Select Register              (RW)
 00BB           RDI1LT0:      equ 0BBh          ; Row 1 Look Up Table Register 0           (RW)
 00BC           RDI1LT1:      equ 0BCh          ; Row 1 Look Up Table Register 1           (RW)
 00BD           RDI1RO0:      equ 0BDh          ; Row 1 Output Register 0                  (RW)
 00BE           RDI1RO1:      equ 0BEh          ; Row 1 Output Register 1                  (RW)
 0000           
 0000           ;------------------------------------------------
 0000           ;  I2C Configuration Registers
 0000           ;------------------------------------------------
 00D6           I2C_CFG:      equ 0D6h          ; I2C Configuration Register               (RW)
 0040           I2C_CFG_PINSEL:         equ 40h  ; MASK: Select P1[0] and P1[1] for I2C
 0020           I2C_CFG_BUSERR_IE:      equ 20h  ; MASK: Enable interrupt on Bus Error
 0010           I2C_CFG_STOP_IE:        equ 10h  ; MASK: Enable interrupt on Stop
 0000           I2C_CFG_CLK_RATE_100K:  equ 00h  ; MASK: I2C clock set at 100K
 0004           I2C_CFG_CLK_RATE_400K:  equ 04h  ; MASK: I2C clock set at 400K
 0008           I2C_CFG_CLK_RATE_50K:   equ 08h  ; MASK: I2C clock set at 50K
 000C           I2C_CFG_CLK_RATE_1M6:   equ 0Ch  ; MASK: I2C clock set at 1.6M
 000C           I2C_CFG_CLK_RATE:       equ 0Ch  ; MASK: I2C clock rate setting mask
 0002           I2C_CFG_PSELECT_MASTER: equ 02h  ; MASK: Enable I2C Master
 0001           I2C_CFG_PSELECT_SLAVE:  equ 01h  ; MASK: Enable I2C Slave
 0000           
 00D7           I2C_SCR:      equ 0D7h          ; I2C Status and Control Register          (#)
 0080           I2C_SCR_BUSERR:        equ 80h   ; MASK: I2C Bus Error detected           (RC)
 0040           I2C_SCR_LOSTARB:       equ 40h   ; MASK: I2C Arbitration lost             (RC)
 0020           I2C_SCR_STOP:          equ 20h   ; MASK: I2C Stop detected                (RC)
 0010           I2C_SCR_ACK:           equ 10h   ; MASK: ACK the last byte                (RW)
 0008           I2C_SCR_ADDR:          equ 08h   ; MASK: Address rcv'd is Slave address   (RC)
 0004           I2C_SCR_XMIT:          equ 04h   ; MASK: Set transfer to tranmit mode     (RW)
 0002           I2C_SCR_LRB:           equ 02h   ; MASK: Last recieved bit                (RC)
 0001           I2C_SCR_BYTECOMPLETE:  equ 01h   ; MASK: Transfer of byte complete        (RC)
 0000           
 00D8           I2C_DR:       equ 0D8h          ; I2C Data Register                        (RW)
 0000           
 00D9           I2C_MSCR:     equ 0D9h          ; I2C Master Status and Control Register   (#)
 0008           I2C_MSCR_BUSY:         equ 08h   ; MASK: I2C Busy (Start detected)        (R)
 0004           I2C_MSCR_MODE:         equ 04h   ; MASK: Start has been generated         (R)
 0002           I2C_MSCR_RESTART:      equ 02h   ; MASK: Generate a Restart condition     (RW)
 0001           I2C_MSCR_START:        equ 01h   ; MASK: Generate a Start condition       (RW)
 0000           
 0000           ;------------------------------------------------
 0000           ;  System and Global Resource Registers
 0000           ;------------------------------------------------
 00DA           INT_CLR0:     equ 0DAh          ; Interrupt Clear Register 0               (RW)
 0000                                          ; Use INT_MSK0 bit field masks
 00DB           INT_CLR1:     equ 0DBh          ; Interrupt Clear Register 1               (RW)
 0000                                          ; Use INT_MSK1 bit field masks
 00DD           INT_CLR3:     equ 0DDh          ; Interrupt Clear Register 3               (RW)
 0000                                          ; Use INT_MSK3 bit field masks
 0000           
 00DE           INT_MSK3:     equ 0DEh          ; I2C and Software Mask Register           (RW)
 0080           INT_MSK3_ENSWINT:          equ 80h ; MASK: enable/disable SW interrupt
 0001           INT_MSK3_I2C:              equ 01h ; MASK: enable/disable I2C interrupt
 0000           
 00E0           INT_MSK0:     equ 0E0h          ; General Interrupt Mask Register          (RW)
 0080           INT_MSK0_VC3:              equ 80h ; MASK: enable/disable VC3 interrupt
 0040           INT_MSK0_SLEEP:            equ 40h ; MASK: enable/disable sleep interrupt
 0020           INT_MSK0_GPIO:             equ 20h ; MASK: enable/disable GPIO  interrupt
 0010           INT_MSK0_ACOLUMN_3:        equ 10h ; MASK: enable/disable Analog col 3 interrupt
 0008           INT_MSK0_ACOLUMN_2:        equ 08h ; MASK: enable/disable Analog col 2 interrupt
 0004           INT_MSK0_ACOLUMN_1:        equ 04h ; MASK: enable/disable Analog col 1 interrupt
 0002           INT_MSK0_ACOLUMN_0:        equ 02h ; MASK: enable/disable Analog col 0 interrupt
 0001           INT_MSK0_VOLTAGE_MONITOR:  equ 01h ; MASK: enable/disable Volts interrupt
 0000           
 00E1           INT_MSK1:     equ 0E1h          ; Digital PSoC block Mask Register         (RW)
 0080           INT_MSK1_DCB13:            equ 80h ; MASK: enable/disable DCB13 block interrupt
 0040           INT_MSK1_DCB12:            equ 40h ; MASK: enable/disable DCB12 block interrupt
 0020           INT_MSK1_DBB11:            equ 20h ; MASK: enable/disable DBB11 block interrupt
 0010           INT_MSK1_DBB10:            equ 10h ; MASK: enable/disable DBB10 block interrupt
 0008           INT_MSK1_DCB03:            equ 08h ; MASK: enable/disable DCB03 block interrupt
 0004           INT_MSK1_DCB02:            equ 04h ; MASK: enable/disable DCB02 block interrupt
 0002           INT_MSK1_DBB01:            equ 02h ; MASK: enable/disable DBB01 block interrupt
 0001           INT_MSK1_DBB00:            equ 01h ; MASK: enable/disable DBB00 block interrupt
 0000           
 00E2           INT_VC:       equ 0E2h          ; Interrupt vector register                (RC)
 00E3           RES_WDT:      equ 0E3h          ; Watch Dog Timer Register                 (W)
 0000           
 0000           ; DECIMATOR Registers
 00E4           DEC_DH:       equ 0E4h          ; Data Register (high byte)                (RC)
 00E5           DEC_DL:       equ 0E5h          ; Data Register ( low byte)                (RC)
 00E6           DEC_CR0:      equ 0E6h          ; Data Control Register 0                  (RW)
 00E7           DEC_CR1:      equ 0E7h          ; Data Control Register 1                  (RW)
 0000           
 0000           ; Multiplier and MAC (Multiply/Accumulate) Unit
 00E8           MUL_X:        equ 0E8h          ; Multiplier X Register (write)            (W)
 00E9           MUL_Y:        equ 0E9h          ; Multiplier Y Register (write)            (W)
 00EA           MUL_DH:       equ 0EAh          ; Multiplier Result Data (high byte read)  (R)
 00EB           MUL_DL:       equ 0EBh          ; Multiplier Result Data ( low byte read)  (R)
 00EC           MAC_X:        equ 0ECh          ; write = MAC X register [also see ACC_DR1]
 00EC           ACC_DR1:      equ MAC_X        ; read =  MAC Accumulator, byte 1          (RW)
 00ED           MAC_Y:        equ 0EDh          ; write = MAC Y register [also see ACC_DR0]
 00ED           ACC_DR0:      equ MAC_Y        ; read =  MAC Accumulator, byte 0          (RW)
 00EE           MAC_CL0:      equ 0EEh          ; write = MAC Clear Accum [also see ACC_DR3]
 00EE           ACC_DR3:      equ MAC_CL0      ; read =  MAC Accumulator, byte 3          (RW)
 00EF           MAC_CL1:      equ 0EFh          ; write = MAC Clear Accum [also see ACC_DR2]
 00EF           ACC_DR2:      equ MAC_CL1      ; read =  MAC Accumulator, byte 2          (RW)
 0000           
 0000           ;------------------------------------------------------
 0000           ;  System Status and Control Registers
 0000           ;
 0000           ;  Note: The following registers are mapped into both
 0000           ;        register bank 0 AND register bank 1.
 0000           ;------------------------------------------------------
 00F7           CPU_F:        equ 0F7h          ; CPU Flag Register Access                 (RO)
 0000                                              ; Use FLAG_ masks defined at top of file
 0000           
 00FE           CPU_SCR1:     equ 0FEh          ; CPU Status and Control Register #1       (#)
 0010           CPU_SCR1_SLIMO:         equ 10h	   ; MASK: Slow IMO (internal main osc) enable
 0080           CPU_SCR1_IRESS:         equ 80h    ; MASK: flag, Internal Reset Status bit
 0008           CPU_SCR1_ECO_ALWD_WR:   equ 08h    ; MASK: flag, ECO allowed has been written
 0004           CPU_SCR1_ECO_ALLOWED:   equ 04h    ; MASK: ECO allowed to be enabled
 0001           CPU_SCR1_IRAMDIS:       equ 01h    ; MASK: Disable RAM initialization on WDR
 0000           
 00FF           CPU_SCR0:     equ 0FFh          ; CPU Status and Control Register #2       (#)
 0080           CPU_SCR0_GIE_MASK:      equ 80h    ; MASK: Global Interrupt Enable shadow
 0020           CPU_SCR0_WDRS_MASK:     equ 20h    ; MASK: Watch Dog Timer Reset
 0010           CPU_SCR0_PORS_MASK:     equ 10h    ; MASK: power-on reset bit PORS
 0008           CPU_SCR0_SLEEP_MASK:    equ 08h    ; MASK: Enable Sleep
 0001           CPU_SCR0_STOP_MASK:     equ 01h    ; MASK: Halt CPU bit
 0000           
 0000           
 0000           ;;=============================================================================
 0000           ;;      Register Space, Bank 1
 0000           ;;=============================================================================
 0000           
 0000           ;------------------------------------------------
 0000           ;  Port Registers
 0000           ;  Note: Also see this address range in Bank 0.
 0000           ;------------------------------------------------
 0000           ; Port 0
 0000           PRT0DM0:      equ 00h          ; Port 0 Drive Mode 0                      (RW)
 0001           PRT0DM1:      equ 01h          ; Port 0 Drive Mode 1                      (RW)
 0002           PRT0IC0:      equ 02h          ; Port 0 Interrupt Control 0               (RW)
 0003           PRT0IC1:      equ 03h          ; Port 0 Interrupt Control 1               (RW)
 0000           
 0000           ; Port 1
 0004           PRT1DM0:      equ 04h          ; Port 1 Drive Mode 0                      (RW)
 0005           PRT1DM1:      equ 05h          ; Port 1 Drive Mode 1                      (RW)
 0006           PRT1IC0:      equ 06h          ; Port 1 Interrupt Control 0               (RW)
 0007           PRT1IC1:      equ 07h          ; Port 1 Interrupt Control 1               (RW)
 0000           
 0000           ; Port 2
 0008           PRT2DM0:      equ 08h          ; Port 2 Drive Mode 0                      (RW)
 0009           PRT2DM1:      equ 09h          ; Port 2 Drive Mode 1                      (RW)
 000A           PRT2IC0:      equ 0Ah          ; Port 2 Interrupt Control 0               (RW)
 000B           PRT2IC1:      equ 0Bh          ; Port 2 Interrupt Control 1               (RW)
 0000           
 0000           ; Port 3
 000C           PRT3DM0:      equ 0Ch          ; Port 3 Drive Mode 0                      (RW)
 000D           PRT3DM1:      equ 0Dh          ; Port 3 Drive Mode 1                      (RW)
 000E           PRT3IC0:      equ 0Eh          ; Port 3 Interrupt Control 0               (RW)
 000F           PRT3IC1:      equ 0Fh          ; Port 3 Interrupt Control 1               (RW)
 0000           
 0000           ; Port 4
 0010           PRT4DM0:      equ 10h          ; Port 4 Drive Mode 0                      (RW)
 0011           PRT4DM1:      equ 11h          ; Port 4 Drive Mode 1                      (RW)
 0012           PRT4IC0:      equ 12h          ; Port 4 Interrupt Control 0               (RW)
 0013           PRT4IC1:      equ 13h          ; Port 4 Interrupt Control 1               (RW)
 0000           
 0000           ; Port 5
 0014           PRT5DM0:      equ 14h          ; Port 5 Drive Mode 0                      (RW)
 0015           PRT5DM1:      equ 15h          ; Port 5 Drive Mode 1                      (RW)
 0016           PRT5IC0:      equ 16h          ; Port 5 Interrupt Control 0               (RW)
 0017           PRT5IC1:      equ 17h          ; Port 5 Interrupt Control 1               (RW)
 0000           
 0000           ;------------------------------------------------
 0000           ;  Digital PSoC(tm) block Registers
 0000           ;  Note: Also see this address range in Bank 0.
 0000           ;------------------------------------------------
 0000           
 0000           ; Digital PSoC block 00, Basic Type B
 0020           DBB00FN:      equ 20h          ; Function Register                        (RW)
 0021           DBB00IN:      equ 21h          ;    Input Register                        (RW)
 0022           DBB00OU:      equ 22h          ;   Output Register                        (RW)
 0000           
 0000           ; Digital PSoC block 01, Basic Type B
 0024           DBB01FN:      equ 24h          ; Function Register                        (RW)
 0025           DBB01IN:      equ 25h          ;    Input Register                        (RW)
 0026           DBB01OU:      equ 26h          ;   Output Register                        (RW)
 0000           
 0000           ; Digital PSoC block 02, Communications Type B
 0028           DCB02FN:      equ 28h          ; Function Register                        (RW)
 0029           DCB02IN:      equ 29h          ;    Input Register                        (RW)
 002A           DCB02OU:      equ 2Ah          ;   Output Register                        (RW)
 0000           
 0000           ; Digital PSoC block 03, Communications Type B
 002C           DCB03FN:      equ 2Ch          ; Function Register                        (RW)
 002D           DCB03IN:      equ 2Dh          ;    Input Register                        (RW)
 002E           DCB03OU:      equ 2Eh          ;   Output Register                        (RW)
 0000           
 0000           ; Digital PSoC block 10, Basic Type B
 0030           DBB10FN:      equ 30h          ; Function Register                        (RW)
 0031           DBB10IN:      equ 31h          ;    Input Register                        (RW)
 0032           DBB10OU:      equ 32h          ;   Output Register                        (RW)
 0000           
 0000           ; Digital PSoC block 11, Basic Type B
 0034           DBB11FN:      equ 34h          ; Function Register                        (RW)
 0035           DBB11IN:      equ 35h          ;    Input Register                        (RW)
 0036           DBB11OU:      equ 36h          ;   Output Register                        (RW)
 0000           
 0000           ; Digital PSoC block 12, Communications Type B
 0038           DCB12FN:      equ 38h          ; Function Register                        (RW)
 0039           DCB12IN:      equ 39h          ;    Input Register                        (RW)
 003A           DCB12OU:      equ 3Ah          ;   Output Register                        (RW)
 0000           
 0000           ; Digital PSoC block 13, Communications Type B
 003C           DCB13FN:      equ 3Ch          ; Function Register                        (RW)
 003D           DCB13IN:      equ 3Dh          ;    Input Register                        (RW)
 003E           DCB13OU:      equ 3Eh          ;   Output Register                        (RW)
 0000           
 0000           ;------------------------------------------------
 0000           ;  System and Global Resource Registers
 0000           ;  Note: Also see this address range in Bank 0.
 0000           ;------------------------------------------------
 0000           
 0060           CLK_CR0:      equ 60h          ; Analog Column Clock Select Register 0    (RW)
 00C0           CLK_CR0_ACOLUMN_3:    equ 0C0h    ; MASK: Specify clock for analog cloumn
 0030           CLK_CR0_ACOLUMN_2:    equ 30h    ; MASK: Specify clock for analog cloumn
 000C           CLK_CR0_ACOLUMN_1:    equ 0Ch    ; MASK: Specify clock for analog cloumn
 0003           CLK_CR0_ACOLUMN_0:    equ 03h    ; MASK: Specify clock for analog cloumn
 0000           
 0061           CLK_CR1:      equ 61h          ; Analog Clock Source Select Register 1    (RW)
 0040           CLK_CR1_SHDIS:        equ 40h    ; MASK: Sample and Hold Disable (all Columns)
 0038           CLK_CR1_ACLK1:        equ 38h    ; MASK: Digital PSoC block for analog source
 0007           CLK_CR1_ACLK2:        equ 07h    ; MASK: Digital PSoC block for analog source
 0000           
 0062           ABF_CR0:      equ 62h          ; Analog Output Buffer Control Register 0  (RW)
 0080           ABF_CR0_ACOL1MUX:     equ 80h    ; MASK: Analog Column 1 Mux control
 0040           ABF_CR0_ACOL2MUX:     equ 40h    ; MASK: Analog Column 2 Mux control
 0020           ABF_CR0_ABUF1EN:      equ 20h    ; MASK: Enable ACol 1 analog buffer (P0[5])
 0010           ABF_CR0_ABUF2EN:      equ 10h    ; MASK: Enable ACol 2 analog buffer (P0[4])
 0008           ABF_CR0_ABUF0EN:      equ 08h    ; MASK: Enable ACol 0 analog buffer (P0[3])
 0004           ABF_CR0_ABUF3EN:      equ 04h    ; MASK: Enable ACol 3 analog buffer (P0[2])
 0002           ABF_CR0_BYPASS:       equ 02h    ; MASK: Bypass the analog buffers
 0001           ABF_CR0_PWR:          equ 01h    ; MASK: High power mode on all analog buffers
 0000           
 0063           AMD_CR0:      equ 63h          ; Analog Modulator Control Register 0      (RW)
 0070           AMD_CR0_AMOD2:        equ 70h    ; MASK: Modulation source for analog column 2
 0007           AMD_CR0_AMOD0:        equ 07h    ; MASK: Modulation source for analog column 1
 0000           
 0066           AMD_CR1:      equ 66h          ; Analog Modulator Control Register 1      (RW)
 0070           AMD_CR1_AMOD3:        equ 70h    ; MASK: Modulation ctrl for analog column 3
 0007           AMD_CR1_AMOD1:        equ 07h    ; MASK: Modulation ctrl for analog column 1
 0000           
 0067           ALT_CR0:      equ 67h          ; Analog Look Up Table (LUT) Register 0    (RW)
 00F0           ALT_CR0_LUT1:         equ 0F0h    ; MASK: Look up table 1 selection
 000F           ALT_CR0_LUT0:         equ 0Fh    ; MASK: Look up table 0 selection
 0000           
 0068           ALT_CR1:      equ 68h          ; Analog Look Up Table (LUT) Register 1    (RW)
 00F0           ALT_CR1_LUT3:         equ 0F0h    ; MASK: Look up table 3 selection
 000F           ALT_CR1_LUT2:         equ 0Fh    ; MASK: Look up table 2 selection
 0000           
 0069           CLK_CR2:      equ 69h          ; Analog Clock Source Control Register 2   (RW)
 0008           CLK_CR2_ACLK1R:       equ 08h    ; MASK: Analog Clock 1 selection range
 0001           CLK_CR2_ACLK0R:       equ 01h    ; MASK: Analog Clock 0 selection range
 0000           
 0000           ;------------------------------------------------
 0000           ;  Global Digital Interconnects
 0000           ;------------------------------------------------
 0000           
 00D0           GDI_O_IN:     equ 0D0h          ; Global Dig Interconnect Odd Inputs Reg   (RW)
 00D1           GDI_E_IN:     equ 0D1h          ; Global Dig Interconnect Even Inputs Reg  (RW)
 00D2           GDI_O_OU:     equ 0D2h          ; Global Dig Interconnect Odd Outputs Reg  (RW)
 00D3           GDI_E_OU:     equ 0D3h          ; Global Dig Interconnect Even Outputs Reg (RW)
 0000           
 0000           ;------------------------------------------------
 0000           ;  Clock and System Control Registers
 0000           ;------------------------------------------------
 0000           
 00DD           OSC_GO_EN:    equ 0DDh          ; Oscillator to Global Outputs Enable Register (RW)
 0080           OSC_GOEN_SLPINT:      equ 80h	 ; Enable Sleep Timer onto GOE[7]
 0040           OSC_GOEN_VC3:         equ 40h    ; Enable VC3 onto GOE[6]
 0020           OSC_GOEN_VC2:         equ 20h    ; Enable VC2 onto GOE[5]
 0010           OSC_GOEN_VC1:         equ 10h    ; Enable VC1 onto GOE[4]
 0008           OSC_GOEN_SYSCLKX2:    equ 08h    ; Enable 2X SysClk onto GOE[3]
 0004           OSC_GOEN_SYSCLK:      equ 04h    ; Enable 1X SysClk onto GOE[2]
 0002           OSC_GOEN_CLK24M:      equ 02h    ; Enable 24 MHz clock onto GOE[1]
 0001           OSC_GOEN_CLK32K:      equ 01h    ; Enable 32 kHz clock onto GOE[0]
 0000           
 00DE           OSC_CR4:      equ 0DEh          ; Oscillator Control Register 4            (RW)
 0003           OSC_CR4_VC3:          equ 03h    ; MASK: System VC3 Clock source
 0000           
 00DF           OSC_CR3:      equ 0DFh          ; Oscillator Control Register 3            (RW)
 0000           
 00E0           OSC_CR0:      equ 0E0h          ; System Oscillator Control Register 0     (RW)
 0080           OSC_CR0_32K_SELECT:   equ 80h    ; MASK: Enable/Disable External XTAL Osc
 0040           OSC_CR0_PLL_MODE:     equ 40h    ; MASK: Enable/Disable PLL
 0020           OSC_CR0_NO_BUZZ:      equ 20h    ; MASK: Bandgap always powered/BUZZ bandgap
 0018           OSC_CR0_SLEEP:        equ 18h    ; MASK: Set Sleep timer freq/period
 0000           OSC_CR0_SLEEP_512Hz:  equ 00h    ;     Set sleep bits for 1.95ms period
 0008           OSC_CR0_SLEEP_64Hz:   equ 08h    ;     Set sleep bits for 15.6ms period
 0010           OSC_CR0_SLEEP_8Hz:    equ 10h    ;     Set sleep bits for 125ms period
 0018           OSC_CR0_SLEEP_1Hz:    equ 18h    ;     Set sleep bits for 1 sec period
 0007           OSC_CR0_CPU:          equ 07h    ; MASK: Set CPU Frequency
 0000           OSC_CR0_CPU_3MHz:     equ 00h    ;     set CPU Freq bits for 3MHz Operation
 0001           OSC_CR0_CPU_6MHz:     equ 01h    ;     set CPU Freq bits for 6MHz Operation
 0002           OSC_CR0_CPU_12MHz:    equ 02h    ;     set CPU Freq bits for 12MHz Operation
 0003           OSC_CR0_CPU_24MHz:    equ 03h    ;     set CPU Freq bits for 24MHz Operation
 0004           OSC_CR0_CPU_1d5MHz:   equ 04h    ;     set CPU Freq bits for 1.5MHz Operation
 0005           OSC_CR0_CPU_750kHz:   equ 05h    ;     set CPU Freq bits for 750kHz Operation
 0006           OSC_CR0_CPU_187d5kHz: equ 06h    ;     set CPU Freq bits for 187.5kHz Operation
 0007           OSC_CR0_CPU_93d7kHz:  equ 07h    ;     set CPU Freq bits for 93.7kHz Operation
 0000           
 00E1           OSC_CR1:      equ 0E1h          ; System VC1/VC2 Divider Control Register  (RW)
 00F0           OSC_CR1_VC1:          equ 0F0h    ; MASK: System VC1 24MHz/External Clk divider
 000F           OSC_CR1_VC2:          equ 0Fh    ; MASK: System VC2 24MHz/External Clk divider
 0000           
 00E2           OSC_CR2:      equ 0E2h          ; Oscillator Control Register 2            (RW)
 0080           OSC_CR2_PLLGAIN:      equ 80h    ; MASK: High/Low gain
 0004           OSC_CR2_EXTCLKEN:     equ 04h    ; MASK: Enable/Disable External Clock
 0001           OSC_CR2_SYSCLKX2DIS:  equ 01h    ; MASK: Enable/Disable 48MHz clock source
 0000           
 00E3           VLT_CR:       equ 0E3h          ; Voltage Monitor Control Register         (RW)
 0080           VLT_CR_SMP:           equ 80h    ; MASK: Enable Switch Mode Pump
 0030           VLT_CR_PORLEV:        equ 30h    ; MASK: Mask for Power on Reset level control
 0000           VLT_CR_POR_LOW:       equ 00h    ;   Lowest  Precision Power-on Reset trip point
 0010           VLT_CR_POR_MID:       equ 10h    ;   Middle  Precision Power-on Reset trip point
 0020           VLT_CR_POR_HIGH:      equ 20h    ;   Highest Precision Power-on Reset trip point
 0008           VLT_CR_LVDTBEN:       equ 08h    ; MASK: Enable the CPU Throttle Back on LVD
 0007           VLT_CR_VM:            equ 07h    ; MASK: Mask for Voltage Monitor level setting
 0000           VLT_CR_3V0_POR:       equ 00h    ; -- deprecated symbols --
 0010           VLT_CR_4V5_POR:       equ 10h    ;    deprecated
 0020           VLT_CR_4V75_POR:      equ 20h    ;    deprecated
 0030           VLT_CR_DISABLE:       equ 30h    ;    deprecated
 0000           
 00E4           VLT_CMP:      equ 0E4h          ; Voltage Monitor Comparators Register     (R)
 0004           VLT_CMP_PUMP:         equ 04h    ; MASK: Vcc below SMP trip level
 0002           VLT_CMP_LVD:          equ 02h    ; MASK: Vcc below LVD trip level
 0001           VLT_CMP_PPOR:         equ 01h    ; MASK: Vcc below PPOR trip level
 0000           
 00E8           IMO_TR:       equ 0E8h          ; Internal Main Oscillator Trim Register   (W)
 00E9           ILO_TR:       equ 0E9h          ; Internal Low-speed Oscillator Trim       (W)
 00EA           BDG_TR:       equ 0EAh          ; Band Gap Trim Register                   (W)
 00EB           ECO_TR:       equ 0EBh          ; External Oscillator Trim Register        (W)
 0000           
 0000           ;;=============================================================================
 0000           ;;      M8C System Macros
 0000           ;;  These macros should be used when their functions are needed.
 0000           ;;=============================================================================
 0000           
 0000           ;----------------------------------------------------
 0000           ;  Swapping Register Banks
 0000           ;----------------------------------------------------
 0000               macro M8C_SetBank0
 0000               and   F, ~FLAG_XIO_MASK
 0000               macro M8C_SetBank1
 0000               or    F, FLAG_XIO_MASK
 0000               macro M8C_EnableGInt
 0000               or    F, FLAG_GLOBAL_IE
 0000               macro M8C_DisableGInt
 0000               and   F, ~FLAG_GLOBAL_IE
 0000               macro M8C_DisableIntMask
 0000               and   reg[@0], ~@1              ; disable specified interrupt enable bit
 0000               macro M8C_EnableIntMask
 0000               or    reg[@0], @1               ; enable specified interrupt enable bit
 0000               macro M8C_ClearIntFlag
 0000               mov   reg[@0], ~@1              ; clear specified interrupt enable bit
 0000               macro M8C_EnableWatchDog
 0000               and   reg[CPU_SCR0], ~CPU_SCR0_PORS_MASK
 0000               macro M8C_ClearWDT
 0000               mov   reg[RES_WDT], 00h
 0000               macro M8C_ClearWDTAndSleep
 0000               mov   reg[RES_WDT], 38h
 0000               macro M8C_Stall
 0000               or    reg[ASY_CR], ASY_CR_SYNCEN
 0000               macro M8C_Unstall
 0000               and   reg[ASY_CR], ~ASY_CR_SYNCEN
 0000               macro M8C_Sleep
 0000               or    reg[CPU_SCR0], CPU_SCR0_SLEEP_MASK
 0000               ; The next instruction to be executed depends on the state of the
 0000               ; various interrupt enable bits. If some interrupts are enabled
 0000               ; and the global interrupts are disabled, the next instruction will
 0000               ; be the one that follows the invocation of this macro. If global
 0000               ; interrupts are also enabled then the next instruction will be
 0000               ; from the interrupt vector table. If no interrupts are enabled
 0000               ; then the CPU sleeps forever.
 0000               macro M8C_Stop
 0000               ; In general, you probably don't want to do this, but here's how:
 0000               or    reg[CPU_SCR0], CPU_SCR0_STOP_MASK
 0000               ; Next instruction to be executed is located in the interrupt
 0000               ; vector table entry for Power-On Reset.
 0000               macro M8C_Reset
 0000               ; Restore CPU to the power-on reset state.
 0000               mov A, 0
 0000               SSC
 0000               ; Next non-supervisor instruction will be at interrupt vector 0.
 0000               macro Suspend_CodeCompressor
 0000               or   F, 0
 0000               macro Resume_CodeCompressor
 0000               add  SP, 0
 0000           SYSTEM_STACK_PAGE: equ 0   
 0000           SYSTEM_STACK_BASE_ADDR: equ 0h   
 0000           SYSTEM_LARGE_MEMORY_MODEL: equ 0   
 0001           SYSTEM_SMALL_MEMORY_MODEL: equ 1   
 0001           IMAGECRAFT: equ 1   
 0002           HITECH: equ 2   
 0001           TOOLCHAIN: equ IMAGECRAFT   
 0001           SYSTEM_TOOLS: equ 1   
 0001           SYSTEM_IDXPG_TRACKS_STK_PP: equ 1   
 0000           SYSTEM_IDXPG_TRACKS_IDX_PP: equ 0   
 0000           SYSTEM_MULTIPAGE_STACK: equ 0 
 0000           
 0000           
 0000           ;  ******* Function Class Definitions *******
 0000           ;
 0000           ;  These definitions are used to describe RAM access patterns. They provide
 0000           ;  documentation and they control prologue and epilogue macros that perform
 0000           ;  the necessary housekeeping functions for large memory model devices like
 0000           ;  the CY8C27000.
 0000           
 0001           RAM_USE_CLASS_1:               equ 1   ; PUSH, POP & I/O access
 0002           RAM_USE_CLASS_2:               equ 2   ; Indexed address mode on stack page
 0004           RAM_USE_CLASS_3:               equ 4   ; Indexed address mode to any page
 0008           RAM_USE_CLASS_4:               equ 8   ; Direct/Indirect address mode access
 0000           
 0000           ; ******* Hi Tech Specific *******
 0000           ; Turn on the expansion of all macros by default
                IF (TOOLCHAIN & HITECH)
                OPT EXPAND
                ENDIF
                ;  ******* Page Pointer Manipulation Macros *******
                ;
                ;  Most of the following macros are conditionally compiled so they only
                ;  produce code if the large memory model is selected.
                
                   ;-----------------------------------------------
                   ;  Set Stack Page Macro
                   ;-----------------------------------------------
                   ;
                   ;  DESC: Modify STK_PP in the large or small memory Models.
                   ;
                   ; INPUT: Constant (e.g., SYSTEM_STACK_PAGE) that specifies the RAM page on
                   ;        which stack operations like PUSH and POP store and retrieve their
                   ;        data
                   ;
                   ;  COST: 8 instruction cycles (in LMM only)
                
 0000              macro RAM_SETPAGE_STK( PG_NUMBER )
 0000              IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000                 mov reg[STK_PP], @PG_NUMBER
 0000              ENDIF
 0000              macro RAM_SETPAGE_CUR( PG_NUMBER )
 0000              IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000                 mov reg[CUR_PP], @PG_NUMBER
 0000              ENDIF
 0000              macro RAM_SETPAGE_IDX( PG_NUMBER )
 0000              IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000                 mov reg[IDX_PP], @PG_NUMBER
 0000              ENDIF
 0000              macro RAM_SETPAGE_MVR( PG_NUMBER )
 0000              IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000                 mov reg[MVR_PP], @PG_NUMBER
 0000              ENDIF
 0000              macro RAM_SETPAGE_MVW( PG_NUMBER )
 0000              IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000                 mov reg[MVW_PP], @PG_NUMBER
 0000              ENDIF
 0000              macro RAM_SETPAGE_IDX2STK
 0000              IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000                 IF ( SYSTEM_MULTIPAGE_STACK )
 0000                    mov   A, reg[STK_PP]
 0000                    mov   reg[IDX_PP], A
 0000                 ELSE
 0000                    RAM_SETPAGE_IDX SYSTEM_STACK_PAGE
 0000                 ENDIF
 0000              ENDIF
 0000              macro RAM_CHANGE_PAGE_MODE( MODE )
 0000              IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000                 and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
 0000                 or    F,  FLAG_PGMODE_MASK & @MODE
 0000              ENDIF
 0000              macro RAM_SET_NATIVE_PAGING
 0000              IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000              IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
 0000                 or    F,  FLAG_PGMODE_11b            ; LMM w/ IndexPage<==>StackPage
 0000              ENDIF ;  PGMODE LOCKED
 0000              IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
 0000                 or    F,  FLAG_PGMODE_10b            ; LMM with independent IndexPage
 0000              ENDIF ; PGMODE FREE
 0000              ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
 0000              macro RAM_RESTORE_NATIVE_PAGING
 0000              IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000              IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
 0000                 RAM_CHANGE_PAGE_MODE FLAG_PGMODE_11b ; LMM w/ IndexPage<==>StackPage
 0000              ENDIF ;  PGMODE LOCKED
 0000              IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
 0000                 RAM_CHANGE_PAGE_MODE FLAG_PGMODE_10b ; LMM with independent IndexPage
 0000              ENDIF ; PGMODE FREE
 0000              ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
 0000              macro RAM_X_POINTS_TO_STACKPAGE
 0000              IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000                 or   F, FLAG_PGMODE_01b
 0000              ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
 0000              macro RAM_X_POINTS_TO_INDEXPAGE
 0000              IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000                 and  F, ~FLAG_PGMODE_01b
 0000              ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
 0000              macro RAM_PROLOGUE( ACTUAL_CLASS )
 0000           
 0000              IF ( @ACTUAL_CLASS & RAM_USE_CLASS_1 )
 0000              ; Nothing to do
 0000              ENDIF ; RAM_USE_CLASS_1
 0000           
 0000              IF ( @ACTUAL_CLASS & RAM_USE_CLASS_2 )
 0000                 IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
 0000                    RAM_X_POINTS_TO_STACKPAGE         ; exit native paging mode!
 0000                 ENDIF
 0000              ENDIF ; RAM_USE_CLASS_2
 0000           
 0000              IF ( @ACTUAL_CLASS & RAM_USE_CLASS_3 )
 0000                 IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
 0000                    RAM_X_POINTS_TO_INDEXPAGE         ; exit native paging mode!
 0000                 ENDIF
 0000              ENDIF ; RAM_USE_CLASS_3
 0000           
 0000              IF ( @ACTUAL_CLASS & RAM_USE_CLASS_4 )
 0000              ; Nothing to do
 0000              ENDIF ; RAM_USE_CLASS_4
 0000           
 0000              macro RAM_EPILOGUE( ACTUAL_CLASS )
 0000           
 0000              IF ( @ACTUAL_CLASS & RAM_USE_CLASS_1 )
 0000              ; Nothing to do
 0000              ENDIF ; RAM_USE_CLASS_1
 0000           
 0000              IF ( @ACTUAL_CLASS & RAM_USE_CLASS_2 )
 0000                 RAM_RESTORE_NATIVE_PAGING
 0000              ENDIF ; RAM_USE_CLASS_2
 0000           
 0000              IF ( @ACTUAL_CLASS & RAM_USE_CLASS_3 )
 0000                 RAM_RESTORE_NATIVE_PAGING
 0000              ENDIF ; RAM_USE_CLASS_3
 0000           
 0000              IF ( @ACTUAL_CLASS & RAM_USE_CLASS_4 )
 0000              ; Nothing to do
 0000              ENDIF ; RAM_USE_CLASS_4
 0000           
 0000              macro REG_PRESERVE( IOReg )
 0000              mov   A, reg[ @IOReg ]
 0000              push  A
 0000              macro REG_RESTORE( IOReg )
 0000              pop   A
 0000              mov   reg[ @IOReg ], A
 0000              macro ISR_PRESERVE_PAGE_POINTERS
 0000              IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000                 REG_PRESERVE CUR_PP
 0000                 REG_PRESERVE IDX_PP
 0000                 REG_PRESERVE MVR_PP
 0000                 REG_PRESERVE MVW_PP
 0000              ENDIF
 0000              macro ISR_RESTORE_PAGE_POINTERS
 0000              IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000                 REG_RESTORE MVW_PP
 0000                 REG_RESTORE MVR_PP
 0000                 REG_RESTORE IDX_PP
 0000                 REG_RESTORE CUR_PP
 0000              ENDIF
 0000           macro PRESERVE_CPU_CONTEXT
 0000           IF ( TOOLCHAIN & IMAGECRAFT )
 0000             PUSH A
 0000             IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000               ISR_PRESERVE_PAGE_POINTERS
 0000               RAM_RESTORE_NATIVE_PAGING
 0000               MOV reg[CUR_PP], >__r0 ;Set CUR_PP to same page as virtual registers
 0000             ENDIF
 0000             MOV A, [__r0]
 0000             PUSH A
 0000             MOV A, [__r1]
 0000             PUSH A
 0000             MOV A, [__r2]
 0000             PUSH A
 0000             MOV A, [__r3]
 0000             PUSH A
 0000             MOV A, [__r4]
 0000             PUSH A
 0000             MOV A, [__r5]
 0000             PUSH A
 0000             MOV A, [__r6]
 0000             PUSH A
 0000             MOV A, [__r7]
 0000             PUSH A
 0000             MOV A, [__r8]
 0000             PUSH A
 0000             MOV A, [__r9]
 0000             PUSH A
 0000             MOV A, [__r10]
 0000             PUSH A
 0000             MOV A, [__r11]
 0000             PUSH A
 0000             MOV A, [__rX]
 0000             PUSH A
 0000             MOV A, [__rY]
 0000             PUSH A
 0000             MOV A, [__rZ]
 0000             PUSH A
 0000             IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000               MOV REG[CUR_PP], 0
 0000             ENDIF
 0000           ENDIF
 0000           macro RESTORE_CPU_CONTEXT
 0000           IF ( TOOLCHAIN & IMAGECRAFT )
 0000             IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000               RAM_RESTORE_NATIVE_PAGING
 0000               MOV reg[CUR_PP], >__r0 ;Set CUR_PP to same page as virtual registers
 0000             ENDIF
 0000             POP A
 0000             MOV [__rZ], A
 0000             POP A
 0000             MOV [__rY], A
 0000             POP A
 0000             MOV [__rX], A
 0000             POP A
 0000             MOV [__r11], A
 0000             POP A
 0000             MOV [__r10], A
 0000             POP A
 0000             MOV [__r9], A
 0000             POP A
 0000             MOV [__r8], A
 0000             POP A
 0000             MOV [__r7], A
 0000             POP A
 0000             MOV [__r6], A
 0000             POP A
 0000             MOV [__r5], A
 0000             POP A
 0000             MOV [__r4], A
 0000             POP A
 0000             MOV [__r3], A
 0000             POP A
 0000             MOV [__r2], A
 0000             POP A
 0000             MOV [__r1], A
 0000             POP A
 0000             MOV [__r0], A
 0000             IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000               ISR_RESTORE_PAGE_POINTERS
 0000               AND F, FLAG_PGMODE_0
 0000             ENDIF
 0000             POP A
 0000           ENDIF
 0000           IRQ_Data_ADDR:	equ	0h
 0100           IRQ_DriveMode_0_ADDR:	equ	100h
 0101           IRQ_DriveMode_1_ADDR:	equ	101h
 0003           IRQ_DriveMode_2_ADDR:	equ	3h
 0002           IRQ_GlobalSelect_ADDR:	equ	2h
 0102           IRQ_IntCtrl_0_ADDR:	equ	102h
 0103           IRQ_IntCtrl_1_ADDR:	equ	103h
 0001           IRQ_IntEn_ADDR:	equ	1h
 0008           IRQ_MASK:	equ	8h
 0000           ; IRQ_Data access macros
 0000           ;   GetIRQ_Data macro, return in a
 0000           macro GetIRQ_Data
 0000                   mov             a,[Port_0_Data_SHADE]
 0000                   and             a, 8h
 0000           macro SetIRQ_Data
 0000                   or              [Port_0_Data_SHADE], 8h
 0000                   mov             a, [Port_0_Data_SHADE]
 0000                   mov             reg[IRQ_Data_ADDR], a
 0000           macro ClearIRQ_Data
 0000                   and             [Port_0_Data_SHADE], ~8h
 0000                   mov             a, [Port_0_Data_SHADE]
 0000                   mov             reg[IRQ_Data_ADDR], a
 0000           CE_Data_ADDR:	equ	0h
 0100           CE_DriveMode_0_ADDR:	equ	100h
 0101           CE_DriveMode_1_ADDR:	equ	101h
 0003           CE_DriveMode_2_ADDR:	equ	3h
 0002           CE_GlobalSelect_ADDR:	equ	2h
 0102           CE_IntCtrl_0_ADDR:	equ	102h
 0103           CE_IntCtrl_1_ADDR:	equ	103h
 0001           CE_IntEn_ADDR:	equ	1h
 0002           CE_MASK:	equ	2h
 0000           ; CE_Data access macros
 0000           ;   GetCE_Data macro, return in a
 0000           macro GetCE_Data
 0000                   mov             a,[Port_0_Data_SHADE]
 0000                   and             a, 2h
 0000           macro SetCE_Data
 0000                   or              [Port_0_Data_SHADE], 2h
 0000                   mov             a, [Port_0_Data_SHADE]
 0000                   mov             reg[CE_Data_ADDR], a
 0000           macro ClearCE_Data
 0000                   and             [Port_0_Data_SHADE], ~2h
 0000                   mov             a, [Port_0_Data_SHADE]
 0000                   mov             reg[CE_Data_ADDR], a
 0000           CSN_Data_ADDR:	equ	0h
 0100           CSN_DriveMode_0_ADDR:	equ	100h
 0101           CSN_DriveMode_1_ADDR:	equ	101h
 0003           CSN_DriveMode_2_ADDR:	equ	3h
 0002           CSN_GlobalSelect_ADDR:	equ	2h
 0102           CSN_IntCtrl_0_ADDR:	equ	102h
 0103           CSN_IntCtrl_1_ADDR:	equ	103h
 0001           CSN_IntEn_ADDR:	equ	1h
 0004           CSN_MASK:	equ	4h
 0000           ; CSN_Data access macros
 0000           ;   GetCSN_Data macro, return in a
 0000           macro GetCSN_Data
 0000                   mov             a,[Port_0_Data_SHADE]
 0000                   and             a, 4h
 0000           macro SetCSN_Data
 0000                   or              [Port_0_Data_SHADE], 4h
 0000                   mov             a, [Port_0_Data_SHADE]
 0000                   mov             reg[CSN_Data_ADDR], a
 0000           macro ClearCSN_Data
 0000                   and             [Port_0_Data_SHADE], ~4h
 0000                   mov             a, [Port_0_Data_SHADE]
 0000                   mov             reg[CSN_Data_ADDR], a
 0000           MISO_Data_ADDR:	equ	0h
 0100           MISO_DriveMode_0_ADDR:	equ	100h
 0101           MISO_DriveMode_1_ADDR:	equ	101h
 0003           MISO_DriveMode_2_ADDR:	equ	3h
 0002           MISO_GlobalSelect_ADDR:	equ	2h
 0102           MISO_IntCtrl_0_ADDR:	equ	102h
 0103           MISO_IntCtrl_1_ADDR:	equ	103h
 0001           MISO_IntEn_ADDR:	equ	1h
 0010           MISO_MASK:	equ	10h
 0000           ; MISO_Data access macros
 0000           ;   GetMISO_Data macro, return in a
 0000           macro GetMISO_Data
 0000                   mov             a,[Port_0_Data_SHADE]
 0000                   and             a, 10h
 0000           macro SetMISO_Data
 0000                   or              [Port_0_Data_SHADE], 10h
 0000                   mov             a, [Port_0_Data_SHADE]
 0000                   mov             reg[MISO_Data_ADDR], a
 0000           macro ClearMISO_Data
 0000                   and             [Port_0_Data_SHADE], ~10h
 0000                   mov             a, [Port_0_Data_SHADE]
 0000                   mov             reg[MISO_Data_ADDR], a
 0000           SCK_Data_ADDR:	equ	0h
 0100           SCK_DriveMode_0_ADDR:	equ	100h
 0101           SCK_DriveMode_1_ADDR:	equ	101h
 0003           SCK_DriveMode_2_ADDR:	equ	3h
 0002           SCK_GlobalSelect_ADDR:	equ	2h
 0102           SCK_IntCtrl_0_ADDR:	equ	102h
 0103           SCK_IntCtrl_1_ADDR:	equ	103h
 0001           SCK_IntEn_ADDR:	equ	1h
 0020           SCK_MASK:	equ	20h
 0000           ; SCK_Data access macros
 0000           ;   GetSCK_Data macro, return in a
 0000           macro GetSCK_Data
 0000                   mov             a,[Port_0_Data_SHADE]
 0000                   and             a, 20h
 0000           macro SetSCK_Data
 0000                   or              [Port_0_Data_SHADE], 20h
 0000                   mov             a, [Port_0_Data_SHADE]
 0000                   mov             reg[SCK_Data_ADDR], a
 0000           macro ClearSCK_Data
 0000                   and             [Port_0_Data_SHADE], ~20h
 0000                   mov             a, [Port_0_Data_SHADE]
 0000                   mov             reg[SCK_Data_ADDR], a
 0000           MOSI_Data_ADDR:	equ	0h
 0100           MOSI_DriveMode_0_ADDR:	equ	100h
 0101           MOSI_DriveMode_1_ADDR:	equ	101h
 0003           MOSI_DriveMode_2_ADDR:	equ	3h
 0002           MOSI_GlobalSelect_ADDR:	equ	2h
 0102           MOSI_IntCtrl_0_ADDR:	equ	102h
 0103           MOSI_IntCtrl_1_ADDR:	equ	103h
 0001           MOSI_IntEn_ADDR:	equ	1h
 0040           MOSI_MASK:	equ	40h
 0000           ; MOSI_Data access macros
 0000           ;   GetMOSI_Data macro, return in a
 0000           macro GetMOSI_Data
 0000                   mov             a,[Port_0_Data_SHADE]
 0000                   and             a, 40h
 0000           macro SetMOSI_Data
 0000                   or              [Port_0_Data_SHADE], 40h
 0000                   mov             a, [Port_0_Data_SHADE]
 0000                   mov             reg[MOSI_Data_ADDR], a
 0000           macro ClearMOSI_Data
 0000                   and             [Port_0_Data_SHADE], ~40h
 0000                   mov             a, [Port_0_Data_SHADE]
 0000                   mov             reg[MOSI_Data_ADDR], a
 0008           LCDD4_Data_ADDR:	equ	8h
 0108           LCDD4_DriveMode_0_ADDR:	equ	108h
 0109           LCDD4_DriveMode_1_ADDR:	equ	109h
 000B           LCDD4_DriveMode_2_ADDR:	equ	bh
 000A           LCDD4_GlobalSelect_ADDR:	equ	ah
 010A           LCDD4_IntCtrl_0_ADDR:	equ	10ah
 010B           LCDD4_IntCtrl_1_ADDR:	equ	10bh
 0009           LCDD4_IntEn_ADDR:	equ	9h
 0001           LCDD4_MASK:	equ	1h
 0000           ; LCDD4_Data access macros
 0000           ;   GetLCDD4_Data macro, return in a
 0000           macro GetLCDD4_Data
 0000                   mov             a,[Port_2_Data_SHADE]
 0000                   and             a, 1h
 0000           macro SetLCDD4_Data
 0000                   or              [Port_2_Data_SHADE], 1h
 0000                   mov             a, [Port_2_Data_SHADE]
 0000                   mov             reg[LCDD4_Data_ADDR], a
 0000           macro ClearLCDD4_Data
 0000                   and             [Port_2_Data_SHADE], ~1h
 0000                   mov             a, [Port_2_Data_SHADE]
 0000                   mov             reg[LCDD4_Data_ADDR], a
 0000           macro GetLCDD4_DriveMode_0
 0000                   mov             a,[Port_2_DriveMode_0_SHADE]
 0000                   and             a, 1h
 0000           macro SetLCDD4_DriveMode_0
 0000                   or              [Port_2_DriveMode_0_SHADE], 1h
 0000                   mov             a, [Port_2_DriveMode_0_SHADE]
 0000                   mov             reg[LCDD4_Data_ADDR], a
 0000           macro ClearLCDD4_DriveMode_0
 0000                   and             [Port_2_DriveMode_0_SHADE], ~1h
 0000                   mov             a, [Port_2_DriveMode_0_SHADE]
 0000                   mov             reg[LCDD4_Data_ADDR], a
 0000           macro GetLCDD4_DriveMode_1
 0000                   mov             a,[Port_2_DriveMode_1_SHADE]
 0000                   and             a, 1h
 0000           macro SetLCDD4_DriveMode_1
 0000                   or              [Port_2_DriveMode_1_SHADE], 1h
 0000                   mov             a, [Port_2_DriveMode_1_SHADE]
 0000                   mov             reg[LCDD4_Data_ADDR], a
 0000           macro ClearLCDD4_DriveMode_1
 0000                   and             [Port_2_DriveMode_1_SHADE], ~1h
 0000                   mov             a, [Port_2_DriveMode_1_SHADE]
 0000                   mov             reg[LCDD4_Data_ADDR], a
 0008           LCDD5_Data_ADDR:	equ	8h
 0108           LCDD5_DriveMode_0_ADDR:	equ	108h
 0109           LCDD5_DriveMode_1_ADDR:	equ	109h
 000B           LCDD5_DriveMode_2_ADDR:	equ	bh
 000A           LCDD5_GlobalSelect_ADDR:	equ	ah
 010A           LCDD5_IntCtrl_0_ADDR:	equ	10ah
 010B           LCDD5_IntCtrl_1_ADDR:	equ	10bh
 0009           LCDD5_IntEn_ADDR:	equ	9h
 0002           LCDD5_MASK:	equ	2h
 0000           ; LCDD5_Data access macros
 0000           ;   GetLCDD5_Data macro, return in a
 0000           macro GetLCDD5_Data
 0000                   mov             a,[Port_2_Data_SHADE]
 0000                   and             a, 2h
 0000           macro SetLCDD5_Data
 0000                   or              [Port_2_Data_SHADE], 2h
 0000                   mov             a, [Port_2_Data_SHADE]
 0000                   mov             reg[LCDD5_Data_ADDR], a
 0000           macro ClearLCDD5_Data
 0000                   and             [Port_2_Data_SHADE], ~2h
 0000                   mov             a, [Port_2_Data_SHADE]
 0000                   mov             reg[LCDD5_Data_ADDR], a
 0000           macro GetLCDD5_DriveMode_0
 0000                   mov             a,[Port_2_DriveMode_0_SHADE]
 0000                   and             a, 2h
 0000           macro SetLCDD5_DriveMode_0
 0000                   or              [Port_2_DriveMode_0_SHADE], 2h
 0000                   mov             a, [Port_2_DriveMode_0_SHADE]
 0000                   mov             reg[LCDD5_Data_ADDR], a
 0000           macro ClearLCDD5_DriveMode_0
 0000                   and             [Port_2_DriveMode_0_SHADE], ~2h
 0000                   mov             a, [Port_2_DriveMode_0_SHADE]
 0000                   mov             reg[LCDD5_Data_ADDR], a
 0000           macro GetLCDD5_DriveMode_1
 0000                   mov             a,[Port_2_DriveMode_1_SHADE]
 0000                   and             a, 2h
 0000           macro SetLCDD5_DriveMode_1
 0000                   or              [Port_2_DriveMode_1_SHADE], 2h
 0000                   mov             a, [Port_2_DriveMode_1_SHADE]
 0000                   mov             reg[LCDD5_Data_ADDR], a
 0000           macro ClearLCDD5_DriveMode_1
 0000                   and             [Port_2_DriveMode_1_SHADE], ~2h
 0000                   mov             a, [Port_2_DriveMode_1_SHADE]
 0000                   mov             reg[LCDD5_Data_ADDR], a
 0008           LCDD6_Data_ADDR:	equ	8h
 0108           LCDD6_DriveMode_0_ADDR:	equ	108h
 0109           LCDD6_DriveMode_1_ADDR:	equ	109h
 000B           LCDD6_DriveMode_2_ADDR:	equ	bh
 000A           LCDD6_GlobalSelect_ADDR:	equ	ah
 010A           LCDD6_IntCtrl_0_ADDR:	equ	10ah
 010B           LCDD6_IntCtrl_1_ADDR:	equ	10bh
 0009           LCDD6_IntEn_ADDR:	equ	9h
 0004           LCDD6_MASK:	equ	4h
 0000           ; LCDD6_Data access macros
 0000           ;   GetLCDD6_Data macro, return in a
 0000           macro GetLCDD6_Data
 0000                   mov             a,[Port_2_Data_SHADE]
 0000                   and             a, 4h
 0000           macro SetLCDD6_Data
 0000                   or              [Port_2_Data_SHADE], 4h
 0000                   mov             a, [Port_2_Data_SHADE]
 0000                   mov             reg[LCDD6_Data_ADDR], a
 0000           macro ClearLCDD6_Data
 0000                   and             [Port_2_Data_SHADE], ~4h
 0000                   mov             a, [Port_2_Data_SHADE]
 0000                   mov             reg[LCDD6_Data_ADDR], a
 0000           macro GetLCDD6_DriveMode_0
 0000                   mov             a,[Port_2_DriveMode_0_SHADE]
 0000                   and             a, 4h
 0000           macro SetLCDD6_DriveMode_0
 0000                   or              [Port_2_DriveMode_0_SHADE], 4h
 0000                   mov             a, [Port_2_DriveMode_0_SHADE]
 0000                   mov             reg[LCDD6_Data_ADDR], a
 0000           macro ClearLCDD6_DriveMode_0
 0000                   and             [Port_2_DriveMode_0_SHADE], ~4h
 0000                   mov             a, [Port_2_DriveMode_0_SHADE]
 0000                   mov             reg[LCDD6_Data_ADDR], a
 0000           macro GetLCDD6_DriveMode_1
 0000                   mov             a,[Port_2_DriveMode_1_SHADE]
 0000                   and             a, 4h
 0000           macro SetLCDD6_DriveMode_1
 0000                   or              [Port_2_DriveMode_1_SHADE], 4h
 0000                   mov             a, [Port_2_DriveMode_1_SHADE]
 0000                   mov             reg[LCDD6_Data_ADDR], a
 0000           macro ClearLCDD6_DriveMode_1
 0000                   and             [Port_2_DriveMode_1_SHADE], ~4h
 0000                   mov             a, [Port_2_DriveMode_1_SHADE]
 0000                   mov             reg[LCDD6_Data_ADDR], a
 0008           LCDD7_Data_ADDR:	equ	8h
 0108           LCDD7_DriveMode_0_ADDR:	equ	108h
 0109           LCDD7_DriveMode_1_ADDR:	equ	109h
 000B           LCDD7_DriveMode_2_ADDR:	equ	bh
 000A           LCDD7_GlobalSelect_ADDR:	equ	ah
 010A           LCDD7_IntCtrl_0_ADDR:	equ	10ah
 010B           LCDD7_IntCtrl_1_ADDR:	equ	10bh
 0009           LCDD7_IntEn_ADDR:	equ	9h
 0008           LCDD7_MASK:	equ	8h
 0000           ; LCDD7_Data access macros
 0000           ;   GetLCDD7_Data macro, return in a
 0000           macro GetLCDD7_Data
 0000                   mov             a,[Port_2_Data_SHADE]
 0000                   and             a, 8h
 0000           macro SetLCDD7_Data
 0000                   or              [Port_2_Data_SHADE], 8h
 0000                   mov             a, [Port_2_Data_SHADE]
 0000                   mov             reg[LCDD7_Data_ADDR], a
 0000           macro ClearLCDD7_Data
 0000                   and             [Port_2_Data_SHADE], ~8h
 0000                   mov             a, [Port_2_Data_SHADE]
 0000                   mov             reg[LCDD7_Data_ADDR], a
 0000           macro GetLCDD7_DriveMode_0
 0000                   mov             a,[Port_2_DriveMode_0_SHADE]
 0000                   and             a, 8h
 0000           macro SetLCDD7_DriveMode_0
 0000                   or              [Port_2_DriveMode_0_SHADE], 8h
 0000                   mov             a, [Port_2_DriveMode_0_SHADE]
 0000                   mov             reg[LCDD7_Data_ADDR], a
 0000           macro ClearLCDD7_DriveMode_0
 0000                   and             [Port_2_DriveMode_0_SHADE], ~8h
 0000                   mov             a, [Port_2_DriveMode_0_SHADE]
 0000                   mov             reg[LCDD7_Data_ADDR], a
 0000           macro GetLCDD7_DriveMode_1
 0000                   mov             a,[Port_2_DriveMode_1_SHADE]
 0000                   and             a, 8h
 0000           macro SetLCDD7_DriveMode_1
 0000                   or              [Port_2_DriveMode_1_SHADE], 8h
 0000                   mov             a, [Port_2_DriveMode_1_SHADE]
 0000                   mov             reg[LCDD7_Data_ADDR], a
 0000           macro ClearLCDD7_DriveMode_1
 0000                   and             [Port_2_DriveMode_1_SHADE], ~8h
 0000                   mov             a, [Port_2_DriveMode_1_SHADE]
 0000                   mov             reg[LCDD7_Data_ADDR], a
 0008           LCDE_Data_ADDR:	equ	8h
 0108           LCDE_DriveMode_0_ADDR:	equ	108h
 0109           LCDE_DriveMode_1_ADDR:	equ	109h
 000B           LCDE_DriveMode_2_ADDR:	equ	bh
 000A           LCDE_GlobalSelect_ADDR:	equ	ah
 010A           LCDE_IntCtrl_0_ADDR:	equ	10ah
 010B           LCDE_IntCtrl_1_ADDR:	equ	10bh
 0009           LCDE_IntEn_ADDR:	equ	9h
 0010           LCDE_MASK:	equ	10h
 0000           ; LCDE_Data access macros
 0000           ;   GetLCDE_Data macro, return in a
 0000           macro GetLCDE_Data
 0000                   mov             a,[Port_2_Data_SHADE]
 0000                   and             a, 10h
 0000           macro SetLCDE_Data
 0000                   or              [Port_2_Data_SHADE], 10h
 0000                   mov             a, [Port_2_Data_SHADE]
 0000                   mov             reg[LCDE_Data_ADDR], a
 0000           macro ClearLCDE_Data
 0000                   and             [Port_2_Data_SHADE], ~10h
 0000                   mov             a, [Port_2_Data_SHADE]
 0000                   mov             reg[LCDE_Data_ADDR], a
 0000           macro GetLCDE_DriveMode_0
 0000                   mov             a,[Port_2_DriveMode_0_SHADE]
 0000                   and             a, 10h
 0000           macro SetLCDE_DriveMode_0
 0000                   or              [Port_2_DriveMode_0_SHADE], 10h
 0000                   mov             a, [Port_2_DriveMode_0_SHADE]
 0000                   mov             reg[LCDE_Data_ADDR], a
 0000           macro ClearLCDE_DriveMode_0
 0000                   and             [Port_2_DriveMode_0_SHADE], ~10h
 0000                   mov             a, [Port_2_DriveMode_0_SHADE]
 0000                   mov             reg[LCDE_Data_ADDR], a
 0000           macro GetLCDE_DriveMode_1
 0000                   mov             a,[Port_2_DriveMode_1_SHADE]
 0000                   and             a, 10h
 0000           macro SetLCDE_DriveMode_1
 0000                   or              [Port_2_DriveMode_1_SHADE], 10h
 0000                   mov             a, [Port_2_DriveMode_1_SHADE]
 0000                   mov             reg[LCDE_Data_ADDR], a
 0000           macro ClearLCDE_DriveMode_1
 0000                   and             [Port_2_DriveMode_1_SHADE], ~10h
 0000                   mov             a, [Port_2_DriveMode_1_SHADE]
 0000                   mov             reg[LCDE_Data_ADDR], a
 0008           LCDRS_Data_ADDR:	equ	8h
 0108           LCDRS_DriveMode_0_ADDR:	equ	108h
 0109           LCDRS_DriveMode_1_ADDR:	equ	109h
 000B           LCDRS_DriveMode_2_ADDR:	equ	bh
 000A           LCDRS_GlobalSelect_ADDR:	equ	ah
 010A           LCDRS_IntCtrl_0_ADDR:	equ	10ah
 010B           LCDRS_IntCtrl_1_ADDR:	equ	10bh
 0009           LCDRS_IntEn_ADDR:	equ	9h
 0020           LCDRS_MASK:	equ	20h
 0000           ; LCDRS_Data access macros
 0000           ;   GetLCDRS_Data macro, return in a
 0000           macro GetLCDRS_Data
 0000                   mov             a,[Port_2_Data_SHADE]
 0000                   and             a, 20h
 0000           macro SetLCDRS_Data
 0000                   or              [Port_2_Data_SHADE], 20h
 0000                   mov             a, [Port_2_Data_SHADE]
 0000                   mov             reg[LCDRS_Data_ADDR], a
 0000           macro ClearLCDRS_Data
 0000                   and             [Port_2_Data_SHADE], ~20h
 0000                   mov             a, [Port_2_Data_SHADE]
 0000                   mov             reg[LCDRS_Data_ADDR], a
 0000           macro GetLCDRS_DriveMode_0
 0000                   mov             a,[Port_2_DriveMode_0_SHADE]
 0000                   and             a, 20h
 0000           macro SetLCDRS_DriveMode_0
 0000                   or              [Port_2_DriveMode_0_SHADE], 20h
 0000                   mov             a, [Port_2_DriveMode_0_SHADE]
 0000                   mov             reg[LCDRS_Data_ADDR], a
 0000           macro ClearLCDRS_DriveMode_0
 0000                   and             [Port_2_DriveMode_0_SHADE], ~20h
 0000                   mov             a, [Port_2_DriveMode_0_SHADE]
 0000                   mov             reg[LCDRS_Data_ADDR], a
 0000           macro GetLCDRS_DriveMode_1
 0000                   mov             a,[Port_2_DriveMode_1_SHADE]
 0000                   and             a, 20h
 0000           macro SetLCDRS_DriveMode_1
 0000                   or              [Port_2_DriveMode_1_SHADE], 20h
 0000                   mov             a, [Port_2_DriveMode_1_SHADE]
 0000                   mov             reg[LCDRS_Data_ADDR], a
 0000           macro ClearLCDRS_DriveMode_1
 0000                   and             [Port_2_DriveMode_1_SHADE], ~20h
 0000                   mov             a, [Port_2_DriveMode_1_SHADE]
 0000                   mov             reg[LCDRS_Data_ADDR], a
 0008           LCDRW_Data_ADDR:	equ	8h
 0108           LCDRW_DriveMode_0_ADDR:	equ	108h
 0109           LCDRW_DriveMode_1_ADDR:	equ	109h
 000B           LCDRW_DriveMode_2_ADDR:	equ	bh
 000A           LCDRW_GlobalSelect_ADDR:	equ	ah
 010A           LCDRW_IntCtrl_0_ADDR:	equ	10ah
 010B           LCDRW_IntCtrl_1_ADDR:	equ	10bh
 0009           LCDRW_IntEn_ADDR:	equ	9h
 0040           LCDRW_MASK:	equ	40h
 0000           ; LCDRW_Data access macros
 0000           ;   GetLCDRW_Data macro, return in a
 0000           macro GetLCDRW_Data
 0000                   mov             a,[Port_2_Data_SHADE]
 0000                   and             a, 40h
 0000           macro SetLCDRW_Data
 0000                   or              [Port_2_Data_SHADE], 40h
 0000                   mov             a, [Port_2_Data_SHADE]
 0000                   mov             reg[LCDRW_Data_ADDR], a
 0000           macro ClearLCDRW_Data
 0000                   and             [Port_2_Data_SHADE], ~40h
 0000                   mov             a, [Port_2_Data_SHADE]
 0000                   mov             reg[LCDRW_Data_ADDR], a
 0000           macro GetLCDRW_DriveMode_0
 0000                   mov             a,[Port_2_DriveMode_0_SHADE]
 0000                   and             a, 40h
 0000           macro SetLCDRW_DriveMode_0
 0000                   or              [Port_2_DriveMode_0_SHADE], 40h
 0000                   mov             a, [Port_2_DriveMode_0_SHADE]
 0000                   mov             reg[LCDRW_Data_ADDR], a
 0000           macro ClearLCDRW_DriveMode_0
 0000                   and             [Port_2_DriveMode_0_SHADE], ~40h
 0000                   mov             a, [Port_2_DriveMode_0_SHADE]
 0000                   mov             reg[LCDRW_Data_ADDR], a
 0000           macro GetLCDRW_DriveMode_1
 0000                   mov             a,[Port_2_DriveMode_1_SHADE]
 0000                   and             a, 40h
 0000           macro SetLCDRW_DriveMode_1
 0000                   or              [Port_2_DriveMode_1_SHADE], 40h
 0000                   mov             a, [Port_2_DriveMode_1_SHADE]
 0000                   mov             reg[LCDRW_Data_ADDR], a
 0000           macro ClearLCDRW_DriveMode_1
 0000                   and             [Port_2_DriveMode_1_SHADE], ~40h
 0000                   mov             a, [Port_2_DriveMode_1_SHADE]
 0000                   mov             reg[LCDRW_Data_ADDR], a
 0010           FLAG_XIO_MASK:  equ 10h
 0008           FLAG_SUPER:     equ 08h
 0004           FLAG_CARRY:     equ 04h
 0002           FLAG_ZERO:      equ 02h
 0001           FLAG_GLOBAL_IE: equ 01h
 0000           
 0000           
 0000           ;;=============================================================================
 0000           ;;      Register Space, Bank 0
 0000           ;;=============================================================================
 0000           
 0000           ;------------------------------------------------
 0000           ;  Port Registers
 0000           ;  Note: Also see this address range in Bank 1.
 0000           ;------------------------------------------------
 0000           ; Port 0
 0000           PRT0DR:       equ 00h          ; Port 0 Data Register                     (RW)
 0001           PRT0IE:       equ 01h          ; Port 0 Interrupt Enable Register         (RW)
 0002           PRT0GS:       equ 02h          ; Port 0 Global Select Register            (RW)
 0003           PRT0DM2:      equ 03h          ; Port 0 Drive Mode 2                      (RW)
 0000           ; Port 1
 0004           PRT1DR:       equ 04h          ; Port 1 Data Register                     (RW)
 0005           PRT1IE:       equ 05h          ; Port 1 Interrupt Enable Register         (RW)
 0006           PRT1GS:       equ 06h          ; Port 1 Global Select Register            (RW)
 0007           PRT1DM2:      equ 07h          ; Port 1 Drive Mode 2                      (RW)
 0000           ; Port 2
 0008           PRT2DR:       equ 08h          ; Port 2 Data Register                     (RW)
 0009           PRT2IE:       equ 09h          ; Port 2 Interrupt Enable Register         (RW)
 000A           PRT2GS:       equ 0Ah          ; Port 2 Global Select Register            (RW)
 000B           PRT2DM2:      equ 0Bh          ; Port 2 Drive Mode 2                      (RW)
 0000           ; Port 3
 000C           PRT3DR:       equ 0Ch          ; Port 3 Data Register                     (RW)
 000D           PRT3IE:       equ 0Dh          ; Port 3 Interrupt Enable Register         (RW)
 000E           PRT3GS:       equ 0Eh          ; Port 3 Global Select Register            (RW)
 000F           PRT3DM2:      equ 0Fh          ; Port 3 Drive Mode 2                      (RW)
 0000           ; Port 4
 0010           PRT4DR:       equ 10h          ; Port 4 Data Register                     (RW)
 0011           PRT4IE:       equ 11h          ; Port 4 Interrupt Enable Register         (RW)
 0012           PRT4GS:       equ 12h          ; Port 4 Global Select Register            (RW)
 0013           PRT4DM2:      equ 13h          ; Port 4 Drive Mode 2                      (RW)
 0000           ; Port 5
 0014           PRT5DR:       equ 14h          ; Port 5 Data Register                     (RW)
 0015           PRT5IE:       equ 15h          ; Port 5 Interrupt Enable Register         (RW)
 0016           PRT5GS:       equ 16h          ; Port 5 Global Select Register            (RW)
 0017           PRT5DM2:      equ 17h          ; Port 5 Drive Mode 2                      (RW)
 0000           
 0000           ;------------------------------------------------
 0000           ;  Digital PSoC(tm) block Registers
 0000           ;  Note: Also see this address range in Bank 1.
 0000           ;------------------------------------------------
 0000           ; Digital PSoC block 00, Basic Type B
 0020           DBB00DR0:     equ 20h          ; data register 0                          (#)
 0021           DBB00DR1:     equ 21h          ; data register 1                          (W)
 0022           DBB00DR2:     equ 22h          ; data register 2                          (RW)
 0023           DBB00CR0:     equ 23h          ; control & status register 0              (#)
 0000           
 0000           ; Digital PSoC block 01, Basic Type B
 0024           DBB01DR0:     equ 24h          ; data register 0                          (#)
 0025           DBB01DR1:     equ 25h          ; data register 1                          (W)
 0026           DBB01DR2:     equ 26h          ; data register 2                          (RW)
 0027           DBB01CR0:     equ 27h          ; control & status register 0              (#)
 0000           
 0000           ; Digital PSoC block 02, Communications Type B
 0028           DCB02DR0:     equ 28h          ; data register 0                          (#)
 0029           DCB02DR1:     equ 29h          ; data register 1                          (W)
 002A           DCB02DR2:     equ 2Ah          ; data register 2                          (RW)
 002B           DCB02CR0:     equ 2Bh          ; control & status register 0              (#)
 0000           
 0000           ; Digital PSoC block 03, Communications Type B
 002C           DCB03DR0:     equ 2Ch          ; data register 0                          (#)
 002D           DCB03DR1:     equ 2Dh          ; data register 1                          (W)
 002E           DCB03DR2:     equ 2Eh          ; data register 2                          (RW)
 002F           DCB03CR0:     equ 2Fh          ; control & status register 0              (#)
 0000           
 0000           ; Digital PSoC block 10, Basic Type B
 0030           DBB10DR0:     equ 30h          ; data register 0                          (#)
 0031           DBB10DR1:     equ 31h          ; data register 1                          (W)
 0032           DBB10DR2:     equ 32h          ; data register 2                          (RW)
 0033           DBB10CR0:     equ 33h          ; control & status register 0              (#)
 0000           
 0000           ; Digital PSoC block 11, Basic Type B
 0034           DBB11DR0:     equ 34h          ; data register 0                          (#)
 0035           DBB11DR1:     equ 35h          ; data register 1                          (W)
 0036           DBB11DR2:     equ 36h          ; data register 2                          (RW)
 0037           DBB11CR0:     equ 37h          ; control & status register 0              (#)
 0000           
 0000           ; Digital PSoC block 12, Communications Type B
 0038           DCB12DR0:     equ 38h          ; data register 0                          (#)
 0039           DCB12DR1:     equ 39h          ; data register 1                          (W)
 003A           DCB12DR2:     equ 3Ah          ; data register 2                          (RW)
 003B           DCB12CR0:     equ 3Bh          ; control & status register 0              (#)
 0000           
 0000           ; Digital PSoC block 13, Communications Type B
 003C           DCB13DR0:     equ 3Ch          ; data register 0                          (#)
 003D           DCB13DR1:     equ 3Dh          ; data register 1                          (W)
 003E           DCB13DR2:     equ 3Eh          ; data register 2                          (RW)
 003F           DCB13CR0:     equ 3Fh          ; control & status register 0              (#)
 0000           
 0000           ;-------------------------------------
 0000           ;  Analog Resource Control Registers
 0000           ;-------------------------------------
 0060           AMX_IN:       equ 60h          ; Analog Input Multiplexor Control         (RW)
 00C0           AMX_IN_ACI3:          equ 0C0h    ; MASK: column 3 input mux
 0030           AMX_IN_ACI2:          equ 30h    ; MASK: column 2 input mux
 000C           AMX_IN_ACI1:          equ 0Ch    ; MASK: column 1 input mux
 0003           AMX_IN_ACI0:          equ 03h    ; MASK: column 0 input mux
 0000           
 0063           ARF_CR:       equ 63h          ; Analog Reference Control Register        (RW)
 0040           ARF_CR_HBE:           equ 40h    ; MASK: Bias level control
 0038           ARF_CR_REF:           equ 38h    ; MASK: Analog Reference controls
 0007           ARF_CR_REFPWR:        equ 07h    ; MASK: Analog Reference power
 0004           ARF_CR_APWR:          equ 04h    ; MASK: use deprecated; see datasheet
 0003           ARF_CR_SCPWR:         equ 03h    ; MASK: Switched Cap block power
 0000           
 0064           CMP_CR0:      equ 64h          ; Analog Comparator Bus 0 Register         (#)
 0080           CMP_CR0_COMP3:        equ 80h    ; MASK: Column 3 comparator state        (R)
 0040           CMP_CR0_COMP2:        equ 40h    ; MASK: Column 2 comparator state        (R)
 0020           CMP_CR0_COMP1:        equ 20h    ; MASK: Column 1 comparator state        (R)
 0010           CMP_CR0_COMP0:        equ 10h    ; MASK: Column 0 comparator state        (R)
 0008           CMP_CR0_AINT3:        equ 08h    ; MASK: Column 3 interrupt source        (RW)
 0004           CMP_CR0_AINT2:        equ 04h    ; MASK: Column 2 interrupt source        (RW)
 0002           CMP_CR0_AINT1:        equ 02h    ; MASK: Column 1 interrupt source        (RW)
 0001           CMP_CR0_AINT0:        equ 01h    ; MASK: Column 0 interrupt source        (RW)
 0000           
 0065           ASY_CR:       equ 65h          ; Analog Synchronizaton Control            (#)
 0070           ASY_CR_SARCOUNT:      equ 70h    ; MASK: SAR support: resolution count    (W)
 0008           ASY_CR_SARSIGN:       equ 08h    ; MASK: SAR support: sign                (RW)
 0006           ASY_CR_SARCOL:        equ 06h    ; MASK: SAR support: column spec         (RW)
 0001           ASY_CR_SYNCEN:        equ 01h    ; MASK: Stall bit                        (RW)
 0000           
 0066           CMP_CR1:      equ 66h          ; Analog Comparator Bus 1 Register         (RW)
 0080           CMP_CR1_ASYNCH3:      equ 80h    ; MASK: Column 3 comparator bus synch
 0040           CMP_CR1_ASYNCH2:      equ 40h    ; MASK: Column 2 comparator bus synch
 0020           CMP_CR1_ASYNCH1:      equ 20h    ; MASK: Column 1 comparator bus synch
 0010           CMP_CR1_ASYNCH0:      equ 10h    ; MASK: Column 0 comparator bus synch
 0000           
 0000           ;---------------------------------------------------
 0000           ;  Analog PSoC block Registers
 0000           ;
 0000           ;  Note: the following registers are mapped into
 0000           ;  both register bank 0 AND register bank 1.
 0000           ;---------------------------------------------------
 0000           
 0000           ; Continuous Time PSoC block Type B Row 0 Col 0
 0070           ACB00CR3:     equ 70h          ; Control register 3                       (RW)
 0071           ACB00CR0:     equ 71h          ; Control register 0                       (RW)
 0072           ACB00CR1:     equ 72h          ; Control register 1                       (RW)
 0073           ACB00CR2:     equ 73h          ; Control register 2                       (RW)
 0000           
 0000           ; Continuous Time PSoC block Type B Row 0 Col 1
 0074           ACB01CR3:     equ 74h          ; Control register 3                       (RW)
 0075           ACB01CR0:     equ 75h          ; Control register 0                       (RW)
 0076           ACB01CR1:     equ 76h          ; Control register 1                       (RW)
 0077           ACB01CR2:     equ 77h          ; Control register 2                       (RW)
 0000           
 0000           ; Continuous Time PSoC block Type B Row 0 Col 2
 0078           ACB02CR3:     equ 78h          ; Control register 3                       (RW)
 0079           ACB02CR0:     equ 79h          ; Control register 0                       (RW)
 007A           ACB02CR1:     equ 7Ah          ; Control register 1                       (RW)
 007B           ACB02CR2:     equ 7Bh          ; Control register 2                       (RW)
 0000           
 0000           ; Continuous Time PSoC block Type B Row 0 Col 3
 007C           ACB03CR3:     equ 7Ch          ; Control register 3                       (RW)
 007D           ACB03CR0:     equ 7Dh          ; Control register 0                       (RW)
 007E           ACB03CR1:     equ 7Eh          ; Control register 1                       (RW)
 007F           ACB03CR2:     equ 7Fh          ; Control register 2                       (RW)
 0000           
 0000           ; Switched Cap PSoC blockType C Row 1 Col 0
 0080           ASC10CR0:     equ 80h          ; Control register 0                       (RW)
 0081           ASC10CR1:     equ 81h          ; Control register 1                       (RW)
 0082           ASC10CR2:     equ 82h          ; Control register 2                       (RW)
 0083           ASC10CR3:     equ 83h          ; Control register 3                       (RW)
 0000           
 0000           ; Switched Cap PSoC blockType D Row 1 Col 1
 0084           ASD11CR0:     equ 84h          ; Control register 0                       (RW)
 0085           ASD11CR1:     equ 85h          ; Control register 1                       (RW)
 0086           ASD11CR2:     equ 86h          ; Control register 2                       (RW)
 0087           ASD11CR3:     equ 87h          ; Control register 3                       (RW)
 0000           
 0000           ; Switched Cap PSoC blockType C Row 1 Col 2
 0088           ASC12CR0:     equ 88h          ; Control register 0                       (RW)
 0089           ASC12CR1:     equ 89h          ; Control register 1                       (RW)
 008A           ASC12CR2:     equ 8Ah          ; Control register 2                       (RW)
 008B           ASC12CR3:     equ 8Bh          ; Control register 3                       (RW)
 0000           
 0000           ; Switched Cap PSoC blockType D Row 1 Col 3
 008C           ASD13CR0:     equ 8Ch          ; Control register 0                       (RW)
 008D           ASD13CR1:     equ 8Dh          ; Control register 1                       (RW)
 008E           ASD13CR2:     equ 8Eh          ; Control register 2                       (RW)
 008F           ASD13CR3:     equ 8Fh          ; Control register 3                       (RW)
 0000           
 0000           ; Switched Cap PSoC blockType D Row 2 Col 0
 0090           ASD20CR0:     equ 90h          ; Control register 0                       (RW)
 0091           ASD20CR1:     equ 91h          ; Control register 1                       (RW)
 0092           ASD20CR2:     equ 92h          ; Control register 2                       (RW)
 0093           ASD20CR3:     equ 93h          ; Control register 3                       (RW)
 0000           
 0000           ; Switched Cap PSoC blockType C Row 2 Col 1
 0094           ASC21CR0:     equ 94h          ; Control register 0                       (RW)
 0095           ASC21CR1:     equ 95h          ; Control register 1                       (RW)
 0096           ASC21CR2:     equ 96h          ; Control register 2                       (RW)
 0097           ASC21CR3:     equ 97h          ; Control register 3                       (RW)
 0000           
 0000           ; Switched Cap PSoC blockType D Row 2 Col 2
 0098           ASD22CR0:     equ 98h          ; Control register 0                       (RW)
 0099           ASD22CR1:     equ 99h          ; Control register 1                       (RW)
 009A           ASD22CR2:     equ 9Ah          ; Control register 2                       (RW)
 009B           ASD22CR3:     equ 9Bh          ; Control register 3                       (RW)
 0000           
 0000           ; Switched Cap PSoC blockType C Row 2 Col 3
 009C           ASC23CR0:     equ 9Ch          ; Control register 0                       (RW)
 009D           ASC23CR1:     equ 9Dh          ; Control register 1                       (RW)
 009E           ASC23CR2:     equ 9Eh          ; Control register 2                       (RW)
 009F           ASC23CR3:     equ 9Fh          ; Control register 3                       (RW)
 0000           
 0000           ;------------------------------------------------
 0000           ;  Row Digital Interconnects
 0000           ;
 0000           ;  Note: the following registers are mapped into
 0000           ;  both register bank 0 AND register bank 1.
 0000           ;------------------------------------------------
 0000           
 00B0           RDI0RI:       equ 0B0h          ; Row Digital Interconnect Row 0 Input Reg (RW)
 00B1           RDI0SYN:      equ 0B1h          ; Row Digital Interconnect Row 0 Sync Reg  (RW)
 00B2           RDI0IS:       equ 0B2h          ; Row 0 Input Select Register              (RW)
 00B3           RDI0LT0:      equ 0B3h          ; Row 0 Look Up Table Register 0           (RW)
 00B4           RDI0LT1:      equ 0B4h          ; Row 0 Look Up Table Register 1           (RW)
 00B5           RDI0RO0:      equ 0B5h          ; Row 0 Output Register 0                  (RW)
 00B6           RDI0RO1:      equ 0B6h          ; Row 0 Output Register 1                  (RW)
 0000           
 00B8           RDI1RI:       equ 0B8h          ; Row Digital Interconnect Row 1 Input Reg (RW)
 00B9           RDI1SYN:      equ 0B9h          ; Row Digital Interconnect Row 1 Sync Reg  (RW)
 00BA           RDI1IS:       equ 0BAh          ; Row 1 Input Select Register              (RW)
 00BB           RDI1LT0:      equ 0BBh          ; Row 1 Look Up Table Register 0           (RW)
 00BC           RDI1LT1:      equ 0BCh          ; Row 1 Look Up Table Register 1           (RW)
 00BD           RDI1RO0:      equ 0BDh          ; Row 1 Output Register 0                  (RW)
 00BE           RDI1RO1:      equ 0BEh          ; Row 1 Output Register 1                  (RW)
 0000           
 0000           ;------------------------------------------------
 0000           ;  I2C Configuration Registers
 0000           ;------------------------------------------------
 00D6           I2C_CFG:      equ 0D6h          ; I2C Configuration Register               (RW)
 0040           I2C_CFG_PINSEL:         equ 40h  ; MASK: Select P1[0] and P1[1] for I2C
 0020           I2C_CFG_BUSERR_IE:      equ 20h  ; MASK: Enable interrupt on Bus Error
 0010           I2C_CFG_STOP_IE:        equ 10h  ; MASK: Enable interrupt on Stop
 0000           I2C_CFG_CLK_RATE_100K:  equ 00h  ; MASK: I2C clock set at 100K
 0004           I2C_CFG_CLK_RATE_400K:  equ 04h  ; MASK: I2C clock set at 400K
 0008           I2C_CFG_CLK_RATE_50K:   equ 08h  ; MASK: I2C clock set at 50K
 000C           I2C_CFG_CLK_RATE_1M6:   equ 0Ch  ; MASK: I2C clock set at 1.6M
 000C           I2C_CFG_CLK_RATE:       equ 0Ch  ; MASK: I2C clock rate setting mask
 0002           I2C_CFG_PSELECT_MASTER: equ 02h  ; MASK: Enable I2C Master
 0001           I2C_CFG_PSELECT_SLAVE:  equ 01h  ; MASK: Enable I2C Slave
 0000           
 00D7           I2C_SCR:      equ 0D7h          ; I2C Status and Control Register          (#)
 0080           I2C_SCR_BUSERR:        equ 80h   ; MASK: I2C Bus Error detected           (RC)
 0040           I2C_SCR_LOSTARB:       equ 40h   ; MASK: I2C Arbitration lost             (RC)
 0020           I2C_SCR_STOP:          equ 20h   ; MASK: I2C Stop detected                (RC)
 0010           I2C_SCR_ACK:           equ 10h   ; MASK: ACK the last byte                (RW)
 0008           I2C_SCR_ADDR:          equ 08h   ; MASK: Address rcv'd is Slave address   (RC)
 0004           I2C_SCR_XMIT:          equ 04h   ; MASK: Set transfer to tranmit mode     (RW)
 0002           I2C_SCR_LRB:           equ 02h   ; MASK: Last recieved bit                (RC)
 0001           I2C_SCR_BYTECOMPLETE:  equ 01h   ; MASK: Transfer of byte complete        (RC)
 0000           
 00D8           I2C_DR:       equ 0D8h          ; I2C Data Register                        (RW)
 0000           
 00D9           I2C_MSCR:     equ 0D9h          ; I2C Master Status and Control Register   (#)
 0008           I2C_MSCR_BUSY:         equ 08h   ; MASK: I2C Busy (Start detected)        (R)
 0004           I2C_MSCR_MODE:         equ 04h   ; MASK: Start has been generated         (R)
 0002           I2C_MSCR_RESTART:      equ 02h   ; MASK: Generate a Restart condition     (RW)
 0001           I2C_MSCR_START:        equ 01h   ; MASK: Generate a Start condition       (RW)
 0000           
 0000           ;------------------------------------------------
 0000           ;  System and Global Resource Registers
 0000           ;------------------------------------------------
 00DA           INT_CLR0:     equ 0DAh          ; Interrupt Clear Register 0               (RW)
 0000                                          ; Use INT_MSK0 bit field masks
 00DB           INT_CLR1:     equ 0DBh          ; Interrupt Clear Register 1               (RW)
 0000                                          ; Use INT_MSK1 bit field masks
 00DD           INT_CLR3:     equ 0DDh          ; Interrupt Clear Register 3               (RW)
 0000                                          ; Use INT_MSK3 bit field masks
 0000           
 00DE           INT_MSK3:     equ 0DEh          ; I2C and Software Mask Register           (RW)
 0080           INT_MSK3_ENSWINT:          equ 80h ; MASK: enable/disable SW interrupt
 0001           INT_MSK3_I2C:              equ 01h ; MASK: enable/disable I2C interrupt
 0000           
 00E0           INT_MSK0:     equ 0E0h          ; General Interrupt Mask Register          (RW)
 0080           INT_MSK0_VC3:              equ 80h ; MASK: enable/disable VC3 interrupt
 0040           INT_MSK0_SLEEP:            equ 40h ; MASK: enable/disable sleep interrupt
 0020           INT_MSK0_GPIO:             equ 20h ; MASK: enable/disable GPIO  interrupt
 0010           INT_MSK0_ACOLUMN_3:        equ 10h ; MASK: enable/disable Analog col 3 interrupt
 0008           INT_MSK0_ACOLUMN_2:        equ 08h ; MASK: enable/disable Analog col 2 interrupt
 0004           INT_MSK0_ACOLUMN_1:        equ 04h ; MASK: enable/disable Analog col 1 interrupt
 0002           INT_MSK0_ACOLUMN_0:        equ 02h ; MASK: enable/disable Analog col 0 interrupt
 0001           INT_MSK0_VOLTAGE_MONITOR:  equ 01h ; MASK: enable/disable Volts interrupt
 0000           
 00E1           INT_MSK1:     equ 0E1h          ; Digital PSoC block Mask Register         (RW)
 0080           INT_MSK1_DCB13:            equ 80h ; MASK: enable/disable DCB13 block interrupt
 0040           INT_MSK1_DCB12:            equ 40h ; MASK: enable/disable DCB12 block interrupt
 0020           INT_MSK1_DBB11:            equ 20h ; MASK: enable/disable DBB11 block interrupt
 0010           INT_MSK1_DBB10:            equ 10h ; MASK: enable/disable DBB10 block interrupt
 0008           INT_MSK1_DCB03:            equ 08h ; MASK: enable/disable DCB03 block interrupt
 0004           INT_MSK1_DCB02:            equ 04h ; MASK: enable/disable DCB02 block interrupt
 0002           INT_MSK1_DBB01:            equ 02h ; MASK: enable/disable DBB01 block interrupt
 0001           INT_MSK1_DBB00:            equ 01h ; MASK: enable/disable DBB00 block interrupt
 0000           
 00E2           INT_VC:       equ 0E2h          ; Interrupt vector register                (RC)
 00E3           RES_WDT:      equ 0E3h          ; Watch Dog Timer Register                 (W)
 0000           
 0000           ; DECIMATOR Registers
 00E4           DEC_DH:       equ 0E4h          ; Data Register (high byte)                (RC)
 00E5           DEC_DL:       equ 0E5h          ; Data Register ( low byte)                (RC)
 00E6           DEC_CR0:      equ 0E6h          ; Data Control Register 0                  (RW)
 00E7           DEC_CR1:      equ 0E7h          ; Data Control Register 1                  (RW)
 0000           
 0000           ; Multiplier and MAC (Multiply/Accumulate) Unit
 00E8           MUL_X:        equ 0E8h          ; Multiplier X Register (write)            (W)
 00E9           MUL_Y:        equ 0E9h          ; Multiplier Y Register (write)            (W)
 00EA           MUL_DH:       equ 0EAh          ; Multiplier Result Data (high byte read)  (R)
 00EB           MUL_DL:       equ 0EBh          ; Multiplier Result Data ( low byte read)  (R)
 00EC           MAC_X:        equ 0ECh          ; write = MAC X register [also see ACC_DR1]
 00EC           ACC_DR1:      equ MAC_X        ; read =  MAC Accumulator, byte 1          (RW)
 00ED           MAC_Y:        equ 0EDh          ; write = MAC Y register [also see ACC_DR0]
 00ED           ACC_DR0:      equ MAC_Y        ; read =  MAC Accumulator, byte 0          (RW)
 00EE           MAC_CL0:      equ 0EEh          ; write = MAC Clear Accum [also see ACC_DR3]
 00EE           ACC_DR3:      equ MAC_CL0      ; read =  MAC Accumulator, byte 3          (RW)
 00EF           MAC_CL1:      equ 0EFh          ; write = MAC Clear Accum [also see ACC_DR2]
 00EF           ACC_DR2:      equ MAC_CL1      ; read =  MAC Accumulator, byte 2          (RW)
 0000           
 0000           ;------------------------------------------------------
 0000           ;  System Status and Control Registers
 0000           ;
 0000           ;  Note: The following registers are mapped into both
 0000           ;        register bank 0 AND register bank 1.
 0000           ;------------------------------------------------------
 00F7           CPU_F:        equ 0F7h          ; CPU Flag Register Access                 (RO)
 0000                                              ; Use FLAG_ masks defined at top of file
 0000           
 00FE           CPU_SCR1:     equ 0FEh          ; CPU Status and Control Register #1       (#)
 0010           CPU_SCR1_SLIMO:         equ 10h	   ; MASK: Slow IMO (internal main osc) enable
 0080           CPU_SCR1_IRESS:         equ 80h    ; MASK: flag, Internal Reset Status bit
 0008           CPU_SCR1_ECO_ALWD_WR:   equ 08h    ; MASK: flag, ECO allowed has been written
 0004           CPU_SCR1_ECO_ALLOWED:   equ 04h    ; MASK: ECO allowed to be enabled
 0001           CPU_SCR1_IRAMDIS:       equ 01h    ; MASK: Disable RAM initialization on WDR
 0000           
 00FF           CPU_SCR0:     equ 0FFh          ; CPU Status and Control Register #2       (#)
 0080           CPU_SCR0_GIE_MASK:      equ 80h    ; MASK: Global Interrupt Enable shadow
 0020           CPU_SCR0_WDRS_MASK:     equ 20h    ; MASK: Watch Dog Timer Reset
 0010           CPU_SCR0_PORS_MASK:     equ 10h    ; MASK: power-on reset bit PORS
 0008           CPU_SCR0_SLEEP_MASK:    equ 08h    ; MASK: Enable Sleep
 0001           CPU_SCR0_STOP_MASK:     equ 01h    ; MASK: Halt CPU bit
 0000           
 0000           
 0000           ;;=============================================================================
 0000           ;;      Register Space, Bank 1
 0000           ;;=============================================================================
 0000           
 0000           ;------------------------------------------------
 0000           ;  Port Registers
 0000           ;  Note: Also see this address range in Bank 0.
 0000           ;------------------------------------------------
 0000           ; Port 0
 0000           PRT0DM0:      equ 00h          ; Port 0 Drive Mode 0                      (RW)
 0001           PRT0DM1:      equ 01h          ; Port 0 Drive Mode 1                      (RW)
 0002           PRT0IC0:      equ 02h          ; Port 0 Interrupt Control 0               (RW)
 0003           PRT0IC1:      equ 03h          ; Port 0 Interrupt Control 1               (RW)
 0000           
 0000           ; Port 1
 0004           PRT1DM0:      equ 04h          ; Port 1 Drive Mode 0                      (RW)
 0005           PRT1DM1:      equ 05h          ; Port 1 Drive Mode 1                      (RW)
 0006           PRT1IC0:      equ 06h          ; Port 1 Interrupt Control 0               (RW)
 0007           PRT1IC1:      equ 07h          ; Port 1 Interrupt Control 1               (RW)
 0000           
 0000           ; Port 2
 0008           PRT2DM0:      equ 08h          ; Port 2 Drive Mode 0                      (RW)
 0009           PRT2DM1:      equ 09h          ; Port 2 Drive Mode 1                      (RW)
 000A           PRT2IC0:      equ 0Ah          ; Port 2 Interrupt Control 0               (RW)
 000B           PRT2IC1:      equ 0Bh          ; Port 2 Interrupt Control 1               (RW)
 0000           
 0000           ; Port 3
 000C           PRT3DM0:      equ 0Ch          ; Port 3 Drive Mode 0                      (RW)
 000D           PRT3DM1:      equ 0Dh          ; Port 3 Drive Mode 1                      (RW)
 000E           PRT3IC0:      equ 0Eh          ; Port 3 Interrupt Control 0               (RW)
 000F           PRT3IC1:      equ 0Fh          ; Port 3 Interrupt Control 1               (RW)
 0000           
 0000           ; Port 4
 0010           PRT4DM0:      equ 10h          ; Port 4 Drive Mode 0                      (RW)
 0011           PRT4DM1:      equ 11h          ; Port 4 Drive Mode 1                      (RW)
 0012           PRT4IC0:      equ 12h          ; Port 4 Interrupt Control 0               (RW)
 0013           PRT4IC1:      equ 13h          ; Port 4 Interrupt Control 1               (RW)
 0000           
 0000           ; Port 5
 0014           PRT5DM0:      equ 14h          ; Port 5 Drive Mode 0                      (RW)
 0015           PRT5DM1:      equ 15h          ; Port 5 Drive Mode 1                      (RW)
 0016           PRT5IC0:      equ 16h          ; Port 5 Interrupt Control 0               (RW)
 0017           PRT5IC1:      equ 17h          ; Port 5 Interrupt Control 1               (RW)
 0000           
 0000           ;------------------------------------------------
 0000           ;  Digital PSoC(tm) block Registers
 0000           ;  Note: Also see this address range in Bank 0.
 0000           ;------------------------------------------------
 0000           
 0000           ; Digital PSoC block 00, Basic Type B
 0020           DBB00FN:      equ 20h          ; Function Register                        (RW)
 0021           DBB00IN:      equ 21h          ;    Input Register                        (RW)
 0022           DBB00OU:      equ 22h          ;   Output Register                        (RW)
 0000           
 0000           ; Digital PSoC block 01, Basic Type B
 0024           DBB01FN:      equ 24h          ; Function Register                        (RW)
 0025           DBB01IN:      equ 25h          ;    Input Register                        (RW)
 0026           DBB01OU:      equ 26h          ;   Output Register                        (RW)
 0000           
 0000           ; Digital PSoC block 02, Communications Type B
 0028           DCB02FN:      equ 28h          ; Function Register                        (RW)
 0029           DCB02IN:      equ 29h          ;    Input Register                        (RW)
 002A           DCB02OU:      equ 2Ah          ;   Output Register                        (RW)
 0000           
 0000           ; Digital PSoC block 03, Communications Type B
 002C           DCB03FN:      equ 2Ch          ; Function Register                        (RW)
 002D           DCB03IN:      equ 2Dh          ;    Input Register                        (RW)
 002E           DCB03OU:      equ 2Eh          ;   Output Register                        (RW)
 0000           
 0000           ; Digital PSoC block 10, Basic Type B
 0030           DBB10FN:      equ 30h          ; Function Register                        (RW)
 0031           DBB10IN:      equ 31h          ;    Input Register                        (RW)
 0032           DBB10OU:      equ 32h          ;   Output Register                        (RW)
 0000           
 0000           ; Digital PSoC block 11, Basic Type B
 0034           DBB11FN:      equ 34h          ; Function Register                        (RW)
 0035           DBB11IN:      equ 35h          ;    Input Register                        (RW)
 0036           DBB11OU:      equ 36h          ;   Output Register                        (RW)
 0000           
 0000           ; Digital PSoC block 12, Communications Type B
 0038           DCB12FN:      equ 38h          ; Function Register                        (RW)
 0039           DCB12IN:      equ 39h          ;    Input Register                        (RW)
 003A           DCB12OU:      equ 3Ah          ;   Output Register                        (RW)
 0000           
 0000           ; Digital PSoC block 13, Communications Type B
 003C           DCB13FN:      equ 3Ch          ; Function Register                        (RW)
 003D           DCB13IN:      equ 3Dh          ;    Input Register                        (RW)
 003E           DCB13OU:      equ 3Eh          ;   Output Register                        (RW)
 0000           
 0000           ;------------------------------------------------
 0000           ;  System and Global Resource Registers
 0000           ;  Note: Also see this address range in Bank 0.
 0000           ;------------------------------------------------
 0000           
 0060           CLK_CR0:      equ 60h          ; Analog Column Clock Select Register 0    (RW)
 00C0           CLK_CR0_ACOLUMN_3:    equ 0C0h    ; MASK: Specify clock for analog cloumn
 0030           CLK_CR0_ACOLUMN_2:    equ 30h    ; MASK: Specify clock for analog cloumn
 000C           CLK_CR0_ACOLUMN_1:    equ 0Ch    ; MASK: Specify clock for analog cloumn
 0003           CLK_CR0_ACOLUMN_0:    equ 03h    ; MASK: Specify clock for analog cloumn
 0000           
 0061           CLK_CR1:      equ 61h          ; Analog Clock Source Select Register 1    (RW)
 0040           CLK_CR1_SHDIS:        equ 40h    ; MASK: Sample and Hold Disable (all Columns)
 0038           CLK_CR1_ACLK1:        equ 38h    ; MASK: Digital PSoC block for analog source
 0007           CLK_CR1_ACLK2:        equ 07h    ; MASK: Digital PSoC block for analog source
 0000           
 0062           ABF_CR0:      equ 62h          ; Analog Output Buffer Control Register 0  (RW)
 0080           ABF_CR0_ACOL1MUX:     equ 80h    ; MASK: Analog Column 1 Mux control
 0040           ABF_CR0_ACOL2MUX:     equ 40h    ; MASK: Analog Column 2 Mux control
 0020           ABF_CR0_ABUF1EN:      equ 20h    ; MASK: Enable ACol 1 analog buffer (P0[5])
 0010           ABF_CR0_ABUF2EN:      equ 10h    ; MASK: Enable ACol 2 analog buffer (P0[4])
 0008           ABF_CR0_ABUF0EN:      equ 08h    ; MASK: Enable ACol 0 analog buffer (P0[3])
 0004           ABF_CR0_ABUF3EN:      equ 04h    ; MASK: Enable ACol 3 analog buffer (P0[2])
 0002           ABF_CR0_BYPASS:       equ 02h    ; MASK: Bypass the analog buffers
 0001           ABF_CR0_PWR:          equ 01h    ; MASK: High power mode on all analog buffers
 0000           
 0063           AMD_CR0:      equ 63h          ; Analog Modulator Control Register 0      (RW)
 0070           AMD_CR0_AMOD2:        equ 70h    ; MASK: Modulation source for analog column 2
 0007           AMD_CR0_AMOD0:        equ 07h    ; MASK: Modulation source for analog column 1
 0000           
 0066           AMD_CR1:      equ 66h          ; Analog Modulator Control Register 1      (RW)
 0070           AMD_CR1_AMOD3:        equ 70h    ; MASK: Modulation ctrl for analog column 3
 0007           AMD_CR1_AMOD1:        equ 07h    ; MASK: Modulation ctrl for analog column 1
 0000           
 0067           ALT_CR0:      equ 67h          ; Analog Look Up Table (LUT) Register 0    (RW)
 00F0           ALT_CR0_LUT1:         equ 0F0h    ; MASK: Look up table 1 selection
 000F           ALT_CR0_LUT0:         equ 0Fh    ; MASK: Look up table 0 selection
 0000           
 0068           ALT_CR1:      equ 68h          ; Analog Look Up Table (LUT) Register 1    (RW)
 00F0           ALT_CR1_LUT3:         equ 0F0h    ; MASK: Look up table 3 selection
 000F           ALT_CR1_LUT2:         equ 0Fh    ; MASK: Look up table 2 selection
 0000           
 0069           CLK_CR2:      equ 69h          ; Analog Clock Source Control Register 2   (RW)
 0008           CLK_CR2_ACLK1R:       equ 08h    ; MASK: Analog Clock 1 selection range
 0001           CLK_CR2_ACLK0R:       equ 01h    ; MASK: Analog Clock 0 selection range
 0000           
 0000           ;------------------------------------------------
 0000           ;  Global Digital Interconnects
 0000           ;------------------------------------------------
 0000           
 00D0           GDI_O_IN:     equ 0D0h          ; Global Dig Interconnect Odd Inputs Reg   (RW)
 00D1           GDI_E_IN:     equ 0D1h          ; Global Dig Interconnect Even Inputs Reg  (RW)
 00D2           GDI_O_OU:     equ 0D2h          ; Global Dig Interconnect Odd Outputs Reg  (RW)
 00D3           GDI_E_OU:     equ 0D3h          ; Global Dig Interconnect Even Outputs Reg (RW)
 0000           
 0000           ;------------------------------------------------
 0000           ;  Clock and System Control Registers
 0000           ;------------------------------------------------
 0000           
 00DD           OSC_GO_EN:    equ 0DDh          ; Oscillator to Global Outputs Enable Register (RW)
 0080           OSC_GOEN_SLPINT:      equ 80h	 ; Enable Sleep Timer onto GOE[7]
 0040           OSC_GOEN_VC3:         equ 40h    ; Enable VC3 onto GOE[6]
 0020           OSC_GOEN_VC2:         equ 20h    ; Enable VC2 onto GOE[5]
 0010           OSC_GOEN_VC1:         equ 10h    ; Enable VC1 onto GOE[4]
 0008           OSC_GOEN_SYSCLKX2:    equ 08h    ; Enable 2X SysClk onto GOE[3]
 0004           OSC_GOEN_SYSCLK:      equ 04h    ; Enable 1X SysClk onto GOE[2]
 0002           OSC_GOEN_CLK24M:      equ 02h    ; Enable 24 MHz clock onto GOE[1]
 0001           OSC_GOEN_CLK32K:      equ 01h    ; Enable 32 kHz clock onto GOE[0]
 0000           
 00DE           OSC_CR4:      equ 0DEh          ; Oscillator Control Register 4            (RW)
 0003           OSC_CR4_VC3:          equ 03h    ; MASK: System VC3 Clock source
 0000           
 00DF           OSC_CR3:      equ 0DFh          ; Oscillator Control Register 3            (RW)
 0000           
 00E0           OSC_CR0:      equ 0E0h          ; System Oscillator Control Register 0     (RW)
 0080           OSC_CR0_32K_SELECT:   equ 80h    ; MASK: Enable/Disable External XTAL Osc
 0040           OSC_CR0_PLL_MODE:     equ 40h    ; MASK: Enable/Disable PLL
 0020           OSC_CR0_NO_BUZZ:      equ 20h    ; MASK: Bandgap always powered/BUZZ bandgap
 0018           OSC_CR0_SLEEP:        equ 18h    ; MASK: Set Sleep timer freq/period
 0000           OSC_CR0_SLEEP_512Hz:  equ 00h    ;     Set sleep bits for 1.95ms period
 0008           OSC_CR0_SLEEP_64Hz:   equ 08h    ;     Set sleep bits for 15.6ms period
 0010           OSC_CR0_SLEEP_8Hz:    equ 10h    ;     Set sleep bits for 125ms period
 0018           OSC_CR0_SLEEP_1Hz:    equ 18h    ;     Set sleep bits for 1 sec period
 0007           OSC_CR0_CPU:          equ 07h    ; MASK: Set CPU Frequency
 0000           OSC_CR0_CPU_3MHz:     equ 00h    ;     set CPU Freq bits for 3MHz Operation
 0001           OSC_CR0_CPU_6MHz:     equ 01h    ;     set CPU Freq bits for 6MHz Operation
 0002           OSC_CR0_CPU_12MHz:    equ 02h    ;     set CPU Freq bits for 12MHz Operation
 0003           OSC_CR0_CPU_24MHz:    equ 03h    ;     set CPU Freq bits for 24MHz Operation
 0004           OSC_CR0_CPU_1d5MHz:   equ 04h    ;     set CPU Freq bits for 1.5MHz Operation
 0005           OSC_CR0_CPU_750kHz:   equ 05h    ;     set CPU Freq bits for 750kHz Operation
 0006           OSC_CR0_CPU_187d5kHz: equ 06h    ;     set CPU Freq bits for 187.5kHz Operation
 0007           OSC_CR0_CPU_93d7kHz:  equ 07h    ;     set CPU Freq bits for 93.7kHz Operation
 0000           
 00E1           OSC_CR1:      equ 0E1h          ; System VC1/VC2 Divider Control Register  (RW)
 00F0           OSC_CR1_VC1:          equ 0F0h    ; MASK: System VC1 24MHz/External Clk divider
 000F           OSC_CR1_VC2:          equ 0Fh    ; MASK: System VC2 24MHz/External Clk divider
 0000           
 00E2           OSC_CR2:      equ 0E2h          ; Oscillator Control Register 2            (RW)
 0080           OSC_CR2_PLLGAIN:      equ 80h    ; MASK: High/Low gain
 0004           OSC_CR2_EXTCLKEN:     equ 04h    ; MASK: Enable/Disable External Clock
 0001           OSC_CR2_SYSCLKX2DIS:  equ 01h    ; MASK: Enable/Disable 48MHz clock source
 0000           
 00E3           VLT_CR:       equ 0E3h          ; Voltage Monitor Control Register         (RW)
 0080           VLT_CR_SMP:           equ 80h    ; MASK: Enable Switch Mode Pump
 0030           VLT_CR_PORLEV:        equ 30h    ; MASK: Mask for Power on Reset level control
 0000           VLT_CR_POR_LOW:       equ 00h    ;   Lowest  Precision Power-on Reset trip point
 0010           VLT_CR_POR_MID:       equ 10h    ;   Middle  Precision Power-on Reset trip point
 0020           VLT_CR_POR_HIGH:      equ 20h    ;   Highest Precision Power-on Reset trip point
 0008           VLT_CR_LVDTBEN:       equ 08h    ; MASK: Enable the CPU Throttle Back on LVD
 0007           VLT_CR_VM:            equ 07h    ; MASK: Mask for Voltage Monitor level setting
 0000           VLT_CR_3V0_POR:       equ 00h    ; -- deprecated symbols --
 0010           VLT_CR_4V5_POR:       equ 10h    ;    deprecated
 0020           VLT_CR_4V75_POR:      equ 20h    ;    deprecated
 0030           VLT_CR_DISABLE:       equ 30h    ;    deprecated
 0000           
 00E4           VLT_CMP:      equ 0E4h          ; Voltage Monitor Comparators Register     (R)
 0004           VLT_CMP_PUMP:         equ 04h    ; MASK: Vcc below SMP trip level
 0002           VLT_CMP_LVD:          equ 02h    ; MASK: Vcc below LVD trip level
 0001           VLT_CMP_PPOR:         equ 01h    ; MASK: Vcc below PPOR trip level
 0000           
 00E8           IMO_TR:       equ 0E8h          ; Internal Main Oscillator Trim Register   (W)
 00E9           ILO_TR:       equ 0E9h          ; Internal Low-speed Oscillator Trim       (W)
 00EA           BDG_TR:       equ 0EAh          ; Band Gap Trim Register                   (W)
 00EB           ECO_TR:       equ 0EBh          ; External Oscillator Trim Register        (W)
 0000           
 0000           ;;=============================================================================
 0000           ;;      M8C System Macros
 0000           ;;  These macros should be used when their functions are needed.
 0000           ;;=============================================================================
 0000           
 0000           ;----------------------------------------------------
 0000           ;  Swapping Register Banks
 0000           ;----------------------------------------------------
 0000               macro M8C_SetBank0
 0000               and   F, ~FLAG_XIO_MASK
 0000               macro M8C_SetBank1
 0000               or    F, FLAG_XIO_MASK
 0000               macro M8C_EnableGInt
 0000               or    F, FLAG_GLOBAL_IE
 0000               macro M8C_DisableGInt
 0000               and   F, ~FLAG_GLOBAL_IE
 0000               macro M8C_DisableIntMask
 0000               and   reg[@0], ~@1              ; disable specified interrupt enable bit
 0000               macro M8C_EnableIntMask
 0000               or    reg[@0], @1               ; enable specified interrupt enable bit
 0000               macro M8C_ClearIntFlag
 0000               mov   reg[@0], ~@1              ; clear specified interrupt enable bit
 0000               macro M8C_EnableWatchDog
 0000               and   reg[CPU_SCR0], ~CPU_SCR0_PORS_MASK
 0000               macro M8C_ClearWDT
 0000               mov   reg[RES_WDT], 00h
 0000               macro M8C_ClearWDTAndSleep
 0000               mov   reg[RES_WDT], 38h
 0000               macro M8C_Stall
 0000               or    reg[ASY_CR], ASY_CR_SYNCEN
 0000               macro M8C_Unstall
 0000               and   reg[ASY_CR], ~ASY_CR_SYNCEN
 0000               macro M8C_Sleep
 0000               or    reg[CPU_SCR0], CPU_SCR0_SLEEP_MASK
 0000               ; The next instruction to be executed depends on the state of the
 0000               ; various interrupt enable bits. If some interrupts are enabled
 0000               ; and the global interrupts are disabled, the next instruction will
 0000               ; be the one that follows the invocation of this macro. If global
 0000               ; interrupts are also enabled then the next instruction will be
 0000               ; from the interrupt vector table. If no interrupts are enabled
 0000               ; then the CPU sleeps forever.
 0000               macro M8C_Stop
 0000               ; In general, you probably don't want to do this, but here's how:
 0000               or    reg[CPU_SCR0], CPU_SCR0_STOP_MASK
 0000               ; Next instruction to be executed is located in the interrupt
 0000               ; vector table entry for Power-On Reset.
 0000               macro M8C_Reset
 0000               ; Restore CPU to the power-on reset state.
 0000               mov A, 0
 0000               SSC
 0000               ; Next non-supervisor instruction will be at interrupt vector 0.
 0000               macro Suspend_CodeCompressor
 0000               or   F, 0
 0000               macro Resume_CodeCompressor
 0000               add  SP, 0
 0008           LCD_Port:                              equ   PRT2DR
 0008           LCD_PortMode0:                         equ   PRT2DM0
 0009           LCD_PortMode1:                         equ   PRT2DM1
 0000           
 0000           LCD_BARGRAPH_ENABLE:                   equ   0
 0000           
 0000           
 0000           ;-----------------------------------------------
 0000           ;  Constants for LCD
 0000           ;-----------------------------------------------
 0000           ; LCD commands
 0000           
 000C           LCD_DISP_ON:                      equ   0Ch
 0008           LCD_DISP_OFF:                     equ   08h
 000E           LCD_CURSOR_ON:                    equ   0Eh
 000C           LCD_CURSOR_OFF:                   equ   0Ch
 000F           LCD_CURSOR_BLINK:                 equ   0Fh
 000D           LCD_CURSOR_WINK:                  equ   0Dh
 0010           LCD_CURSOR_SH_LEFT:               equ   10h
 0014           LCD_CURSOR_SH_RIGHT:              equ   14h
 0002           LCD_CURSOR_HOME:                  equ   02h
 0004           LCD_CURSOR_LEFT:                  equ   04h
 0006           LCD_CURSOR_RIGHT:                 equ   06h
 0001           LCD_DISP_CLEAR_HOME:              equ   01h
 0000           
 0000           LCD_SOLID_BG:                     equ   00h
 0001           LCD_LINE_BG:                      equ   01h
 0000           
 007F           LCD_PORT_MASK:                    equ   7Fh
 0000           
 0000           ICE_PORT_SYNC:     equ   0   ; This flag must be set to one to work around
 0000                                        ; the async read issue with the ICE with the 
 0000                                        ; 25/26xxx family of devices.  It will help
 0000                                        ; to eliminate "Invalid memory reference" errors.
 0000                                        ; It is not required when running without the ICE
 0000           							 ; or when using any other family besides the 
 0000           							 ; 25/26xxx family. If not using the ICE, this flag 
 0000           							 ; may be set to 0.
 0000           
 0000           ; end of file LCD.inc
 0000           
 0004           SPIM_bINT_MASK:             equ 04h
 0000           ; SPIM interrupt address
 00E1           SPIM_INT_REG:               equ 0e1h
 0000           
 0000           ; Do not use, this equate will be removed in a future release
 0004           bSPIM_INT_MASK:             equ 04h
 0000           
 0000           ;--------------------------------------------------
 0000           ; Register constants and masks
 0000           ;--------------------------------------------------
 0000           SPIM_SPIM_MODE_0:             equ   00h      ;MODE 0 - Leading edge latches data - pos clock
 0002           SPIM_SPIM_MODE_1:             equ   02h      ;MODE 1 - Leading edge latches data - neg clock
 0004           SPIM_SPIM_MODE_2:             equ   04h      ;MODE 2 - Trailing edge latches data - pos clock
 0006           SPIM_SPIM_MODE_3:             equ   06h      ;MODE 3 - Trailing edge latches data - neg clock
 0080           SPIM_SPIM_LSB_FIRST:          equ   80h      ;LSB bit transmitted/received first
 0000           SPIM_SPIM_MSB_FIRST:          equ   00h      ;MSB bit transmitted/received first
 0000           
 0000           ;---------------------------
 0000           ; SPI Status register masks
 0000           ;---------------------------
 0040           SPIM_SPIM_RX_OVERRUN_ERROR:   equ   40h      ;Overrun error in received data
 0010           SPIM_SPIM_TX_BUFFER_EMPTY:    equ   10h      ;TX Buffer register is ready for next data byte
 0008           SPIM_SPIM_RX_BUFFER_FULL:     equ   08h      ;RX Buffer register has received current data
 0020           SPIM_SPIM_SPI_COMPLETE:       equ   20h      ;SPI Tx/Rx cycle has completed
 0000           
 0000           ;--------------------------------------------------
 0000           ; Registers used by SPIM
 0000           ;--------------------------------------------------
 002B           SPIM_CONTROL_REG:   equ 2bh                      ;Control register
 0028           SPIM_SHIFT_REG: equ 28h                          ;TX Shift Register register
 0029           SPIM_TX_BUFFER_REG: equ 29h                      ;TX Buffer Register
 002A           SPIM_RX_BUFFER_REG: equ 2ah                      ;RX Buffer Register
 0028           SPIM_FUNCTION_REG:  equ 28h                      ;Function register
 0029           SPIM_INPUT_REG: equ 29h                          ;Input register
 002A           SPIM_OUTPUT_REG:    equ 2ah                      ;Output register
 0000           
 0000           ; end of file SPIM.inc
 0010           FLAG_XIO_MASK:  equ 10h
 0008           FLAG_SUPER:     equ 08h
 0004           FLAG_CARRY:     equ 04h
 0002           FLAG_ZERO:      equ 02h
 0001           FLAG_GLOBAL_IE: equ 01h
 0000           
 0000           
 0000           ;;=============================================================================
 0000           ;;      Register Space, Bank 0
 0000           ;;=============================================================================
 0000           
 0000           ;------------------------------------------------
 0000           ;  Port Registers
 0000           ;  Note: Also see this address range in Bank 1.
 0000           ;------------------------------------------------
 0000           ; Port 0
 0000           PRT0DR:       equ 00h          ; Port 0 Data Register                     (RW)
 0001           PRT0IE:       equ 01h          ; Port 0 Interrupt Enable Register         (RW)
 0002           PRT0GS:       equ 02h          ; Port 0 Global Select Register            (RW)
 0003           PRT0DM2:      equ 03h          ; Port 0 Drive Mode 2                      (RW)
 0000           ; Port 1
 0004           PRT1DR:       equ 04h          ; Port 1 Data Register                     (RW)
 0005           PRT1IE:       equ 05h          ; Port 1 Interrupt Enable Register         (RW)
 0006           PRT1GS:       equ 06h          ; Port 1 Global Select Register            (RW)
 0007           PRT1DM2:      equ 07h          ; Port 1 Drive Mode 2                      (RW)
 0000           ; Port 2
 0008           PRT2DR:       equ 08h          ; Port 2 Data Register                     (RW)
 0009           PRT2IE:       equ 09h          ; Port 2 Interrupt Enable Register         (RW)
 000A           PRT2GS:       equ 0Ah          ; Port 2 Global Select Register            (RW)
 000B           PRT2DM2:      equ 0Bh          ; Port 2 Drive Mode 2                      (RW)
 0000           ; Port 3
 000C           PRT3DR:       equ 0Ch          ; Port 3 Data Register                     (RW)
 000D           PRT3IE:       equ 0Dh          ; Port 3 Interrupt Enable Register         (RW)
 000E           PRT3GS:       equ 0Eh          ; Port 3 Global Select Register            (RW)
 000F           PRT3DM2:      equ 0Fh          ; Port 3 Drive Mode 2                      (RW)
 0000           ; Port 4
 0010           PRT4DR:       equ 10h          ; Port 4 Data Register                     (RW)
 0011           PRT4IE:       equ 11h          ; Port 4 Interrupt Enable Register         (RW)
 0012           PRT4GS:       equ 12h          ; Port 4 Global Select Register            (RW)
 0013           PRT4DM2:      equ 13h          ; Port 4 Drive Mode 2                      (RW)
 0000           ; Port 5
 0014           PRT5DR:       equ 14h          ; Port 5 Data Register                     (RW)
 0015           PRT5IE:       equ 15h          ; Port 5 Interrupt Enable Register         (RW)
 0016           PRT5GS:       equ 16h          ; Port 5 Global Select Register            (RW)
 0017           PRT5DM2:      equ 17h          ; Port 5 Drive Mode 2                      (RW)
 0000           
 0000           ;------------------------------------------------
 0000           ;  Digital PSoC(tm) block Registers
 0000           ;  Note: Also see this address range in Bank 1.
 0000           ;------------------------------------------------
 0000           ; Digital PSoC block 00, Basic Type B
 0020           DBB00DR0:     equ 20h          ; data register 0                          (#)
 0021           DBB00DR1:     equ 21h          ; data register 1                          (W)
 0022           DBB00DR2:     equ 22h          ; data register 2                          (RW)
 0023           DBB00CR0:     equ 23h          ; control & status register 0              (#)
 0000           
 0000           ; Digital PSoC block 01, Basic Type B
 0024           DBB01DR0:     equ 24h          ; data register 0                          (#)
 0025           DBB01DR1:     equ 25h          ; data register 1                          (W)
 0026           DBB01DR2:     equ 26h          ; data register 2                          (RW)
 0027           DBB01CR0:     equ 27h          ; control & status register 0              (#)
 0000           
 0000           ; Digital PSoC block 02, Communications Type B
 0028           DCB02DR0:     equ 28h          ; data register 0                          (#)
 0029           DCB02DR1:     equ 29h          ; data register 1                          (W)
 002A           DCB02DR2:     equ 2Ah          ; data register 2                          (RW)
 002B           DCB02CR0:     equ 2Bh          ; control & status register 0              (#)
 0000           
 0000           ; Digital PSoC block 03, Communications Type B
 002C           DCB03DR0:     equ 2Ch          ; data register 0                          (#)
 002D           DCB03DR1:     equ 2Dh          ; data register 1                          (W)
 002E           DCB03DR2:     equ 2Eh          ; data register 2                          (RW)
 002F           DCB03CR0:     equ 2Fh          ; control & status register 0              (#)
 0000           
 0000           ; Digital PSoC block 10, Basic Type B
 0030           DBB10DR0:     equ 30h          ; data register 0                          (#)
 0031           DBB10DR1:     equ 31h          ; data register 1                          (W)
 0032           DBB10DR2:     equ 32h          ; data register 2                          (RW)
 0033           DBB10CR0:     equ 33h          ; control & status register 0              (#)
 0000           
 0000           ; Digital PSoC block 11, Basic Type B
 0034           DBB11DR0:     equ 34h          ; data register 0                          (#)
 0035           DBB11DR1:     equ 35h          ; data register 1                          (W)
 0036           DBB11DR2:     equ 36h          ; data register 2                          (RW)
 0037           DBB11CR0:     equ 37h          ; control & status register 0              (#)
 0000           
 0000           ; Digital PSoC block 12, Communications Type B
 0038           DCB12DR0:     equ 38h          ; data register 0                          (#)
 0039           DCB12DR1:     equ 39h          ; data register 1                          (W)
 003A           DCB12DR2:     equ 3Ah          ; data register 2                          (RW)
 003B           DCB12CR0:     equ 3Bh          ; control & status register 0              (#)
 0000           
 0000           ; Digital PSoC block 13, Communications Type B
 003C           DCB13DR0:     equ 3Ch          ; data register 0                          (#)
 003D           DCB13DR1:     equ 3Dh          ; data register 1                          (W)
 003E           DCB13DR2:     equ 3Eh          ; data register 2                          (RW)
 003F           DCB13CR0:     equ 3Fh          ; control & status register 0              (#)
 0000           
 0000           ;-------------------------------------
 0000           ;  Analog Resource Control Registers
 0000           ;-------------------------------------
 0060           AMX_IN:       equ 60h          ; Analog Input Multiplexor Control         (RW)
 00C0           AMX_IN_ACI3:          equ 0C0h    ; MASK: column 3 input mux
 0030           AMX_IN_ACI2:          equ 30h    ; MASK: column 2 input mux
 000C           AMX_IN_ACI1:          equ 0Ch    ; MASK: column 1 input mux
 0003           AMX_IN_ACI0:          equ 03h    ; MASK: column 0 input mux
 0000           
 0063           ARF_CR:       equ 63h          ; Analog Reference Control Register        (RW)
 0040           ARF_CR_HBE:           equ 40h    ; MASK: Bias level control
 0038           ARF_CR_REF:           equ 38h    ; MASK: Analog Reference controls
 0007           ARF_CR_REFPWR:        equ 07h    ; MASK: Analog Reference power
 0004           ARF_CR_APWR:          equ 04h    ; MASK: use deprecated; see datasheet
 0003           ARF_CR_SCPWR:         equ 03h    ; MASK: Switched Cap block power
 0000           
 0064           CMP_CR0:      equ 64h          ; Analog Comparator Bus 0 Register         (#)
 0080           CMP_CR0_COMP3:        equ 80h    ; MASK: Column 3 comparator state        (R)
 0040           CMP_CR0_COMP2:        equ 40h    ; MASK: Column 2 comparator state        (R)
 0020           CMP_CR0_COMP1:        equ 20h    ; MASK: Column 1 comparator state        (R)
 0010           CMP_CR0_COMP0:        equ 10h    ; MASK: Column 0 comparator state        (R)
 0008           CMP_CR0_AINT3:        equ 08h    ; MASK: Column 3 interrupt source        (RW)
 0004           CMP_CR0_AINT2:        equ 04h    ; MASK: Column 2 interrupt source        (RW)
 0002           CMP_CR0_AINT1:        equ 02h    ; MASK: Column 1 interrupt source        (RW)
 0001           CMP_CR0_AINT0:        equ 01h    ; MASK: Column 0 interrupt source        (RW)
 0000           
 0065           ASY_CR:       equ 65h          ; Analog Synchronizaton Control            (#)
 0070           ASY_CR_SARCOUNT:      equ 70h    ; MASK: SAR support: resolution count    (W)
 0008           ASY_CR_SARSIGN:       equ 08h    ; MASK: SAR support: sign                (RW)
 0006           ASY_CR_SARCOL:        equ 06h    ; MASK: SAR support: column spec         (RW)
 0001           ASY_CR_SYNCEN:        equ 01h    ; MASK: Stall bit                        (RW)
 0000           
 0066           CMP_CR1:      equ 66h          ; Analog Comparator Bus 1 Register         (RW)
 0080           CMP_CR1_ASYNCH3:      equ 80h    ; MASK: Column 3 comparator bus synch
 0040           CMP_CR1_ASYNCH2:      equ 40h    ; MASK: Column 2 comparator bus synch
 0020           CMP_CR1_ASYNCH1:      equ 20h    ; MASK: Column 1 comparator bus synch
 0010           CMP_CR1_ASYNCH0:      equ 10h    ; MASK: Column 0 comparator bus synch
 0000           
 0000           ;---------------------------------------------------
 0000           ;  Analog PSoC block Registers
 0000           ;
 0000           ;  Note: the following registers are mapped into
 0000           ;  both register bank 0 AND register bank 1.
 0000           ;---------------------------------------------------
 0000           
 0000           ; Continuous Time PSoC block Type B Row 0 Col 0
 0070           ACB00CR3:     equ 70h          ; Control register 3                       (RW)
 0071           ACB00CR0:     equ 71h          ; Control register 0                       (RW)
 0072           ACB00CR1:     equ 72h          ; Control register 1                       (RW)
 0073           ACB00CR2:     equ 73h          ; Control register 2                       (RW)
 0000           
 0000           ; Continuous Time PSoC block Type B Row 0 Col 1
 0074           ACB01CR3:     equ 74h          ; Control register 3                       (RW)
 0075           ACB01CR0:     equ 75h          ; Control register 0                       (RW)
 0076           ACB01CR1:     equ 76h          ; Control register 1                       (RW)
 0077           ACB01CR2:     equ 77h          ; Control register 2                       (RW)
 0000           
 0000           ; Continuous Time PSoC block Type B Row 0 Col 2
 0078           ACB02CR3:     equ 78h          ; Control register 3                       (RW)
 0079           ACB02CR0:     equ 79h          ; Control register 0                       (RW)
 007A           ACB02CR1:     equ 7Ah          ; Control register 1                       (RW)
 007B           ACB02CR2:     equ 7Bh          ; Control register 2                       (RW)
 0000           
 0000           ; Continuous Time PSoC block Type B Row 0 Col 3
 007C           ACB03CR3:     equ 7Ch          ; Control register 3                       (RW)
 007D           ACB03CR0:     equ 7Dh          ; Control register 0                       (RW)
 007E           ACB03CR1:     equ 7Eh          ; Control register 1                       (RW)
 007F           ACB03CR2:     equ 7Fh          ; Control register 2                       (RW)
 0000           
 0000           ; Switched Cap PSoC blockType C Row 1 Col 0
 0080           ASC10CR0:     equ 80h          ; Control register 0                       (RW)
 0081           ASC10CR1:     equ 81h          ; Control register 1                       (RW)
 0082           ASC10CR2:     equ 82h          ; Control register 2                       (RW)
 0083           ASC10CR3:     equ 83h          ; Control register 3                       (RW)
 0000           
 0000           ; Switched Cap PSoC blockType D Row 1 Col 1
 0084           ASD11CR0:     equ 84h          ; Control register 0                       (RW)
 0085           ASD11CR1:     equ 85h          ; Control register 1                       (RW)
 0086           ASD11CR2:     equ 86h          ; Control register 2                       (RW)
 0087           ASD11CR3:     equ 87h          ; Control register 3                       (RW)
 0000           
 0000           ; Switched Cap PSoC blockType C Row 1 Col 2
 0088           ASC12CR0:     equ 88h          ; Control register 0                       (RW)
 0089           ASC12CR1:     equ 89h          ; Control register 1                       (RW)
 008A           ASC12CR2:     equ 8Ah          ; Control register 2                       (RW)
 008B           ASC12CR3:     equ 8Bh          ; Control register 3                       (RW)
 0000           
 0000           ; Switched Cap PSoC blockType D Row 1 Col 3
 008C           ASD13CR0:     equ 8Ch          ; Control register 0                       (RW)
 008D           ASD13CR1:     equ 8Dh          ; Control register 1                       (RW)
 008E           ASD13CR2:     equ 8Eh          ; Control register 2                       (RW)
 008F           ASD13CR3:     equ 8Fh          ; Control register 3                       (RW)
 0000           
 0000           ; Switched Cap PSoC blockType D Row 2 Col 0
 0090           ASD20CR0:     equ 90h          ; Control register 0                       (RW)
 0091           ASD20CR1:     equ 91h          ; Control register 1                       (RW)
 0092           ASD20CR2:     equ 92h          ; Control register 2                       (RW)
 0093           ASD20CR3:     equ 93h          ; Control register 3                       (RW)
 0000           
 0000           ; Switched Cap PSoC blockType C Row 2 Col 1
 0094           ASC21CR0:     equ 94h          ; Control register 0                       (RW)
 0095           ASC21CR1:     equ 95h          ; Control register 1                       (RW)
 0096           ASC21CR2:     equ 96h          ; Control register 2                       (RW)
 0097           ASC21CR3:     equ 97h          ; Control register 3                       (RW)
 0000           
 0000           ; Switched Cap PSoC blockType D Row 2 Col 2
 0098           ASD22CR0:     equ 98h          ; Control register 0                       (RW)
 0099           ASD22CR1:     equ 99h          ; Control register 1                       (RW)
 009A           ASD22CR2:     equ 9Ah          ; Control register 2                       (RW)
 009B           ASD22CR3:     equ 9Bh          ; Control register 3                       (RW)
 0000           
 0000           ; Switched Cap PSoC blockType C Row 2 Col 3
 009C           ASC23CR0:     equ 9Ch          ; Control register 0                       (RW)
 009D           ASC23CR1:     equ 9Dh          ; Control register 1                       (RW)
 009E           ASC23CR2:     equ 9Eh          ; Control register 2                       (RW)
 009F           ASC23CR3:     equ 9Fh          ; Control register 3                       (RW)
 0000           
 0000           ;------------------------------------------------
 0000           ;  Row Digital Interconnects
 0000           ;
 0000           ;  Note: the following registers are mapped into
 0000           ;  both register bank 0 AND register bank 1.
 0000           ;------------------------------------------------
 0000           
 00B0           RDI0RI:       equ 0B0h          ; Row Digital Interconnect Row 0 Input Reg (RW)
 00B1           RDI0SYN:      equ 0B1h          ; Row Digital Interconnect Row 0 Sync Reg  (RW)
 00B2           RDI0IS:       equ 0B2h          ; Row 0 Input Select Register              (RW)
 00B3           RDI0LT0:      equ 0B3h          ; Row 0 Look Up Table Register 0           (RW)
 00B4           RDI0LT1:      equ 0B4h          ; Row 0 Look Up Table Register 1           (RW)
 00B5           RDI0RO0:      equ 0B5h          ; Row 0 Output Register 0                  (RW)
 00B6           RDI0RO1:      equ 0B6h          ; Row 0 Output Register 1                  (RW)
 0000           
 00B8           RDI1RI:       equ 0B8h          ; Row Digital Interconnect Row 1 Input Reg (RW)
 00B9           RDI1SYN:      equ 0B9h          ; Row Digital Interconnect Row 1 Sync Reg  (RW)
 00BA           RDI1IS:       equ 0BAh          ; Row 1 Input Select Register              (RW)
 00BB           RDI1LT0:      equ 0BBh          ; Row 1 Look Up Table Register 0           (RW)
 00BC           RDI1LT1:      equ 0BCh          ; Row 1 Look Up Table Register 1           (RW)
 00BD           RDI1RO0:      equ 0BDh          ; Row 1 Output Register 0                  (RW)
 00BE           RDI1RO1:      equ 0BEh          ; Row 1 Output Register 1                  (RW)
 0000           
 0000           ;------------------------------------------------
 0000           ;  I2C Configuration Registers
 0000           ;------------------------------------------------
 00D6           I2C_CFG:      equ 0D6h          ; I2C Configuration Register               (RW)
 0040           I2C_CFG_PINSEL:         equ 40h  ; MASK: Select P1[0] and P1[1] for I2C
 0020           I2C_CFG_BUSERR_IE:      equ 20h  ; MASK: Enable interrupt on Bus Error
 0010           I2C_CFG_STOP_IE:        equ 10h  ; MASK: Enable interrupt on Stop
 0000           I2C_CFG_CLK_RATE_100K:  equ 00h  ; MASK: I2C clock set at 100K
 0004           I2C_CFG_CLK_RATE_400K:  equ 04h  ; MASK: I2C clock set at 400K
 0008           I2C_CFG_CLK_RATE_50K:   equ 08h  ; MASK: I2C clock set at 50K
 000C           I2C_CFG_CLK_RATE_1M6:   equ 0Ch  ; MASK: I2C clock set at 1.6M
 000C           I2C_CFG_CLK_RATE:       equ 0Ch  ; MASK: I2C clock rate setting mask
 0002           I2C_CFG_PSELECT_MASTER: equ 02h  ; MASK: Enable I2C Master
 0001           I2C_CFG_PSELECT_SLAVE:  equ 01h  ; MASK: Enable I2C Slave
 0000           
 00D7           I2C_SCR:      equ 0D7h          ; I2C Status and Control Register          (#)
 0080           I2C_SCR_BUSERR:        equ 80h   ; MASK: I2C Bus Error detected           (RC)
 0040           I2C_SCR_LOSTARB:       equ 40h   ; MASK: I2C Arbitration lost             (RC)
 0020           I2C_SCR_STOP:          equ 20h   ; MASK: I2C Stop detected                (RC)
 0010           I2C_SCR_ACK:           equ 10h   ; MASK: ACK the last byte                (RW)
 0008           I2C_SCR_ADDR:          equ 08h   ; MASK: Address rcv'd is Slave address   (RC)
 0004           I2C_SCR_XMIT:          equ 04h   ; MASK: Set transfer to tranmit mode     (RW)
 0002           I2C_SCR_LRB:           equ 02h   ; MASK: Last recieved bit                (RC)
 0001           I2C_SCR_BYTECOMPLETE:  equ 01h   ; MASK: Transfer of byte complete        (RC)
 0000           
 00D8           I2C_DR:       equ 0D8h          ; I2C Data Register                        (RW)
 0000           
 00D9           I2C_MSCR:     equ 0D9h          ; I2C Master Status and Control Register   (#)
 0008           I2C_MSCR_BUSY:         equ 08h   ; MASK: I2C Busy (Start detected)        (R)
 0004           I2C_MSCR_MODE:         equ 04h   ; MASK: Start has been generated         (R)
 0002           I2C_MSCR_RESTART:      equ 02h   ; MASK: Generate a Restart condition     (RW)
 0001           I2C_MSCR_START:        equ 01h   ; MASK: Generate a Start condition       (RW)
 0000           
 0000           ;------------------------------------------------
 0000           ;  System and Global Resource Registers
 0000           ;------------------------------------------------
 00DA           INT_CLR0:     equ 0DAh          ; Interrupt Clear Register 0               (RW)
 0000                                          ; Use INT_MSK0 bit field masks
 00DB           INT_CLR1:     equ 0DBh          ; Interrupt Clear Register 1               (RW)
 0000                                          ; Use INT_MSK1 bit field masks
 00DD           INT_CLR3:     equ 0DDh          ; Interrupt Clear Register 3               (RW)
 0000                                          ; Use INT_MSK3 bit field masks
 0000           
 00DE           INT_MSK3:     equ 0DEh          ; I2C and Software Mask Register           (RW)
 0080           INT_MSK3_ENSWINT:          equ 80h ; MASK: enable/disable SW interrupt
 0001           INT_MSK3_I2C:              equ 01h ; MASK: enable/disable I2C interrupt
 0000           
 00E0           INT_MSK0:     equ 0E0h          ; General Interrupt Mask Register          (RW)
 0080           INT_MSK0_VC3:              equ 80h ; MASK: enable/disable VC3 interrupt
 0040           INT_MSK0_SLEEP:            equ 40h ; MASK: enable/disable sleep interrupt
 0020           INT_MSK0_GPIO:             equ 20h ; MASK: enable/disable GPIO  interrupt
 0010           INT_MSK0_ACOLUMN_3:        equ 10h ; MASK: enable/disable Analog col 3 interrupt
 0008           INT_MSK0_ACOLUMN_2:        equ 08h ; MASK: enable/disable Analog col 2 interrupt
 0004           INT_MSK0_ACOLUMN_1:        equ 04h ; MASK: enable/disable Analog col 1 interrupt
 0002           INT_MSK0_ACOLUMN_0:        equ 02h ; MASK: enable/disable Analog col 0 interrupt
 0001           INT_MSK0_VOLTAGE_MONITOR:  equ 01h ; MASK: enable/disable Volts interrupt
 0000           
 00E1           INT_MSK1:     equ 0E1h          ; Digital PSoC block Mask Register         (RW)
 0080           INT_MSK1_DCB13:            equ 80h ; MASK: enable/disable DCB13 block interrupt
 0040           INT_MSK1_DCB12:            equ 40h ; MASK: enable/disable DCB12 block interrupt
 0020           INT_MSK1_DBB11:            equ 20h ; MASK: enable/disable DBB11 block interrupt
 0010           INT_MSK1_DBB10:            equ 10h ; MASK: enable/disable DBB10 block interrupt
 0008           INT_MSK1_DCB03:            equ 08h ; MASK: enable/disable DCB03 block interrupt
 0004           INT_MSK1_DCB02:            equ 04h ; MASK: enable/disable DCB02 block interrupt
 0002           INT_MSK1_DBB01:            equ 02h ; MASK: enable/disable DBB01 block interrupt
 0001           INT_MSK1_DBB00:            equ 01h ; MASK: enable/disable DBB00 block interrupt
 0000           
 00E2           INT_VC:       equ 0E2h          ; Interrupt vector register                (RC)
 00E3           RES_WDT:      equ 0E3h          ; Watch Dog Timer Register                 (W)
 0000           
 0000           ; DECIMATOR Registers
 00E4           DEC_DH:       equ 0E4h          ; Data Register (high byte)                (RC)
 00E5           DEC_DL:       equ 0E5h          ; Data Register ( low byte)                (RC)
 00E6           DEC_CR0:      equ 0E6h          ; Data Control Register 0                  (RW)
 00E7           DEC_CR1:      equ 0E7h          ; Data Control Register 1                  (RW)
 0000           
 0000           ; Multiplier and MAC (Multiply/Accumulate) Unit
 00E8           MUL_X:        equ 0E8h          ; Multiplier X Register (write)            (W)
 00E9           MUL_Y:        equ 0E9h          ; Multiplier Y Register (write)            (W)
 00EA           MUL_DH:       equ 0EAh          ; Multiplier Result Data (high byte read)  (R)
 00EB           MUL_DL:       equ 0EBh          ; Multiplier Result Data ( low byte read)  (R)
 00EC           MAC_X:        equ 0ECh          ; write = MAC X register [also see ACC_DR1]
 00EC           ACC_DR1:      equ MAC_X        ; read =  MAC Accumulator, byte 1          (RW)
 00ED           MAC_Y:        equ 0EDh          ; write = MAC Y register [also see ACC_DR0]
 00ED           ACC_DR0:      equ MAC_Y        ; read =  MAC Accumulator, byte 0          (RW)
 00EE           MAC_CL0:      equ 0EEh          ; write = MAC Clear Accum [also see ACC_DR3]
 00EE           ACC_DR3:      equ MAC_CL0      ; read =  MAC Accumulator, byte 3          (RW)
 00EF           MAC_CL1:      equ 0EFh          ; write = MAC Clear Accum [also see ACC_DR2]
 00EF           ACC_DR2:      equ MAC_CL1      ; read =  MAC Accumulator, byte 2          (RW)
 0000           
 0000           ;------------------------------------------------------
 0000           ;  System Status and Control Registers
 0000           ;
 0000           ;  Note: The following registers are mapped into both
 0000           ;        register bank 0 AND register bank 1.
 0000           ;------------------------------------------------------
 00F7           CPU_F:        equ 0F7h          ; CPU Flag Register Access                 (RO)
 0000                                              ; Use FLAG_ masks defined at top of file
 0000           
 00FE           CPU_SCR1:     equ 0FEh          ; CPU Status and Control Register #1       (#)
 0010           CPU_SCR1_SLIMO:         equ 10h	   ; MASK: Slow IMO (internal main osc) enable
 0080           CPU_SCR1_IRESS:         equ 80h    ; MASK: flag, Internal Reset Status bit
 0008           CPU_SCR1_ECO_ALWD_WR:   equ 08h    ; MASK: flag, ECO allowed has been written
 0004           CPU_SCR1_ECO_ALLOWED:   equ 04h    ; MASK: ECO allowed to be enabled
 0001           CPU_SCR1_IRAMDIS:       equ 01h    ; MASK: Disable RAM initialization on WDR
 0000           
 00FF           CPU_SCR0:     equ 0FFh          ; CPU Status and Control Register #2       (#)
 0080           CPU_SCR0_GIE_MASK:      equ 80h    ; MASK: Global Interrupt Enable shadow
 0020           CPU_SCR0_WDRS_MASK:     equ 20h    ; MASK: Watch Dog Timer Reset
 0010           CPU_SCR0_PORS_MASK:     equ 10h    ; MASK: power-on reset bit PORS
 0008           CPU_SCR0_SLEEP_MASK:    equ 08h    ; MASK: Enable Sleep
 0001           CPU_SCR0_STOP_MASK:     equ 01h    ; MASK: Halt CPU bit
 0000           
 0000           
 0000           ;;=============================================================================
 0000           ;;      Register Space, Bank 1
 0000           ;;=============================================================================
 0000           
 0000           ;------------------------------------------------
 0000           ;  Port Registers
 0000           ;  Note: Also see this address range in Bank 0.
 0000           ;------------------------------------------------
 0000           ; Port 0
 0000           PRT0DM0:      equ 00h          ; Port 0 Drive Mode 0                      (RW)
 0001           PRT0DM1:      equ 01h          ; Port 0 Drive Mode 1                      (RW)
 0002           PRT0IC0:      equ 02h          ; Port 0 Interrupt Control 0               (RW)
 0003           PRT0IC1:      equ 03h          ; Port 0 Interrupt Control 1               (RW)
 0000           
 0000           ; Port 1
 0004           PRT1DM0:      equ 04h          ; Port 1 Drive Mode 0                      (RW)
 0005           PRT1DM1:      equ 05h          ; Port 1 Drive Mode 1                      (RW)
 0006           PRT1IC0:      equ 06h          ; Port 1 Interrupt Control 0               (RW)
 0007           PRT1IC1:      equ 07h          ; Port 1 Interrupt Control 1               (RW)
 0000           
 0000           ; Port 2
 0008           PRT2DM0:      equ 08h          ; Port 2 Drive Mode 0                      (RW)
 0009           PRT2DM1:      equ 09h          ; Port 2 Drive Mode 1                      (RW)
 000A           PRT2IC0:      equ 0Ah          ; Port 2 Interrupt Control 0               (RW)
 000B           PRT2IC1:      equ 0Bh          ; Port 2 Interrupt Control 1               (RW)
 0000           
 0000           ; Port 3
 000C           PRT3DM0:      equ 0Ch          ; Port 3 Drive Mode 0                      (RW)
 000D           PRT3DM1:      equ 0Dh          ; Port 3 Drive Mode 1                      (RW)
 000E           PRT3IC0:      equ 0Eh          ; Port 3 Interrupt Control 0               (RW)
 000F           PRT3IC1:      equ 0Fh          ; Port 3 Interrupt Control 1               (RW)
 0000           
 0000           ; Port 4
 0010           PRT4DM0:      equ 10h          ; Port 4 Drive Mode 0                      (RW)
 0011           PRT4DM1:      equ 11h          ; Port 4 Drive Mode 1                      (RW)
 0012           PRT4IC0:      equ 12h          ; Port 4 Interrupt Control 0               (RW)
 0013           PRT4IC1:      equ 13h          ; Port 4 Interrupt Control 1               (RW)
 0000           
 0000           ; Port 5
 0014           PRT5DM0:      equ 14h          ; Port 5 Drive Mode 0                      (RW)
 0015           PRT5DM1:      equ 15h          ; Port 5 Drive Mode 1                      (RW)
 0016           PRT5IC0:      equ 16h          ; Port 5 Interrupt Control 0               (RW)
 0017           PRT5IC1:      equ 17h          ; Port 5 Interrupt Control 1               (RW)
 0000           
 0000           ;------------------------------------------------
 0000           ;  Digital PSoC(tm) block Registers
 0000           ;  Note: Also see this address range in Bank 0.
 0000           ;------------------------------------------------
 0000           
 0000           ; Digital PSoC block 00, Basic Type B
 0020           DBB00FN:      equ 20h          ; Function Register                        (RW)
 0021           DBB00IN:      equ 21h          ;    Input Register                        (RW)
 0022           DBB00OU:      equ 22h          ;   Output Register                        (RW)
 0000           
 0000           ; Digital PSoC block 01, Basic Type B
 0024           DBB01FN:      equ 24h          ; Function Register                        (RW)
 0025           DBB01IN:      equ 25h          ;    Input Register                        (RW)
 0026           DBB01OU:      equ 26h          ;   Output Register                        (RW)
 0000           
 0000           ; Digital PSoC block 02, Communications Type B
 0028           DCB02FN:      equ 28h          ; Function Register                        (RW)
 0029           DCB02IN:      equ 29h          ;    Input Register                        (RW)
 002A           DCB02OU:      equ 2Ah          ;   Output Register                        (RW)
 0000           
 0000           ; Digital PSoC block 03, Communications Type B
 002C           DCB03FN:      equ 2Ch          ; Function Register                        (RW)
 002D           DCB03IN:      equ 2Dh          ;    Input Register                        (RW)
 002E           DCB03OU:      equ 2Eh          ;   Output Register                        (RW)
 0000           
 0000           ; Digital PSoC block 10, Basic Type B
 0030           DBB10FN:      equ 30h          ; Function Register                        (RW)
 0031           DBB10IN:      equ 31h          ;    Input Register                        (RW)
 0032           DBB10OU:      equ 32h          ;   Output Register                        (RW)
 0000           
 0000           ; Digital PSoC block 11, Basic Type B
 0034           DBB11FN:      equ 34h          ; Function Register                        (RW)
 0035           DBB11IN:      equ 35h          ;    Input Register                        (RW)
 0036           DBB11OU:      equ 36h          ;   Output Register                        (RW)
 0000           
 0000           ; Digital PSoC block 12, Communications Type B
 0038           DCB12FN:      equ 38h          ; Function Register                        (RW)
 0039           DCB12IN:      equ 39h          ;    Input Register                        (RW)
 003A           DCB12OU:      equ 3Ah          ;   Output Register                        (RW)
 0000           
 0000           ; Digital PSoC block 13, Communications Type B
 003C           DCB13FN:      equ 3Ch          ; Function Register                        (RW)
 003D           DCB13IN:      equ 3Dh          ;    Input Register                        (RW)
 003E           DCB13OU:      equ 3Eh          ;   Output Register                        (RW)
 0000           
 0000           ;------------------------------------------------
 0000           ;  System and Global Resource Registers
 0000           ;  Note: Also see this address range in Bank 0.
 0000           ;------------------------------------------------
 0000           
 0060           CLK_CR0:      equ 60h          ; Analog Column Clock Select Register 0    (RW)
 00C0           CLK_CR0_ACOLUMN_3:    equ 0C0h    ; MASK: Specify clock for analog cloumn
 0030           CLK_CR0_ACOLUMN_2:    equ 30h    ; MASK: Specify clock for analog cloumn
 000C           CLK_CR0_ACOLUMN_1:    equ 0Ch    ; MASK: Specify clock for analog cloumn
 0003           CLK_CR0_ACOLUMN_0:    equ 03h    ; MASK: Specify clock for analog cloumn
 0000           
 0061           CLK_CR1:      equ 61h          ; Analog Clock Source Select Register 1    (RW)
 0040           CLK_CR1_SHDIS:        equ 40h    ; MASK: Sample and Hold Disable (all Columns)
 0038           CLK_CR1_ACLK1:        equ 38h    ; MASK: Digital PSoC block for analog source
 0007           CLK_CR1_ACLK2:        equ 07h    ; MASK: Digital PSoC block for analog source
 0000           
 0062           ABF_CR0:      equ 62h          ; Analog Output Buffer Control Register 0  (RW)
 0080           ABF_CR0_ACOL1MUX:     equ 80h    ; MASK: Analog Column 1 Mux control
 0040           ABF_CR0_ACOL2MUX:     equ 40h    ; MASK: Analog Column 2 Mux control
 0020           ABF_CR0_ABUF1EN:      equ 20h    ; MASK: Enable ACol 1 analog buffer (P0[5])
 0010           ABF_CR0_ABUF2EN:      equ 10h    ; MASK: Enable ACol 2 analog buffer (P0[4])
 0008           ABF_CR0_ABUF0EN:      equ 08h    ; MASK: Enable ACol 0 analog buffer (P0[3])
 0004           ABF_CR0_ABUF3EN:      equ 04h    ; MASK: Enable ACol 3 analog buffer (P0[2])
 0002           ABF_CR0_BYPASS:       equ 02h    ; MASK: Bypass the analog buffers
 0001           ABF_CR0_PWR:          equ 01h    ; MASK: High power mode on all analog buffers
 0000           
 0063           AMD_CR0:      equ 63h          ; Analog Modulator Control Register 0      (RW)
 0070           AMD_CR0_AMOD2:        equ 70h    ; MASK: Modulation source for analog column 2
 0007           AMD_CR0_AMOD0:        equ 07h    ; MASK: Modulation source for analog column 1
 0000           
 0066           AMD_CR1:      equ 66h          ; Analog Modulator Control Register 1      (RW)
 0070           AMD_CR1_AMOD3:        equ 70h    ; MASK: Modulation ctrl for analog column 3
 0007           AMD_CR1_AMOD1:        equ 07h    ; MASK: Modulation ctrl for analog column 1
 0000           
 0067           ALT_CR0:      equ 67h          ; Analog Look Up Table (LUT) Register 0    (RW)
 00F0           ALT_CR0_LUT1:         equ 0F0h    ; MASK: Look up table 1 selection
 000F           ALT_CR0_LUT0:         equ 0Fh    ; MASK: Look up table 0 selection
 0000           
 0068           ALT_CR1:      equ 68h          ; Analog Look Up Table (LUT) Register 1    (RW)
 00F0           ALT_CR1_LUT3:         equ 0F0h    ; MASK: Look up table 3 selection
 000F           ALT_CR1_LUT2:         equ 0Fh    ; MASK: Look up table 2 selection
 0000           
 0069           CLK_CR2:      equ 69h          ; Analog Clock Source Control Register 2   (RW)
 0008           CLK_CR2_ACLK1R:       equ 08h    ; MASK: Analog Clock 1 selection range
 0001           CLK_CR2_ACLK0R:       equ 01h    ; MASK: Analog Clock 0 selection range
 0000           
 0000           ;------------------------------------------------
 0000           ;  Global Digital Interconnects
 0000           ;------------------------------------------------
 0000           
 00D0           GDI_O_IN:     equ 0D0h          ; Global Dig Interconnect Odd Inputs Reg   (RW)
 00D1           GDI_E_IN:     equ 0D1h          ; Global Dig Interconnect Even Inputs Reg  (RW)
 00D2           GDI_O_OU:     equ 0D2h          ; Global Dig Interconnect Odd Outputs Reg  (RW)
 00D3           GDI_E_OU:     equ 0D3h          ; Global Dig Interconnect Even Outputs Reg (RW)
 0000           
 0000           ;------------------------------------------------
 0000           ;  Clock and System Control Registers
 0000           ;------------------------------------------------
 0000           
 00DD           OSC_GO_EN:    equ 0DDh          ; Oscillator to Global Outputs Enable Register (RW)
 0080           OSC_GOEN_SLPINT:      equ 80h	 ; Enable Sleep Timer onto GOE[7]
 0040           OSC_GOEN_VC3:         equ 40h    ; Enable VC3 onto GOE[6]
 0020           OSC_GOEN_VC2:         equ 20h    ; Enable VC2 onto GOE[5]
 0010           OSC_GOEN_VC1:         equ 10h    ; Enable VC1 onto GOE[4]
 0008           OSC_GOEN_SYSCLKX2:    equ 08h    ; Enable 2X SysClk onto GOE[3]
 0004           OSC_GOEN_SYSCLK:      equ 04h    ; Enable 1X SysClk onto GOE[2]
 0002           OSC_GOEN_CLK24M:      equ 02h    ; Enable 24 MHz clock onto GOE[1]
 0001           OSC_GOEN_CLK32K:      equ 01h    ; Enable 32 kHz clock onto GOE[0]
 0000           
 00DE           OSC_CR4:      equ 0DEh          ; Oscillator Control Register 4            (RW)
 0003           OSC_CR4_VC3:          equ 03h    ; MASK: System VC3 Clock source
 0000           
 00DF           OSC_CR3:      equ 0DFh          ; Oscillator Control Register 3            (RW)
 0000           
 00E0           OSC_CR0:      equ 0E0h          ; System Oscillator Control Register 0     (RW)
 0080           OSC_CR0_32K_SELECT:   equ 80h    ; MASK: Enable/Disable External XTAL Osc
 0040           OSC_CR0_PLL_MODE:     equ 40h    ; MASK: Enable/Disable PLL
 0020           OSC_CR0_NO_BUZZ:      equ 20h    ; MASK: Bandgap always powered/BUZZ bandgap
 0018           OSC_CR0_SLEEP:        equ 18h    ; MASK: Set Sleep timer freq/period
 0000           OSC_CR0_SLEEP_512Hz:  equ 00h    ;     Set sleep bits for 1.95ms period
 0008           OSC_CR0_SLEEP_64Hz:   equ 08h    ;     Set sleep bits for 15.6ms period
 0010           OSC_CR0_SLEEP_8Hz:    equ 10h    ;     Set sleep bits for 125ms period
 0018           OSC_CR0_SLEEP_1Hz:    equ 18h    ;     Set sleep bits for 1 sec period
 0007           OSC_CR0_CPU:          equ 07h    ; MASK: Set CPU Frequency
 0000           OSC_CR0_CPU_3MHz:     equ 00h    ;     set CPU Freq bits for 3MHz Operation
 0001           OSC_CR0_CPU_6MHz:     equ 01h    ;     set CPU Freq bits for 6MHz Operation
 0002           OSC_CR0_CPU_12MHz:    equ 02h    ;     set CPU Freq bits for 12MHz Operation
 0003           OSC_CR0_CPU_24MHz:    equ 03h    ;     set CPU Freq bits for 24MHz Operation
 0004           OSC_CR0_CPU_1d5MHz:   equ 04h    ;     set CPU Freq bits for 1.5MHz Operation
 0005           OSC_CR0_CPU_750kHz:   equ 05h    ;     set CPU Freq bits for 750kHz Operation
 0006           OSC_CR0_CPU_187d5kHz: equ 06h    ;     set CPU Freq bits for 187.5kHz Operation
 0007           OSC_CR0_CPU_93d7kHz:  equ 07h    ;     set CPU Freq bits for 93.7kHz Operation
 0000           
 00E1           OSC_CR1:      equ 0E1h          ; System VC1/VC2 Divider Control Register  (RW)
 00F0           OSC_CR1_VC1:          equ 0F0h    ; MASK: System VC1 24MHz/External Clk divider
 000F           OSC_CR1_VC2:          equ 0Fh    ; MASK: System VC2 24MHz/External Clk divider
 0000           
 00E2           OSC_CR2:      equ 0E2h          ; Oscillator Control Register 2            (RW)
 0080           OSC_CR2_PLLGAIN:      equ 80h    ; MASK: High/Low gain
 0004           OSC_CR2_EXTCLKEN:     equ 04h    ; MASK: Enable/Disable External Clock
 0001           OSC_CR2_SYSCLKX2DIS:  equ 01h    ; MASK: Enable/Disable 48MHz clock source
 0000           
 00E3           VLT_CR:       equ 0E3h          ; Voltage Monitor Control Register         (RW)
 0080           VLT_CR_SMP:           equ 80h    ; MASK: Enable Switch Mode Pump
 0030           VLT_CR_PORLEV:        equ 30h    ; MASK: Mask for Power on Reset level control
 0000           VLT_CR_POR_LOW:       equ 00h    ;   Lowest  Precision Power-on Reset trip point
 0010           VLT_CR_POR_MID:       equ 10h    ;   Middle  Precision Power-on Reset trip point
 0020           VLT_CR_POR_HIGH:      equ 20h    ;   Highest Precision Power-on Reset trip point
 0008           VLT_CR_LVDTBEN:       equ 08h    ; MASK: Enable the CPU Throttle Back on LVD
 0007           VLT_CR_VM:            equ 07h    ; MASK: Mask for Voltage Monitor level setting
 0000           VLT_CR_3V0_POR:       equ 00h    ; -- deprecated symbols --
 0010           VLT_CR_4V5_POR:       equ 10h    ;    deprecated
 0020           VLT_CR_4V75_POR:      equ 20h    ;    deprecated
 0030           VLT_CR_DISABLE:       equ 30h    ;    deprecated
 0000           
 00E4           VLT_CMP:      equ 0E4h          ; Voltage Monitor Comparators Register     (R)
 0004           VLT_CMP_PUMP:         equ 04h    ; MASK: Vcc below SMP trip level
 0002           VLT_CMP_LVD:          equ 02h    ; MASK: Vcc below LVD trip level
 0001           VLT_CMP_PPOR:         equ 01h    ; MASK: Vcc below PPOR trip level
 0000           
 00E8           IMO_TR:       equ 0E8h          ; Internal Main Oscillator Trim Register   (W)
 00E9           ILO_TR:       equ 0E9h          ; Internal Low-speed Oscillator Trim       (W)
 00EA           BDG_TR:       equ 0EAh          ; Band Gap Trim Register                   (W)
 00EB           ECO_TR:       equ 0EBh          ; External Oscillator Trim Register        (W)
 0000           
 0000           ;;=============================================================================
 0000           ;;      M8C System Macros
 0000           ;;  These macros should be used when their functions are needed.
 0000           ;;=============================================================================
 0000           
 0000           ;----------------------------------------------------
 0000           ;  Swapping Register Banks
 0000           ;----------------------------------------------------
 0000               macro M8C_SetBank0
 0000               and   F, ~FLAG_XIO_MASK
 0000               macro M8C_SetBank1
 0000               or    F, FLAG_XIO_MASK
 0000               macro M8C_EnableGInt
 0000               or    F, FLAG_GLOBAL_IE
 0000               macro M8C_DisableGInt
 0000               and   F, ~FLAG_GLOBAL_IE
 0000               macro M8C_DisableIntMask
 0000               and   reg[@0], ~@1              ; disable specified interrupt enable bit
 0000               macro M8C_EnableIntMask
 0000               or    reg[@0], @1               ; enable specified interrupt enable bit
 0000               macro M8C_ClearIntFlag
 0000               mov   reg[@0], ~@1              ; clear specified interrupt enable bit
 0000               macro M8C_EnableWatchDog
 0000               and   reg[CPU_SCR0], ~CPU_SCR0_PORS_MASK
 0000               macro M8C_ClearWDT
 0000               mov   reg[RES_WDT], 00h
 0000               macro M8C_ClearWDTAndSleep
 0000               mov   reg[RES_WDT], 38h
 0000               macro M8C_Stall
 0000               or    reg[ASY_CR], ASY_CR_SYNCEN
 0000               macro M8C_Unstall
 0000               and   reg[ASY_CR], ~ASY_CR_SYNCEN
 0000               macro M8C_Sleep
 0000               or    reg[CPU_SCR0], CPU_SCR0_SLEEP_MASK
 0000               ; The next instruction to be executed depends on the state of the
 0000               ; various interrupt enable bits. If some interrupts are enabled
 0000               ; and the global interrupts are disabled, the next instruction will
 0000               ; be the one that follows the invocation of this macro. If global
 0000               ; interrupts are also enabled then the next instruction will be
 0000               ; from the interrupt vector table. If no interrupts are enabled
 0000               ; then the CPU sleeps forever.
 0000               macro M8C_Stop
 0000               ; In general, you probably don't want to do this, but here's how:
 0000               or    reg[CPU_SCR0], CPU_SCR0_STOP_MASK
 0000               ; Next instruction to be executed is located in the interrupt
 0000               ; vector table entry for Power-On Reset.
 0000               macro M8C_Reset
 0000               ; Restore CPU to the power-on reset state.
 0000               mov A, 0
 0000               SSC
 0000               ; Next non-supervisor instruction will be at interrupt vector 0.
 0000               macro Suspend_CodeCompressor
 0000               or   F, 0
 0000               macro Resume_CodeCompressor
 0000               add  SP, 0
 00E0           SleepTimer_INT_REG:                        equ 0x0e0
 0040           SleepTimer_INT_MASK:                       equ 0x40
 0000           
 0001           SleepTimer_TICK_CNTR_SIZE:                  equ  1h
 0000           
 0000           ; Frequency of sleep timer interrupts
 0018           SleepTimer_1_HZ:                            equ 0x18
 0010           SleepTimer_8_HZ:                            equ 0x10
 0008           SleepTimer_64_HZ:                           equ 0x08
 0000           SleepTimer_512_HZ:                          equ 0x00
 0018           SleepTimer_CLOCK_MASK:                      equ 0x18
 0000           
 0001           SleepTimer_FORCE_RELOAD:                    equ 0x01
 0000           SleepTimer_WAIT_RELOAD:                     equ 0x00
 0000           R_REGISTER:		EQU 0x00
 0020           W_REGISTER:		EQU 0x20
 0060           R_RX_PL_WID:	EQU 0x60
 0061           R_RX_PAYLOAD:	EQU 0x61
 00A0           W_TX_PAYLOAD:	EQU 0xA0
 00E1           FLUSH_TX:		EQU 0xE1
 00E2           FLUSH_RX:		EQU 0xE2
 00E3           REUSE_TX_PL:	EQU 0xE3
 0000           
 0000           ; Register addresses
 0000           CONFIG:		 	EQU 0x00
 0001           EN_AA:		 	EQU 0x01
 0002           EN_RXADDR:		EQU 0x02
 0003           SETUP_AW:		EQU 0x03
 0004           SETUP_RETR:		EQU 0x04
 0005           RF_CH:			EQU 0x05
 0006           RF_SETUP:		EQU 0x06
 0007           STATUS:			EQU 0x07
 0008           OBSERVE_TX:		EQU 0x08
 0009           CD:		 		EQU 0x09
 000A           RX_ADDR_P0:		EQU 0x0A
 000B           RX_ADDR_P1:		EQU 0x0B
 000C           RX_ADDR_P2:		EQU 0x0C
 000D           RX_ADDR_P3:		EQU 0x0D
 000E           RX_ADDR_P4:		EQU 0x0E
 000F           RX_ADDR_P5:		EQU 0x0F
 0010           TX_ADDR:		EQU 0x10
 0011           RX_PW_P0:		EQU 0x11
 0012           RX_PW_P1:		EQU 0x12
 0013           RX_PW_P2:		EQU 0x13
 0014           RX_PW_P3:		EQU 0x14
 0015           RX_PW_P4:		EQU 0x15
 0016           RX_PW_P5:		EQU 0x16
 0017           FIFO_STATUS:	EQU 0x17
 001C           DYNPD:		 	EQU 0x1c
 001D           FEATURE:		EQU 0x1d
 0000           
 0000           ; IRQ interrupt masks
 0040           MASK_RX_DR:		EQU 0x40
 0020           MASK_TX_DS:		EQU 0x20
 0010           MASK_MAX_RT:	EQU 0x10
 0000           
 0000           ; useful STATUS register masks
 0040           RX_DR_MASK:		EQU 0x40
 0020           TX_DS_MASK:		EQU 0x20
 0001           TX_FULL_MASK:	EQU 0x01
 0000           
 0000           
                export _main
                export rxrdy_flag
                
                ;; GPIO macros
 0000           macro SetCE_High
 0000                   or              [Port_0_Data_SHADE], 2h                         ; OR CE pin with shadow reg
 0000                   mov             A, [Port_0_Data_SHADE]                          ; Load shadow reg in A
 0000                   mov             reg[CE_Data_ADDR], A                            ; Store data in port 0
 0000           macro SetCE_Low
 0000                   or              [Port_0_Data_SHADE], ~2h                        ; OR not-CE with shadow reg
 0000                   mov             A, [Port_0_Data_SHADE]                          ; Load shadow reg in A
 0000                   mov             reg[CE_Data_ADDR], A                            ; Store data in port 0
 0000           macro SetCSN_High
 0000                   or              [Port_0_Data_SHADE], 4h                         ; OR CSN pin with shadow reg
 0000                   mov             A, [Port_0_Data_SHADE]                          ; Load shadow reg in A
 0000                   mov             reg[CSN_Data_ADDR], A                           ; Store data in port 0
 0000           macro SetCSN_Low
 0000                   and             [Port_0_Data_SHADE], ~4h                        ; OR not-CSN with shadow reg
 0000                   mov             A, [Port_0_Data_SHADE]                          ; Load shadow reg in A
 0000                   mov             reg[CSN_Data_ADDR], A                           ; Store data in port 0
                area bss(ram, rel)
                
 0000           rxrdy_flag: blk 1       ; interrupt flag
 0001           
 0001           pipe0_data: blk 10      ; Allocate 10 bytes for each transmitter 
 000B           pipe1_data: blk 10      
 0015           pipe2_data: blk 10
 001F           pipe3_data: blk 10
 0029           pipe4_data: blk 10
 0033           pipe5_data: blk 10
 003D           
 003D           pointer: blk 1          ; Byte used as a pointer for Source/Destination Indirect Post Increment addressing
 003E                                                   
 003E           row1Index: blk 1        ; indexes to alternate values on LCD
 003F           row2Index: blk 1        ; 
 0040           
 0040           temp: blk 1                     ; Temporary storage
 0041           
 0041           ;; ROM constants
                area table(rom,rel)
 0000           pipes_table:
 0000 010B151F2933      DB pipe0_data, pipe1_data, pipe2_data, pipe3_data, pipe4_data, pipe5_data       ; Pointers to pipes data
                area text(rom, rel)
 0000           .LITERAL 
 0000           default_string:
 0000 4E2F4100  asciz "N/A"
 0004           .ENDLITERAL 
 0004           
 0004           ;############################## MAIN PROGRAM ###############################
 0004           _main:
 0004           ;-------------------------------- RAM INIT ---------------------------------
 0004           	
 0004 553E00            mov [row1Index], 0      ; init display indexes to the first 2 elements
 0007 553F01            mov [row2Index], 1
 000A 550000            mov [rxrdy_flag], 0     ; init rxrdy flag to 0
 000D           
 000D           ; Init the 6 pipes buffer to a default value ("NA")
 000D           
 000D 5000              mov A, 0        ; Push pipe buffer index on the stack (init to 0)
 000F 08                push A
 0010           .init_buffers:
 0010 20                pop X                           ; Pop pipe index to X
 0011 5B                mov A, X                        ; Transfer it to A
 0012 3906              cmp A, 0x6                      ; End when the default string is copied to all 6 buffers
 0014 A013              jz .end_init_buff
 0016 F000              index pipes_table       ; Get next pipe buffer address
 0018 533D              mov [pointer], A        ; Store it to the pointer
 001A 75                inc X                           ; Increase pipe index
 001B 10                push X                          ; Preserve it on the stack
 001C 5700              mov X, 0                        ; Init x to 0, now the character index
 001E           .init_pipe_buff:
 001E 5B                mov A, X                                ; Transfer character index to A
 001F FFDF              index default_string    ; Get current character from the default string
 0021 3F3D              mvi [pointer], A                ; Store it to the buffer, increasing the pointer
 0023 AFEC              jz .init_buffers                ; End on null character and init next buffer
 0025 75                inc X                                   ; Increase character index
 0026 8FF7              jmp .init_pipe_buff             ; write next character
 0028           .end_init_buff:
 0028           
 0028           	
 0028           ;------------------------------ HARDWARE SETUP-----------------------------
 0028              
 0028           ; Interrupts 
 0028 430108            or reg[PRT0IE], 0x08                                            ; Enable int on IRQ pin
 002B 43E020        or    reg[INT_MSK0], INT_MSK0_GPIO               ; enable specified interrupt enable bit
 002E 7101          or    F, FLAG_GLOBAL_IE
 0030           
 0030           ; SPI init 
 0030 5000              mov A,  SPIM_SPIM_MODE_0 | SPIM_SPIM_MSB_FIRST  ; Leading edge latch, MSB first
 0032 7C0000            lcall SPIM_Start                                                                ; Start SPI module
 0035           
 0035           ; LCD 
 0035 7C0000            lcall LCD_Start                         ; Init and start the LCD module
 0038           
 0038           ; Sleep Timer 
 0038 7C0000            lcall SleepTimer_EnableInt      ; Enable Sleep Timer interrupt
 003B 7C0000            lcall SleepTimer_Start          ; Start Sleep Timer
 003E 5010              mov A, 0x10
 0040 7C0000            lcall SleepTimer_SetTimer       ; Set it to count 2 secs
 0043                   
 0043           ; Nrf Module init 
 0043 500A              mov A, 0x0A                                     ; Give 100 ms to the nRF module for power on reset
 0045 7C0000            lcall Delay10msTimes
 0048 907A              call InitNrfRx                          ; Configure and start the nRF in RX mode
 004A                   
 004A 8061              jmp .update_display                     ; start the program with display update, then go through main loop
 004C                   
 004C           
 004C           ;------------------------------- MAIN LOOP -----------------------------------  
 004C           
 004C           .main_loop:
 004C 5100              mov A, [rxrdy_flag]             ; Check RX Ready status
 004E B023              jnz .get_rx_data                        ; Go get new data if available
 0050 7C0000            lcall SleepTimer_bGetTimer      ; Get the Sleep Timer count
 0053 3900              cmp A, 0                                ; Check if it expired
 0055 BFF6              jnz .main_loop                          ; If not, jump back to beginning of main loop
 0057           
 0057                   ;----- Increase indexes to alternate values on LCD -----
 0057           .change_display_idx:
 0057 763E              inc [row1Index]                         ; Increment row index 1
 0059 3C3E06            cmp [row1Index], 6                      ; check if out of bound (>5)
 005C B004              jnz .inc_rowI2                          ; Skip to 2nd row index if ok
 005E 553E00            mov [row1Index], 0                      ; Otherwise reset it to 0
 0061           .inc_rowI2:
 0061 763F              inc [row2Index]                         ; Increment row index 2
 0063 3C3F06            cmp [row2Index], 6                      ; check if out of bound (>5)
 0066 B004              jnz .reload_timer                       ; Skip to reload timer if ok
 0068 553F00            mov [row2Index], 0                      ; Otherwise reset it to 0
 006B           .reload_timer:
 006B 5010              mov A, 0x10
 006D 7C0000            lcall SleepTimer_SetTimer       ; Set timer to count 2 secs
 0070 803B              jmp .update_display                     ; Jump to update display
 0072           
 0072                           ;----- Get data from the nRF FIFO -----
 0072           .get_rx_data:	
 0072 550000            mov [rxrdy_flag], 0                     ; Clear rx ready flag
 0075           .loop_rx_data:
 0075 5007              mov A, STATUS                           ; Get status register content
 0077 90F9              call NrfGetReg                          ; 
 0079 210E              and A, 0x0e                                     ; Mask data pipe number
 007B 70FB              and F, 0xfb                             ; Clear carry 
 007D 6D                rrc A                                           ; Rotate right -> get pipe number in A
 007E 3907              cmp A, 0x07                                     ; Check if FIFO empty
 0080 A012              jz .clear_buffer                        ; End read payload if empty
 0082 08                push A                                          ; Store pipe number on stack
 0083 5060              mov A, R_RX_PL_WID                      ; Get payload width in bytes
 0085 90EB              call NrfGetReg
 0087 5C                mov X, A                                    ; Transfer payload width in X
 0088 18                pop A                                           ; Pop the pipe number back in A
 0089 9135              call ReadPayload                        ; Read the payload from nRF
 008B 5027              mov A, W_REGISTER | STATUS      ; Write 0x40 to config register to ACK interrupt
 008D 5740              mov X, MASK_RX_DR
 008F 90C2              call NrfSetReg                          ; Ack interrupt
 0091 8FE3              jmp .loop_rx_data                       ; check if more payloads are on FIFO    
 0093           .clear_buffer:	
 0093 9183              call WaitBufferFree     
 0095 2600FB            and             [Port_0_Data_SHADE], ~4h                        ; OR not-CSN with shadow reg
 0098 5100              mov             A, [Port_0_Data_SHADE]                          ; Load shadow reg in A
 009A 6000              mov             reg[CSN_Data_ADDR], A                           ; Store data in port 0
 009C 50E2              mov A, FLUSH_RX
 009E 7C0000            lcall SPIM_SendTxData   ; Send value over SPI
 00A1 9175              call WaitBufferFree             ; Wait until tx buffer is empty
 00A3 2E0004            or              [Port_0_Data_SHADE], 4h                         ; OR CSN pin with shadow reg
 00A6 5100              mov             A, [Port_0_Data_SHADE]                          ; Load shadow reg in A
 00A8 6000              mov             reg[CSN_Data_ADDR], A                           ; Store data in port 0
 00AA 91B0              call Read_All_Regs
 00AC           ;----- Refresh the display if timer expired or if data has changed -----
 00AC           .update_display:			
 00AC 5000              mov A, 0                                
 00AE 5700              mov X, 0
 00B0 7C0000            lcall LCD_Position
 00B3 513E              mov A, [row1Index]
 00B5 9169              call Write_To_LCD
 00B7 5001              mov A, 1
 00B9 5700              mov X, 0
 00BB 7C0000            lcall LCD_Position
 00BE 513F              mov A, [row2Index]
 00C0 915E              call Write_To_LCD
 00C2               
 00C2 8F89              jmp .main_loop
 00C4                   
 00C4           ;-------------------------------- END MAIN -----------------------------------  
 00C4           
 00C4           ;-----------------------------------------------------------------------------
 00C4           ;  FUNCTION NAME: InitNrfRx
 00C4           ;
 00C4           ;  DESCRIPTION:
 00C4           ;     Initialize and start the nRF module as a receiver
 00C4           ;
 00C4           ;-----------------------------------------------------------------------------
 00C4           ;
 00C4           ;  ARGUMENTS:
 00C4           ;     none
 00C4           ;
 00C4           ;  RETURNS:
 00C4           ;         none
 00C4           ;-----------------------------------------------------------------------------
 00C4           InitNrfRx:
 00C4 2E0004            or              [Port_0_Data_SHADE], 4h                         ; OR CSN pin with shadow reg
 00C7 5100              mov             A, [Port_0_Data_SHADE]                          ; Load shadow reg in A
 00C9 6000              mov             reg[CSN_Data_ADDR], A                           ; Store data in port 0
 00CB 5014              mov A, 20                       ; load accumulator with delay counter
 00CD 9000              call Delay50uTimes      ; Wait 1 ms 
 00CF                   
 00CF                   ;-- Configuration registers --;
 00CF 5020              mov A, W_REGISTER | CONFIG      ; Set write to config register
 00D1 5739              mov X, 0x39                                     ; Set register value ( Rx ready int, CRC, Rx mode)
 00D3 907E              call NrfSetReg                          ; Write to SPI
 00D5                   
 00D5 5021              mov A, W_REGISTER | EN_AA               ; Enable auto ack
 00D7 573F              mov X, 0x3f                                             ; Enable AA on all pipes
 00D9 9078              call NrfSetReg
 00DB                   
 00DB                   
 00DB 5022              mov A, W_REGISTER | EN_RXADDR   ; Set write to enabled rx address register
 00DD 573F              mov X, 0x3f                                             ; Enable all 6 registers
 00DF 9072              call NrfSetReg                                  ; Write to SPI
 00E1                   
 00E1 5023              mov A, W_REGISTER | SETUP_AW    ; Set write to address width register
 00E3 5703              mov X, 0x03                                             ; Set width to 5
 00E5 906C              call NrfSetReg                                  ; Write to SPI
 00E7                   
 00E7 5024              mov A, W_REGISTER | SETUP_RETR  ; Set write to retransmit register
 00E9 5700              mov X, 0x00                                             ; disable retransmit
 00EB 9066              call NrfSetReg                                  ; Write to SPI
 00ED                   
 00ED 5025              mov A, W_REGISTER | RF_CH               ; Set write to rf channel register
 00EF 5705              mov X, 0x05                                             ; Set channel to 5
 00F1 9060              call NrfSetReg                                  ; Write to SPI
 00F3                   
 00F3 5026              mov A, W_REGISTER | RF_SETUP    ; Set write to rf setup register
 00F5 5720              mov X, 0x20                                             ; RF data rate to 250kbps, output power to 0dBm
 00F7 905A              call NrfSetReg                                  ; Write to SPI
 00F9                   
 00F9 503C              mov A, W_REGISTER | DYNPD               ; Set write to dynamic payload register
 00FB 573F              mov X, 0x3f                                             ; Enable dynamic payload on all channels
 00FD 9054              call NrfSetReg                                  ; Write to SPI
 00FF                   
 00FF 503D              mov A, W_REGISTER | FEATURE             ; Set write to feature register
 0101 5704              mov X, 0x04                                             ; Enable dynamic payload length & ack
 0103 904E              call NrfSetReg                                  ; Write to SPI
 0105                   
 0105                   ;-------- Set Rx Address --------;
 0105 4F                mov X, SP
 0106 5A3D              mov [pointer], X        ; store sp (stack frame address) in the pointer
 0108 5000              mov A, 0x00                     ; push the 5 address bytes on stack
 010A 08                push A
 010B 5018              mov A, 0x18
 010D 08                push A
 010E 50EF              mov A, 0xef
 0110 08                push A
 0111 50CD              mov A, 0xcd
 0113 08                push A
 0114 50AB              mov A, 0xab
 0116 08                push A
 0117                   
 0117 10                push X                                                  ; push the initial sp to repeat below without unwinding
 0118                   
 0118 502A              mov A, W_REGISTER | RX_ADDR_P0  ; Load the write to pipe 0 rx address command in A
 011A 5705              mov X, 5                                                ; load X with the number of values to send
 011C 907F              call SendBytes                                  ; Send command and address over SPI
 011E                   
 011E 20                pop X                           ; Pop sp (bottom of stack frame address) back in X
 011F 7700              inc [X]                         ; Increment the element at the bottom (nrf address LSByte)
 0121 5A3D              mov [pointer], X        ; Store the bottom of stack frame address in pointer
 0123                   
 0123 5705              mov X, 5                                                ; Load X with the number of values to send
 0125 502B              mov A, W_REGISTER | RX_ADDR_P1  ; Load the write to pipe 1 rx address command in A
 0127 9074              call SendBytes                                  ; Send command and address over SPI
 0129 38FB              add SP, 0xFB                                    ; substract 5 to stack pointer / remove 5 bytes address
 012B                   
 012B 502C              mov A, W_REGISTER | RX_ADDR_P2  ; Load the write to pipe 2 rx address command in A
 012D 5702              mov X, 0x02                                             ; Set value to 0x02
 012F 9022              call NrfSetReg                                  ; Write to nrf register
 0131                   
 0131 502D              mov A, W_REGISTER | RX_ADDR_P3  ; Load the write to pipe 3 rx address command in A
 0133 5703              mov X, 0x03                                             ; Set value to 0x03
 0135 901C              call NrfSetReg                                  ; Write to nrf register
 0137                   
 0137 502E              mov A, W_REGISTER | RX_ADDR_P4  ; Load the write to pipe 4 rx address command in A
 0139 5704              mov X, 0x04                                             ; Set value to 0x04
 013B 9016              call NrfSetReg                                  ; Write to nrf register
 013D                   
 013D 502F              mov A, W_REGISTER | RX_ADDR_P5  ; Load the write to pipe 5 rx address command in A
 013F 5705              mov X, 0x05                                             ; Set value to 0x05
 0141 9010              call NrfSetReg                                  ; Write to nrf register
 0143                   
 0143                   ;-------- Power on --------;
 0143 5020              mov A, W_REGISTER | CONFIG
 0145 573B              mov X, 0x3b                                             ; RX Ready int enabled, CRC enabled, power on, rx mode
 0147 900A              call NrfSetReg  
 0149                   
 0149 2E0002            or              [Port_0_Data_SHADE], 2h                         ; OR CE pin with shadow reg
 014C 5100              mov             A, [Port_0_Data_SHADE]                          ; Load shadow reg in A
 014E 6000              mov             reg[CE_Data_ADDR], A                            ; Store data in port 0
 0150                   
 0150                   ; Testing - Read registers:
 0150 910A              call Read_All_Regs
 0152 7F                ret                                                     ; End configs
 0153                   
 0153           ;-----------------------------------------------------------------------------
 0153           ;  FUNCTION NAME: NrfSetReg
 0153           ;
 0153           ;  DESCRIPTION:
 0153           ;     Write a byte to the specified nRF module register 
 0153           ;
 0153           ;-----------------------------------------------------------------------------
 0153           ;
 0153           ;  ARGUMENTS:
 0153           ;     Register address / command in A
 0153           ;         Value in X
 0153           ;
 0153           ;  RETURNS:
 0153           ;         none
 0153           ;-----------------------------------------------------------------------------
 0153           NrfSetReg:
 0153 10                push X                                  ; Preserve registers
 0154 08                push A
 0155 2600FB            and             [Port_0_Data_SHADE], ~4h                        ; OR not-CSN with shadow reg
 0158 5100              mov             A, [Port_0_Data_SHADE]                          ; Load shadow reg in A
 015A 6000              mov             reg[CSN_Data_ADDR], A                           ; Store data in port 0
 015C 90BA              call WaitBufferFree             ; Wait until tx buffer is empty
 015E 18                pop A                                   ; Restore command in A
 015F 7C0000            lcall SPIM_SendTxData   ; Send value over SPI
 0162 90B4              call WaitBufferFree             ; Wait until tx buffer is empty
 0164 18                pop A                                   ; Restore nRF register value in A
 0165 7C0000            lcall SPIM_SendTxData   ; Send value over SPI
 0168 90AE              call WaitBufferFree             ; Wait until tx buffer is empty
 016A 2E0004            or              [Port_0_Data_SHADE], 4h                         ; OR CSN pin with shadow reg
 016D 5100              mov             A, [Port_0_Data_SHADE]                          ; Load shadow reg in A
 016F 6000              mov             reg[CSN_Data_ADDR], A                           ; Store data in port 0
 0171 7F                ret
 0172           ;-----------------------------------------------------------------------------
 0172           ;  FUNCTION NAME: NrfGetReg
 0172           ;
 0172           ;  DESCRIPTION:
 0172           ;     Get a one byte register value from the nRF 
 0172           ;
 0172           ;-----------------------------------------------------------------------------
 0172           ;
 0172           ;  ARGUMENTS:
 0172           ;     Register adress in A
 0172           ;
 0172           ;  RETURNS:
 0172           ;         Register value in A
 0172           ;-----------------------------------------------------------------------------  
 0172           NrfGetReg:
 0172 08                push A
 0173 2600FB            and             [Port_0_Data_SHADE], ~4h                        ; OR not-CSN with shadow reg
 0176 5100              mov             A, [Port_0_Data_SHADE]                          ; Load shadow reg in A
 0178 6000              mov             reg[CSN_Data_ADDR], A                           ; Store data in port 0
 017A 909C              call WaitBufferFree             ; Wait until tx buffer is empty
 017C 18                pop A
 017D 7C0000            lcall SPIM_SendTxData   ; Send value over SPI
 0180 9096              call WaitBufferFree             ; Wait until tx buffer is empty
 0182 5000              mov A, 0
 0184 7C0000            lcall SPIM_SendTxData   ; Send dummy byte / Receive reg value
 0187 908F              call WaitBufferFree             ; Wait until tx buffer is empty
 0189           .wait_rx:	
 0189 7C0000            lcall  SPIM_bReadStatus ; Read SPI status
 018C 2128              and A, SPIM_SPIM_SPI_COMPLETE | SPIM_SPIM_RX_BUFFER_FULL ; Check if rx is completed
 018E AFFA              jz .wait_rx                             ; Loop until rx buffer is full
 0190 7C0000            lcall SPIM_bReadRxData  ; Store content of rx buffer in A
 0193 08                push A                                  ; Store A on stack
 0194 2E0004            or              [Port_0_Data_SHADE], 4h                         ; OR CSN pin with shadow reg
 0197 5100              mov             A, [Port_0_Data_SHADE]                          ; Load shadow reg in A
 0199 6000              mov             reg[CSN_Data_ADDR], A                           ; Store data in port 0
 019B 18                pop A                                   ; Restore RX value in A
 019C 7F                ret                                     
 019D                   
 019D           ;-----------------------------------------------------------------------------
 019D           ;  FUNCTION NAME: SendBytes
 019D           ;
 019D           ;  DESCRIPTION:
 019D           ;     Send multiple bytes to the nRF
 019D           ;
 019D           ;-----------------------------------------------------------------------------
 019D           ;
 019D           ;  ARGUMENTS:
 019D           ;     -Destination Command/Register in A
 019D           ;         -Number of bytes to send in X (excluding command)
 019D           ;         -Pointer to the first element in ram[pointer]
 019D           ;  RETURNS:
 019D           ;         none  
 019D           ;-----------------------------------------------------------------------------
 019D           SendBytes:
 019D 5A40              mov [temp], X                   ; Store bytes count in temp
 019F 08                push A                                  ; Store command on stack
 01A0 2600FB            and             [Port_0_Data_SHADE], ~4h                        ; OR not-CSN with shadow reg
 01A3 5100              mov             A, [Port_0_Data_SHADE]                          ; Load shadow reg in A
 01A5 6000              mov             reg[CSN_Data_ADDR], A                           ; Store data in port 0
 01A7 906F              call WaitBufferFree             ; Wait until TX buffer is empty
 01A9 18                pop A                                   ; Restore Command in Acc
 01AA 7C0000            lcall SPIM_SendTxData   ; Send the Command/register address
 01AD           .byteToSend:
 01AD 9069              call WaitBufferFree             ; Wait until TX buffer is empty
 01AF 3E3D              mvi A, [pointer]                ; Load next value (on the stack), increment pointer
 01B1 7C0000            lcall SPIM_SendTxData   ; Send byte over SPI
 01B4 7A40              dec [temp]                              ; Decrement counter
 01B6 BFF6              jnz .byteToSend                 ; If counter == 0, done
 01B8 2E0004            or              [Port_0_Data_SHADE], 4h                         ; OR CSN pin with shadow reg
 01BB 5100              mov             A, [Port_0_Data_SHADE]                          ; Load shadow reg in A
 01BD 6000              mov             reg[CSN_Data_ADDR], A                           ; Store data in port 0
 01BF 7F                ret
 01C0                   
 01C0           ;-----------------------------------------------------------------------------
 01C0           ;  FUNCTION NAME: ReadPayload
 01C0           ;
 01C0           ;  DESCRIPTION:
 01C0           ;     - Get the payload and store it in buffer for the specified pipe
 01C0           ;         - If the length of the data received is greater than buffer, 
 01C0           ;               it discards the rest.
 01C0           ;         - Get the first 9 bytes and append a null char
 01C0           ;-----------------------------------------------------------------------------
 01C0           ;
 01C0           ;  ARGUMENTS:
 01C0           ;         Pipe index/number in A, Length in X
 01C0           ;  RETURNS:
 01C0           ;         none  / Store string in corresponding buffer
 01C0           ;-----------------------------------------------------------------------------
 01C0           ReadPayload:
 01C0 5A40              mov [temp], X           ; Store data length in temp
 01C2 3C400A            cmp [temp], 10          ; Check if data length is greater than buffer - 1 ( CF set length < 10 )
 01C5 D005              jnc .fix_length         ; If greater than buffer, fix length
 01C7 5700              mov X, 0                        ; Otherwise set number of bytes to send to 0
 01C9 8008              jmp .length_ok          ; And skip adjustments
 01CB           .fix_length: 
 01CB 4B                swap A, X                       ; Preserve A val, get data length in A
 01CC 1109              sub A, 9                        ; Calculate the number of bytes to flush out of the FIFO after filling buffer
 01CE 4B                swap A, X                       ; Swap values back, now X has the extra bytes to clear
 01CF 554009            mov [temp], 9           ; Set to read 9 bytes in the buffer
 01D2           .length_ok:
 01D2 10                push X                          ; Push amount of bytes to clear at the end (or 0)
 01D3 F000              index pipes_table       ; Get target pipe buffer starting address
 01D5 533D              mov [pointer], A        ; Store buffer addr. in pointer
 01D7 903F              call WaitBufferFree     ; Make sure SPI is ready to send
 01D9 2600FB            and             [Port_0_Data_SHADE], ~4h                        ; OR not-CSN with shadow reg
 01DC 5100              mov             A, [Port_0_Data_SHADE]                          ; Load shadow reg in A
 01DE 6000              mov             reg[CSN_Data_ADDR], A                           ; Store data in port 0
 01E0 5061              mov A, R_RX_PAYLOAD     ; Send receive payload command to nRF
 01E2 7C0000            lcall SPIM_SendTxData
 01E5 9031              call WaitBufferFree     ; Wait until SPI is complete
 01E7           .get_pl_byte:
 01E7 5000              mov A, 0x00                             ; Load dummy data in A
 01E9 7C0000            lcall SPIM_SendTxData   ; Clock SPI to receive a payload byte   
 01EC           .wait_pl_rx:	
 01EC 7C0000            lcall  SPIM_bReadStatus ; Read SPI status
 01EF 2128              and A, SPIM_SPIM_SPI_COMPLETE | SPIM_SPIM_RX_BUFFER_FULL ; Check if SPI Rx is completed
 01F1 AFFA              jz .wait_pl_rx                  ; Wait until Rx is done
 01F3 7C0000            lcall SPIM_bReadRxData  ; Read data in A
 01F6 3F3D              mvi [pointer], A                ; Store byte in pipe buffer, increment index
 01F8 7A40              dec [temp]                              ; Decrement count
 01FA BFEC              jnz .get_pl_byte                ; Get other bytes until count is 0.
 01FC 18                pop A                                   ; Pop number of bytes to clear in A
 01FD A00E              jz .end_pl_rx                   ; End if extra bytes = 0
 01FF 5340              mov [temp], A                   ; Store in temp
 0201           .discard_bytes:
 0201 5000              mov A, 0x00                             ; Load dummy data in A
 0203 7C0000            lcall SPIM_SendTxData   ; Clock SPI to receive a payload byte   
 0206 9010              call WaitBufferFree             ; Wait until tx is done
 0208 7A40              dec [temp]                              ; decrease count
 020A BFF6              jnz .discard_bytes              ; repeat until count is zero
 020C           .end_pl_rx:
 020C 2E0004            or              [Port_0_Data_SHADE], 4h                         ; OR CSN pin with shadow reg
 020F 5100              mov             A, [Port_0_Data_SHADE]                          ; Load shadow reg in A
 0211 6000              mov             reg[CSN_Data_ADDR], A                           ; Store data in port 0
 0213 5000              mov A, 0                                ; Load A with null char
 0215 3F3D              mvi [pointer], A                ; Store it at the end of the buffer
 0217 7F                ret
 0218           ;-----------------------------------------------------------------------------
 0218           ;  FUNCTION NAME: WaitBufferFree
 0218           ;
 0218           ;  DESCRIPTION:
 0218           ;     Wait until the SPI buffer is clear to send
 0218           ;
 0218           ;-----------------------------------------------------------------------------
 0218           ;
 0218           ;  ARGUMENTS:
 0218           ;         none
 0218           ;  RETURNS:
 0218           ;         none  
 0218           ;-----------------------------------------------------------------------------
 0218           WaitBufferFree:
 0218 7C0000            lcall SPIM_bReadStatus                          ; Fetch SPI Status
 021B 2110              and A, SPIM_SPIM_TX_BUFFER_EMPTY        ; Check if buffer is empty
 021D AFFA              jz WaitBufferFree                                       ; Loop until it is
 021F 7F                ret                                                                     ; Return from subroutine
 0220                   
 0220           ;-----------------------------------------------------------------------------
 0220           ;  FUNCTION NAME: Write_To_LCD
 0220           ;
 0220           ;  DESCRIPTION:
 0220           ;     Write a string with a static format on LCD
 0220           ;     "Tx<pipe index>: <temperature> C"
 0220           ;-----------------------------------------------------------------------------
 0220           ;
 0220           ;  ARGUMENTS:
 0220           ;         Pipe Index in A
 0220           ;  RETURNS:
 0220           ;         none
 0220           ;-----------------------------------------------------------------------------  
 0220           Write_To_LCD:
 0220 5340              mov [temp], A           ; copy the pipe index to temp
 0222 4F                mov X, sp                       ; store current sp to X
 0223 5054              mov A, 'T'                      ; Push the string on the stack
 0225 08                push A
 0226 5078              mov A, 'x'
 0228 08                push A
 0229 5140              mov A, [temp]           ; Load A with pipe index
 022B 0130              add A, 0x30                     ; Add 0x30 to convert to ascii
 022D 08                push A
 022E 503A              mov A, ':'
 0230 08                push A
 0231 5020              mov A, ' '
 0233 08                push A  
 0234 5140              mov A, [temp]           ; Load A with pipe index
 0236 F000              index pipes_table       ; Load the address of the buffer in A
 0238 533D              mov [pointer], A        ; copy the address to pointer 
 023A           .copy_to_stack:
 023A 3E3D              mvi A, [pointer]        ; Load A with indexed character, increase index
 023C A004              jz .end_copy            ; stop at null character, do not push it on stack
 023E 08                push A                          ; push character on the stack
 023F 8FFA              jmp .copy_to_stack      ; repeat until null character
 0241           .end_copy:
 0241 5020              mov A, ' '                      ; Push the rest of the string on stack (" C    ")
 0243 08                push A
 0244 5043              mov A, 'C'
 0246 08                push A
 0247 5020              mov A, ' '                      ; Adding spaces to avoid "ghost" characters from previous prints \
 0249 08                push A                          ; if the string is smaller than the last
 024A 5020              mov A, ' '
 024C 08                push A
 024D 5020              mov A, ' '
 024F 08                push A
 0250 5000              mov A, 0                        ; Push null character on stack
 0252 08                push A
 0253 10                push X                          ; Preserve original SP
 0254                   
 0254 5000              mov A, 0                        ; Load A with str pointer MSByte (256 bytes ram...)
 0256 7C0000            lcall LCD_PrString      ; Call LCD PrString, X already has str pointer LSByte (original SP)
 0259                   
 0259 18                pop A           ; pop SP back in A
 025A 4E                swap A, sp      ; Restore SP / get rid of string
 025B 7F                ret
 025C                   
 025C           Read_All_Regs:	; Get a register dump on the logic analyzer
 025C 5000              mov A, 0
 025E           .read_loop:	
 025E 08                push a
 025F 9F11              call NrfGetReg
 0261 18                pop A
 0262 74                inc A
 0263 3918              cmp A, 0x18
 0265 BFF8              jnz .read_loop
 0267 7F                ret
 0268                   
